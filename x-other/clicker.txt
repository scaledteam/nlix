#
# Created by scaled
#
# Ported from Windows 10.4
#

@name clicker

xregister("games", "clicker")

P2F["clicker", string] = "clicker"

function clicker() {
    switch (P["state", number]) {
        case 0,
            if (xcanCreate(17)) {
                # Graphics
                local Res = P["xframe", table]["size", vector2]
                local TextSize = Res[2] / 15
                
                # Background
                xcreate("box"):xsize(Res):xcolor(vec())
                xcreate("box"):xsize(Res * vec2(1 / 3, 1 / 5))
                
                P["scopeText", table] = xcreate("textLayout"):xsize(Res * vec2(1 / 3, 1 / 5)):xsize(TextSize):xcolor(vec()):xalign(vec2(1))
                
                xcreate("box"):xpos(Res * vec2(1 / 3, 0)):xsize(Res * vec2(2 / 3, 1)):xcolor(vec(80))
                
                P["ballSize", number] = Res[2] / 6
                
                P["circle", table] = xcreate("circle"):xpos(Res * vec2(1 / 6, 6 / 10)):xsize(vec2(P["ballSize", number]))
                
                local Offset = Res[2] / 30
                local Pos = Res * vec2(1 / 3, 0) + vec2(Offset)
                local Step = Res * vec2(1 / 3, 1 / 5)
                local Size = Res * vec2(1 / 3, 2 / 15) - vec2(Offset * 2, 0)
                
                for (X = 0, 1) {
                    for (Y = 0, 4) {
                        xcreate("box"):xpos(Pos + vec2(X, Y) * Step):xsize(Size):xcolor(vec(63, 127, 255))
                    }
                }
                
                xcreate("textLayout"):xtext(
                    "Human\n50" + "\n\n" + 
                    "Machine\n2000" + "\n\n" + 
                    "Robot\n15000" + "\n\n" + 
                    "HAAAX!\n200000" + "\n\n" + 
                    "Developer\n2000000"
                ):xpos(Res * vec2(1 / 3, 0) + vec2(0, TextSize / 2)):xsize(Res * vec2(1 / 3, 1)):xsize(TextSize):xalign(vec2(1, 0)):xmonospaced(1)
                
                xcreate("textLayout"):xtext(
                    "Sportsman\n500" + "\n\n" + 
                    "AK47\n6000" + "\n\n" + 
                    "Computer\n60000" + "\n\n" + 
                    "Cheat\n600000" + "\n\n" + 
                    "Buy win\n6000000"
                ):xpos(Res * vec2(2 / 3, 0) + vec2(0, TextSize / 2)):xsize(Res * vec2(1 / 3, 1)):xsize(TextSize):xalign(vec2(1, 0))
                
                # Algorithm
                P["systimeOld", number] = systime()
                
                P["costs", array] = array(
                    50, 500,
                    2000, 6000,
                    15000, 60000,
                    200000, 600000,
                    2000000, 6000000
                )
                
                P["boosts", array] = array(
                    3, 8,
                    30, 80,
                    300, 800,
                    3000, 8000,
                    30000, 80000
                )
                
                P["startTime", number] = systime()
                
                P["state", number] = 1
            }
            break
        
        case 1,
            if (xcanDraw()) {
                if (P:exists("systimeOld")) {
                    local DeltaTime = systime() - P["systimeOld", number]
                    
                    P["score", number] = P["score", number] + P["speed", number] * DeltaTime
                    
                    P["circlePos", number] = P["circlePos", number] + (DeltaTime * P["speed", number]) ^ 0.5
                    
                    if (P["impulse", number] > 0) {
                        P["impulse", number] = clamp(P["impulse", number] - 2 * DeltaTime, 0, 1)
                    }
                    
                    P["scopeText", table]:xtext(int(P["score", number]):toString())
                    
                    P["circle", table]:xcolor(hsv2rgb(((systime() - P["startTime", number]) * 18) % 360, 1, 1))
                    P["circle", table]:xsize(vec2(P["ballSize", number] * min(1, (sin(P["circlePos", number]) + 3 + P["impulse", number]) / 4)))
                    
                    local Cursor = xcursor()
                    if (xkeyUse() != P["egpUseOld", number]) {
                        P["egpUseOld", number] = xkeyUse()
                        
                        if (xkeyUse()) {
                            local Res = P["xframe", table]["size", vector2]
                            
                            if (inrange(Cursor, Res * vec2(1 / 3, 0), Res)) {
                                local Pos = int(Cursor[1] / Res[1] * 3) + int(Cursor[2] / Res[2] * 5) * 2
                                
                                if (P["score", number] >= P["costs", array][Pos, number]) {
                                    P["score", number] = P["score", number] - P["costs", array][Pos, number]
                                    P["speed", number] = P["speed", number] + P["boosts", array][Pos, number]
                                    
                                    if (Pos == 10) {
                                        end()
                                    }
                                }
                            }
                            
                            elseif (inrange(Cursor, vec2(0, Res[2] / 5), Res * vec2(1 / 3, 1))) {
                                P["score", number] = P["score", number] + 1
                                
                                P["impulse", number] = 1
                            }
                        }
                    }
                }
                P["systimeOld", number] = systime()
            }
            break
    }
}
