#
# Created by scaled
#

@name tic-tac-toe

xmenuAdd("games", "tic-tac-toe")

P2F["tic-tac-toe", string] = "tictactoe"

function tictactoe() {
    switch (P["state", number]) {
        case 0,
            if (xcanCreate(12)) {
                local Res = vec2(min(xres()[1], xres()[2]))
                P["xframe", table]["size", vector2] = Res
                
                local Background = xcreate("box"):xsize(Res):xcolor(vec(180, 0, 0))
                
                xcreate("polyOutline"):xparent(Background):xvertices(array(
                    Res * vec2(-0.5,    -0.5),
                    Res * vec2( 0.5,    -0.5),
                    Res * vec2( 0.5,    -0.167),
                    Res * vec2(-0.5,    -0.167),
                    Res * vec2(-0.5,     0.167),
                    Res * vec2( 0.5,     0.167),
                    Res * vec2( 0.5,     0.5),
                    Res * vec2(-0.5,     0.5),
                    Res * vec2(-0.5,    -0.5),
                    Res * vec2(-0.5,     0.5),
                    Res * vec2(-0.167,   0.5),
                    Res * vec2(-0.167,  -0.5),
                    Res * vec2( 0.167,  -0.5),
                    Res * vec2( 0.167,   0.5),
                    Res * vec2( 0.5,     0.5),
                    Res * vec2( 0.5,    -0.5)
                ))
                
                local H = 0
                for (I = 1, 3) {
                    for (J = 1, 3) {
                        H++
                        P[H, table] = xcreate("lineStrip"):xsize(2)
                    }
                }
                
                P["winLine", table] = xcreate("line"):xsize(2)
                
                P["scores", array] = array()
                
                P["state", number] = 1
            }
            break
        
        case 1,
            if (xcanDraw()) {
                local Size = xres() / 3
                local Cursor = floor(xcursor() / Size)
                local Use = xkeyUse()
                
                if (Use != P["useOld", number]) {
                    P["useOld", number] = Use
                    
                    if (Use & inrange(Cursor, vec2(), vec2(2))) {
                        local Pos = Cursor[1] + Cursor[2] * 3 + 1
                        
                        if (P["scores", array][Pos, number] == 0) {
                            P["scores", array][Pos, number] = 1
                            
                            local Offset = (Cursor + vec2(0.5)) * Size
                            P[Pos, table]:xalpha(255):xvertices(array(
                                Offset + Size * vec2(-0.45),
                                Offset + Size * vec2(0.45),
                                Offset + Size * vec2(),
                                Offset + Size * vec2(-0.45, 0.45),
                                Offset + Size * vec2(0.45, -0.45)
                            ))
                            
                            if (P["playerSteps", number] >= 4) {
                                out("It's a Draw.")
                                P["state", number] = 4
                            }
                            else {
                                P["playerSteps", number] = P["playerSteps", number] + 1
                                P["state", number] = 2
                            }
                        }
                    }
                }
            }
            break
        
        case 2,
            local Scores = P["scores", array]
            
            # Horizontal
            local Pos = 0
            
            for (Y = 0, 2) {
                local Last0 = 0
                local Count = 0
                
                for (X = 0, 2) {
                    Pos++
                    if (Scores[Pos, number] == 0) {
                        Last0 = Pos
                    }
                    else {
                        Count += Scores[Pos, number]
                    }
                }
                
                if (Last0 & abs(Count) > 1) {
                    P["botPos", number] = Last0
                    Scores[Last0, number] = -1
                    
                    P["win", number] = Count == -2
                    P["state", number] = 3
                    return
                }
                elseif (Count == 3) {
                    P["loose", number] = 1
                    P["state", number] = 3
                    return
                }
            }
            
            # Vertical
            for (X = 1, 3) {
                local Last0 = 0
                local Count = 0
                
                Pos = X
                
                for (Y = 0, 2) {
                    if (Scores[Pos, number] == 0) {
                        Last0 = Pos
                    }
                    else {
                        Count += Scores[Pos, number]
                    }
                    Pos += 3
                }
                
                if (Last0 & abs(Count) > 1) {
                    P["botPos", number] = Last0
                    Scores[Last0, number] = -1
                    
                    P["win", number] = Count == -2
                    P["state", number] = 3
                    return
                }
                elseif (Count == 3) {
                    P["loose", number] = 1
                    P["state", number] = 3
                    return
                }
            }
            
            # Diagonal
            Pos = 3
            for (Diagonal = 0, 1) {
                local Last0 = 0
                local Count = 0
                
                for (I = 0, 2) {
                    if (Scores[Pos, number] == 0) {
                        Last0 = Pos
                    }
                    else {
                        Count += Scores[Pos, number]
                    }
                    
                    Pos += (2 + 2 * Diagonal)
                }
                
                if (Last0 & abs(Count) > 1) {
                    P["botPos", number] = Last0
                    Scores[Last0, number] = -1
                    
                    P["win", number] = Count == -2
                    P["state", number] = 3
                    return
                }
                elseif (Count == 3) {
                    P["loose", number] = 1
                    P["state", number] = 3
                    return
                }
                Pos = 1
            }
            
            for (I = 1, 9) {
                if (Scores[I, number] == 0) {
                    P["botPos", number] = I
                    
                    P["state", number] = 3
                    return
                }
            }
            
            out("Internal error.")
            P["state", number] = 1
            break
        
        case 3,
            if (xcanDraw()) {
                local Size = xres() / 3
                
                local Pos = P["botPos", number]
                local Cursor = vec2((Pos - 1) % 3, int((Pos - 1) / 3))
                
                P["scores", array][Pos, number] = -1
                
                local Offset = (Cursor + vec2(0.5)) * Size
                P[Pos, table]:xalpha(255):xvertices(array(
                    Offset + Size * vec2( 0.45, 0),
                    Offset + Size * vec2( 0, -0.45),
                    Offset + Size * vec2(-0.45, 0),
                    Offset + Size * vec2( 0,  0.45),
                    Offset + Size * vec2( 0.45, 0)
                ))
                
                if (P["loose", number]) {
                    P["loose", number] = 0
                    
                    out("You win this game.")
                    P["state", number] = 4
                }
                elseif (P["win", number]) {
                    P["win", number] = 0
                    
                    out("You lose this game.")
                    P["state", number] = 4
                }
                else {
                    P["state", number] = 1
                }
            }
            break
        
        case 4,
            if (xcanDraw()) {
                P["playerSteps", number] = 0
                P["scores", array]:clear()
                
                for (I = 1, 9) {
                    P[I, table]:xalpha(0)
                }
                
                P["state", number] = 1
            }
            break
    }
}
