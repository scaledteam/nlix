#
# Created by scaled
#

@name radar

#ifdef findInSphere(vector, number)
xmenuAdd("real", "radar")

PExist["radar", number] = 1

function radar() {
    switch (P["state", number]) {
        case 0,
            P["count", number] = 10
            if (xcanCreate(1 + P["count", number])) {
                local Res = xres()
                
                xcreate("box"):xsize(Res):xcolor(vec())
                
                P["texts", table] = table()
                for (I = 1, P["count", number]) {
                    P["texts", table]:pushTable(xcreate("text"):xsize(12))
                }
                
                P["class", string] = "player"
                #P["class", string] = "prop_physics"
                
                local Pos = P["xdevice", wirelink]:entity():boxCenterW()
                
                findByClass(P["class", string])
                findSortByDistance(Pos)
                
                local Targets = findToArray()
                local Acpect = sqrt(max(Res[1] / Res[2], Res[2] / Res[1]) ^ 2 + 1)
                local Distance = max(500, Pos:distance(Targets[min(Targets:count(), P["count", number]), entity]:pos()))
                
                P["findDistance", number] = Distance * Acpect
                P["multiplier", number] = min(Res[1], Res[2]) / Distance / 2
                
                P["state", number] = 1
            }
            break
        
        case 1,
            if (xcanDraw() & systime() > P["nextUpdate", number]) {
                local XScreen = P["xdevice", wirelink]:entity()
                local Pos = XScreen:boxCenterW()
                
                findIncludeClass(P["class", string])
                findInSphere(Pos, P["findDistance", number])
                findSortByDistance(Pos)
                findClearWhiteClassList()
                
                local Res = xres()
                local Offset = Res / 2
                
                local FindToArray = findToArray()
                local Count = min(FindToArray:count(), P["count", number])
                for (I = 1, Count) {
                    local Object = P["texts", table][I, table]
                    
                    Object:xpos(clamp(
                        shift(vec2(FindToArray[I, entity]:pos() - Pos):rotate(-vec2(XScreen:toWorldAxis(P["xparam", table]["y", vector])):toAngle())) * P["multiplier", number] + Offset,
                    vec2(), Res - vec2(0, 12)))
                    
                    if (Object["pos", vector2][1] > Offset[1]) {
                        Object:xtext(FindToArray[I, entity]:name() + " '")
                        Object:xalign(vec2(2, 0))
                    }
                    else {
                        Object:xtext("' " + FindToArray[I, entity]:name())
                        Object:xalign(vec2())
                    }
                }
                
                local I = P["countOld", number]
                while (I > Count) {
                    local Object = P["texts", table][I, table]
                    
                    Object:xtext("")
                    
                    I--
                }
                P["countOld", number] = Count
                
                P["nextUpdate", number] = systime() + 0.5
            }
            break
    }
}
#endif
