#
# Created by scaled
#

@name cp

PExist["cp", number] = 1

function cp() { 
    switch (P["state", number]) {
        case 0,
            if (args() < 2) {
                out("Usage: cp [path from] [path to]\n")
                end()
            }
            else {
                P["pathFrom", string] = fabsPath(arg(1), P["parent", table]["pwd", string])
                P["pathTo", string] = fabsPath(arg(2), P["parent", table]["pwd", string])
                
                if (P["pathFrom", string]:right(1) != "/") {
                    if (P["pathTo", string]:right(1) == "/") {
                        P["pathTo", string] = P["pathTo", string] + P["pathFrom", string]:explode("/"):popString()
                    }
                    
                    fread(P["pathFrom", string])
                    P["state", number] = 1
                }
                else {
                    if (P["pathTo", string]:right(1) == "/") {
                        flist(P["pathFrom", string])
                        
                        P["state", number] = 3
                    }
                    else {
                        out("Error: Can't copy directory into file.\n")
                    }
                }
            }
            break
        
        # one object
        case 1,
            if (fwait()) {
                fwrite(P["pathTo", string], fin())
                P["state", number] = 2
            }
            break
        
        case 2,
            if (fwait()) {
                out(fin())
                end()
            }
            break
        
        # recursive
        case 3,
            if (fwait()) {
                P["list", array] = fin():explode("\n")
                
                P["state", number] = 4
            }
            break
        
        case 4,
            if (P["list", array]:count() > 0) {
                local ListEntry = P["list", array]:shiftString()
                
                local Program = exec("cp")
                Program["args", array] = array(P["pathFrom", string] + ListEntry, P["pathTo", string] + ListEntry)
                Program["out", array] = P["out", array]
                
                P["childrens", table]:pushTable(Program)
            }
            else {
                P["state", number] = 5
            }
            break
        
        case 5,
            if (P["childrens", table]) {
                if (!P["childrens", table][1, table]) {
                    P["childrens", table]:remove(1)
                }
            }
            else {
                end()
            }
            break
    }
}
