#
# Created by scaled
#

@name fstable

KList["fstable", number] = 1

function fstable() {
    if (P["fs", table]:exists("table")) {
        local Dir = P["fs", table]["table", table]
        
        switch (P["mode", string]) {
            case "list",
                if (P["path", string] != "") {
                    foreach (I, NextDir:string = P["path", string]:explode("/")) {
                        if (Dir:exists(NextDir)) {
                            if (Dir:typeids()[NextDir, string] == "t") {
                                Dir = Dir[NextDir, table]
                            }
                            else {
                                out("Error: This not a directory.\n")
                                end()
                                return
                            }
                        }
                        elseif (Dir:exists(NextDir:toNumber())) {
                            if (Dir:typeids()[NextDir:toNumber(), string] == "t") {
                                Dir = Dir[NextDir:toNumber(), table]
                            }
                            else {
                                out("Error: This not a directory.\n")
                                end()
                                return
                            }
                        }
                        else {
                            out("Error: Wrong path.\n")
                            end()
                            return
                        }
                    }
                }
                
                local Out = ""
                
                local Types = Dir:typeids()
                local Keys = Dir:keys()
                for (I = 1, Dir:count()) {
                    if (Types[Keys[I, string], string] == "t") {
                        Out += Keys[I, string] + "/\n"
                    }
                    elseif (Types[Keys[I, number], string] == "t") {
                        Out += Keys[I, number] + "/\n"
                    }
                    else {
                        Out += Keys[I, string] + "\n"
                    }
                }
                out(Out:sub(1, -2))
                end()
                break
            
            case "read",
                if (P["path", string] != "") {
                    local PathExp = P["path", string]:explode("/")
                    
                    while (PathExp:count() > 0) {
                        local NextDir = PathExp:shiftString()
                        if (Dir:exists(NextDir)) {
                            if (PathExp:count() != 0) {
                                Dir = Dir[NextDir, table]
                            }
                            else {
                                local Type = Dir:typeids()[NextDir, string]
                                
                                switch (Type) {
                                    case "t",
                                        out("Error: This is not a regular file.\n")
                                        break
                                    
                                    case "s",
                                        out(Dir[NextDir, string])
                                        out("\n")
                                        break
                                    
                                    case "n",
                                        out(Dir[NextDir, number]:toString())
                                        break
                                    
                                    default,
                                        out("Error: Unsupported type.\n")
                                }
                            }
                        }
                        elseif (Dir:exists(NextDir:toNumber())) {
                            if (PathExp:count() != 0) {
                                Dir = Dir[NextDir:toNumber(), table]
                            }
                            else {
                                local Type = Dir:typeids()[NextDir:toNumber(), string]
                                
                                switch (Type) {
                                    case "t",
                                        out("Error: This is not a regular file.\n")
                                        break
                                    
                                    case "s",
                                        out(Dir[NextDir:toNumber(), string])
                                        out("\n")
                                        break
                                    
                                    case "n",
                                        out(Dir[NextDir:toNumber(), number]:toString())
                                        out("\n")
                                        break
                                    
                                    default,
                                        out("Error: Unsupported type.\n")
                                }
                            }
                        }
                        else {
                            out("Error: Wrong path.\n")
                        }
                    }
                }
                
                end()
                break
            
            case "write",
                if (wait()) {
                    if (P["path", string] != "") {
                        local PathExp = P["path", string]:explode("/")
                        
                        while (PathExp:count() > 0) {
                            local NextDir = PathExp:shiftString()
                            if (PathExp:count() != 0) {
                                if (Dir:exists(NextDir)) {
                                    Dir = Dir[NextDir, table]
                                }
                                elseif (Dir:exists(NextDir:toNumber())) {
                                    Dir = Dir[NextDir:toNumber(), table]
                                }
                                else {
                                    out("Error: Wrong path.\n")
                                    end()
                                    return
                                }
                            }
                            else {
                                local In = in()
                                if (In:trim() == "0" | In:toNumber() != 0) {
                                    Dir[NextDir, number] = In:toNumber()
                                }
                                else {
                                    Dir[NextDir, string] = In
                                }
                                break
                            }
                        }
                    }
                    
                    out("")
                    end()
                }
                break
            
            case "remove",
                if (P["path", string] != "") {
                    local PathExp = P["path", string]:explode("/")
                    
                    while (PathExp:count() > 0) {
                        local NextDir = PathExp:shiftString()
                        if (PathExp:count() != 0) {
                            if (Dir:exists(NextDir)) {
                                Dir = Dir[NextDir, table]
                            }
                            elseif (Dir:exists(NextDir:toNumber())) {
                                Dir = Dir[NextDir:toNumber(), table]
                            }
                            else {
                                out("Error: Wrong path.\n")
                                end()
                                return
                            }
                        }
                        else {
                            Dir:remove(NextDir)
                            break
                        }
                    }
                }
                
                out("")
                end()
                break
            
            default,
                out("Error: Unsupported action.\n")
                end()
        }
    }
    else {
        out("Error: No table in fstab.\n")
        end()
    }
}
