#
# Created by scaled
#

@name libfs

function string string:toAbsoletePath(Context:string) {
    if (This[1] != "/") {
        if (Context != "") {
            return Context + This
        }
        else {
            return "/" + This
        }
    }
    else {
        return This
    }
}

function number fsCall(Mode:string, Path:string) {
    Path = Path:toAbsoletePath(P["parent", table]["pwd", string])
    
    # Remove last slash if it has
    if (Path:right(1) == "/") {
        Path = Path:sub(1, -2)
    }
    
    local PathExp = Path:explode("/")
    
    local Fstab = S["etc", table]["fstab", table]
    
    local I = PathExp:count()
    while (I > 0) {
        local BeforeFsPath = PathExp:concat("/", 1, I)
        if (BeforeFsPath == "") {
            BeforeFsPath = "/"
        }
        
        if (Fstab:exists(BeforeFsPath)) {
            local Fs = Fstab[BeforeFsPath, table]
            local Program = exec("fs" + Fs["type", string])
            
            Program["mode", string] = Mode
            Program["fs", table] = Fs
            Program["path", string] = PathExp:concat("/", I + 1) # After fs path
            
            P["fs", table] = Program
            
            return 1
        }
        I--
    }
    
    return 0
}


function fread(Path:string) {
    local Cat = exec("cat")
    Cat["args", array] = array(Path)
    
    Cat["out", array] = P["fin", array] = array()
}

function flist(Path:string) {
    local Ls = exec("ls")
    Ls["args", array] = array(Path)
    
    Ls["out", array] = P["fin", array] = array()
}

function string fwrite(Path:string, Data:string) {
    local Touch = exec("touch")
    Touch["args", array] = array(Path)
    Touch["in", array] = array(Data)
    
    Touch["out", array] = P["fin", array] = array()
}


function number fwait() {
    return P["fin", array]:count() > 0
}

function string fin() {
    return P["fin", array]:shiftString()
}
