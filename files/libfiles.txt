#
# Created by scaled
#

@name libfiles
@persist Filesystems:table

if (Tables:exists("Filesystems")) {
    Filesystems = Tables["Filesystems", table]
}
else {
    Tables["Filesystems", table] = Filesystems
}

function string fabsPath(Path:string, Context:string) {
    if (Path[1] != "/") {
        return Context + Path
    }
    else {
        return Path
    }
}

function table fsCall(Mode:string, Path:string) {
    if (Path[1] != "/") {
        Path = "/" + Path
    }
    
    # Remove last slash if it has
    if (Path:right(1) == "/") {
        Path = Path:sub(1, -2)
    }
    
    local PathExp = Path:explode("/")
    
    local I = PathExp:count()
    while (I > 0) {
        local BeforeFsPath = PathExp:concat("/", 1, I)
        if (BeforeFsPath == "") {
            BeforeFsPath = "/"
        }
        
        if (Filesystems:exists(BeforeFsPath)) {
            local Fs = Filesystems[BeforeFsPath, table]
            local Program = exec("fs" + Fs["type", string])
            
            Program["mode", string] = Mode
            Program["fs", table] = Fs
            Program["path", string] = PathExp:concat("/", I + 1) # After fs path
            
            P["fin", array] = Program["out", array] = array()
            
            return Program
        }
        I--
    }
    
    P["fin", array] = array("Error: filesystem don't exist in fstab.\n")
    
    return NULL
}


function fread(Path:string) {
    fsCall("read", Path)
}

function flist(Path:string) {
    fsCall("list", Path)
}

function fwrite(Path:string, Data:string) {
    local FS = fsCall("write", Path)
    FS["in", array] = array(Data)
}

function fremove(Path:string) {
    fsCall("remove", Path)
}

function fmkdir(Path:string) {
    fsCall("mkdir", Path)
}

function fexists(Path:string) {
    fsCall("exists", Path)
}


function number fwait() {
    return P["fin", array]:count() > 0
}

function string fin() {
    return P["fin", array]:shiftString()
}
