#
# Created by scaled
#

@name libdevices
@persist Devices:table

if (Tables:exists("Devices")) {
    Devices = Tables["Devices", table]
}
else {
    Devices = Tables["Devices", table] = table(
        "byId" = table(),
        "busyPrograms" = table(),
        "busyDevices" = table()
    )
}

# For system
function string wirelink:type() {
    local Name = This:entity():type()
    
    if (Name == "gmod_wire_expression2") {
        return "e2_" + This:entity():getName()
    }
    else {
        return Name
    }
}

function deviceAdd(Device:wirelink) {
    if (Device) {
        local Type = Device:type()
        
        if (Devices:exists(Type)) {
            Devices[Type, array]:unshiftWirelink(Device)
        }
        else {
            Devices[Type, array] = array(Device)
        }
    }
}

function number deviceNew(Device:wirelink) {
    if (Device) {
        local Entity = Device:entity()
        local Id = Entity:id()
        
        if (Entity & Devices["byId", table][Id, entity] != Entity) {
            Devices["byId", table][Id, entity] = Entity
            
            deviceAdd(Device)
            return 1
        }
    }
    return 0
}

# For programs
function number deviceGet(Type:string) {
    if (!P["device", wirelink]) {
        if (Devices:exists(Type)) {
            # Add new device
            if (Devices[Type, array]:count() > 0) {
                local Device = Devices[Type, array]:shiftWirelink()
                if (Device) {
                    P["device", wirelink] = Device
                    Devices["busyPrograms", table]:pushTable(P)
                    Devices["busyDevices", table]:pushWirelink(Device)
                    
                    if (Devices[Type, array]:count() == 0) {
                        Devices:remove(Type)
                    }
                    return 1
                }
            }
            else {
                Devices:remove(Type)
            }
        }
        else {
            # return device from dead app
            local Programs = Devices["busyPrograms", table]
        
            if (Programs) {
                local Counter = Devices["busyCounter", number] % Programs:count() + 1
                Devices["busyCounter", number] = Counter
                
                if (!Programs[Counter, table]) {
                    Programs:remove(Counter)
                    
                    deviceAdd(Devices["busyDevices", table]:removeWirelink(Counter))
                }
            }
        }
    }
    return 0
}

function deviceReturn() {
    deviceAdd(P:removeWirelink("device"))
}
