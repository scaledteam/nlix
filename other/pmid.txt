#
# Created by scaled
#

@name pmid

P2F["pmid", string] = "pmid"

function pmid() {
    switch (P["state", number]) {
        case 0,
            local Program = exec("cat")
            #Program["args", array] = array("/e2shared/bach-bourree.mid.txt")
            Program["args", array] = array("/e2shared/castle-complete.mid.txt")
            #Program["args", array] = array("/e2shared/game-over.mid.txt")
            Program["out", array] = P["in", array] = array()
            
            P["state", number] = 1
            break
        
        case 1,
            if (wait()) {
                local Data = in()
                
                if (Data:left(4) == "MThd") {
                    Data = Data:sub(9)
                    
                    # ind header
                    ## midi format
                    #Data[1] Data[2]
                    
                    ## blocks count
                    P["blocksCount", number] = (toByte(Data[3]) << 8) + toByte(Data[4])
                    out("blocks count: " + P["blocksCount", number] + "\n")
                    
                    ## The Pulses Per Quarter Note
                    #Data[5] Data[6]
                    P["interval", number] = tickInterval() / 10
                    
                    Data = Data:sub(7)
                    
                    P["data", string] = Data
                    P["state", number] = 2
                }
                else {
                    out("Error: File is not midi.\n")
                    end()
                }
            }
            break
        
        case 2,
            if (P["blocksCount", number] > 0) {
                local Data = P["data", string]
                
                # block
                if (Data:left(4) == "MTrk") {
                    Data = Data:sub(5)
                    
                    P["blockLength", number] = 
                        +(toByte(Data[1]) << 24)
                        +(toByte(Data[2]) << 16)
                        +(toByte(Data[3]) << 8)
                        +(toByte(Data[4]))
                    Data = Data:sub(5)
                    
                    out("block length: " + P["blockLength", number] + "\n")
                    
                    P["data", string] = Data
                    P["blocksCount", number] = P["blocksCount", number] - 1
                    P["state", number] = 3
                }
                else {
                    out("Error: Wrong block header.\n")
                    soundPurge()
                    end()
                }
            }
            else {
                soundPurge()
                end()
            }
            break
        
        case 3,
            local Data = P["data", string]
            #for (I = 1, Overload) {
            if (systime() > P["nextStep", number]) {
                if (P["state", number] == 3) {
                    local I = 1
                    local Time = 0
                    
                    local Input = toByte(Data[I])
                    while (Input >> 7) {
                        Time = (Time << 7) + (Input && 0x7F)
                        
                        I++
                        Input = toByte(Data[I])
                    }
                    Time = (Time << 7) + (Input && 0x7F)
                    
                    if (Time < 500) {
                        P["nextStep", number] = systime() + Time * P["interval", number]
                    }
                    
                    Data = Data:sub(1 + I)
                    
                    local Command = toByte(Data[1])
                    Data = Data:sub(2)
                    
                    local Event = Command >> 4
                    local Channel = Command && 0xF
                    
                    switch (Event) {
                        # 1-level event 
                        ## Up note
                        case 0x8,
                            local Note = toByte(Data[1])
                            local Dynamic = toByte(Data[2])
                            soundPlay(Channel + (Note << 4), 100, "synth/square_1760.wav")
                            soundPitch(Channel + (Note << 4), Note * 1.5)
                            
                            Data = Data:sub(3)
                            break
                        
                        ## Down note
                        case 0x9,
                            local Note = toByte(Data[1])
                            local Dynamic = toByte(Data[2])
                            
                            soundStop(Channel + (Note << 4))
                            
                            Data = Data:sub(3)
                            break
                        
                        # Change
                        case 0xA,
                            local Note = toByte(Data[1])
                            local Dynamic = toByte(Data[2])
                            Data = Data:sub(3)
                            # Ignore
                            break
                        
                        # 2-level event
                        case 0xB,
                            Data = Data:sub(3)
                            # Ignore
                            break
                        
                        # Meta
                        case 0xF,
                            if (Channel == 0xF) {
                                local Mode = toByte(Data[1])
                                
                                if (inrange(Mode, 0x00, 0x07)) {
                                    Data = Data:sub(3 + toByte(Data[2]))
                                }
                                else {
                                    switch (Mode) {
                                        case 0x20, case 0x21,
                                            Data = Data:sub(4)
                                            break
                                        
                                        case 0x51, case 0x59,
                                            Data = Data:sub(5)
                                            break
                                        
                                        case 0x54,
                                            Data = Data:sub(8)
                                            break
                                        
                                        case 0x58,
                                            Data = Data:sub(7)
                                            break
                                        
                                        case 0x2F,
                                            Data = Data:sub(3)
                                            out("End of block.\n")
                                            
                                            soundPurge()
                                            P["state", number] = 2
                                            break
                                        
                                        default,
                                            out("Unknown command " + Command:toString(16) + "\n")
                                    }
                                }
                            }
                            break
                        
                        default,
                            out("Unknown command " + Command:toString(16) + "\n")
                    }
                    
                    P["blockLength", number] = P["blockLength", number] - 1
                }
                else {
                    break
                }
            }
            P["data", string] = Data
            break
    }
}
