#
# Created by scaled
#

@name pmid

P2F["pmid", string] = "pmid"

function soundFreq(Id, Duration, Frequensy) {
    soundPlay(Id, Duration, "synth/square_1760.wav")
    soundPitch(Id, Frequensy / 1760 * 128)
}

function pmid() {
    switch (P["state", number]) {
        case 0,
            if (args() < 1) {
                out("Usage: pmid [filename]\n")
                end()
            }
            else {
                local Program = exec("cat")
                Program["args", array] = array(arg(1))
                Program["out", array] = P["in", array] = array()
                
                P["state", number] = 1
            }
            break
        
        case 1,
            if (wait()) {
                local Data = in()
                
                if (Data:left(4) == "MThd") {
                    Data = Data:sub(9)
                    
                    # ind header
                    ## midi format
                    #Data[1] Data[2]
                    
                    ## blocks count
                    P["blocksCount", number] = (toByte(Data[3]) << 8) + toByte(Data[4])
                    out("blocks count: " + P["blocksCount", number] + "\n")
                    
                    ## The Pulses Per Quarter Note
                    P["interval", number] = 0.5 / ((toByte(Data[5]) << 8) + toByte(Data[6]))
                    
                    Data = Data:sub(7)
                    
                    P["data", string] = Data
                    P["state", number] = 2
                }
                else {
                    out("Error: File is not midi.\n")
                    end()
                }
            }
            break
        
        case 2,
            if (P["blocksCount", number] > 0) {
                local Data = P["data", string]
                
                # block
                if (Data:left(4) == "MTrk") {
                    Data = Data:sub(5)
                    
                    P["blockLength", number] = 
                        +(toByte(Data[1]) << 24)
                        +(toByte(Data[2]) << 16)
                        +(toByte(Data[3]) << 8)
                        +(toByte(Data[4]))
                    Data = Data:sub(5)
                    
                    out("block length: " + P["blockLength", number] + "\n")
                    
                    P["data", string] = Data
                    P["blocksCount", number] = P["blocksCount", number] - 1
                    P["state", number] = 3
                }
                else {
                    out("Error: Wrong block header.\n")
                    soundPurge()
                    end()
                }
            }
            else {
                soundPurge()
                end()
            }
            break
        
        case 3,
            local Data = P["data", string]
            for (J = 1, Overload) {
                if (P["state", number] != 3) {
                    break
                }
                
                switch (P["substate", number]) {
                    case 0,
                        local Time = 0
                        
                        for (I = 1, 4) {
                            local Input = toByte(Data[I])
                            
                            Time = (Time << 7) + (Input && 0x7F)
                            
                            if ((Input >> 7) == 0) {
                                Data = Data:sub(1 + I)
                                break
                            }
                        }
                        
                        if (Time < 500) {
                            P["nextStep", number] = systime() + Time * P["interval", number]
                        }
                        
                        P["substate", number] = 1
                            
                    case 1,
                        if (systime() > P["nextStep", number]) {
                            local Command = toByte(Data[1])
                            Data = Data:sub(2)
                            
                            local Event = Command >> 4
                            local Channel = Command && 0xF
                            
                            switch (Event) {
                                # 1-level event 
                                ## Up note
                                case 0x8,
                                    local Note = toByte(Data[1])
                                    local Dynamic = toByte(Data[2])
                                    #soundFreq((Channel << 8) + (Note << 16), 100, ((Note - 30) * 0.3) ^ 2 * 1.2)
                                    soundFreq((Channel << 8) + (Note << 16), 100, 8.175 * 2 ^ (Note / 12))
                                    #out(((Channel << 8) + (Note << 16)) + "\n")
                                    
                                    Data = Data:sub(3)
                                    break
                                
                                ## Down note
                                case 0x9,
                                    local Note = toByte(Data[1])
                                    local Dynamic = toByte(Data[2])
                                    
                                    soundStop((Channel << 8) + (Note << 16))
                                    
                                    Data = Data:sub(3)
                                    break
                                
                                # Change
                                case 0xA,
                                    local Note = toByte(Data[1])
                                    local Dynamic = toByte(Data[2])
                                    Data = Data:sub(3)
                                    # Ignore
                                    break
                                
                                # 2-level event
                                case 0xB,
                                    Data = Data:sub(3)
                                    # Ignore
                                    break
                                
                                # Change program
                                case 0xC,
                                    Data = Data:sub(2)
                                    # Ignore
                                    break
                                
                                # Change canal force
                                case 0xD,
                                    local Force = toByte(Data[1])
                                    print(Force)
                                    #soundVolume((Channel << 8) + (Note << 16), Force)
                                    
                                    Data = Data:sub(2)
                                    # Ignore
                                    break
                                
                                # Rotating of some wheel
                                case 0xE,
                                    Data = Data:sub(3)
                                    # Ignore
                                    break
                                
                                # Meta
                                case 0xF,
                                    if (Channel == 0xF) {
                                        local Mode = toByte(Data[1])
                                        
                                        if (inrange(Mode, 0x00, 0x07)) {
                                            Data = Data:sub(3 + toByte(Data[2]))
                                        }
                                        else {
                                            switch (Mode) {
                                                case 0x20, case 0x21,
                                                    Data = Data:sub(4)
                                                    break
                                                
                                                case 0x51, case 0x59,
                                                    Data = Data:sub(5)
                                                    break
                                                
                                                case 0x54,
                                                    Data = Data:sub(8)
                                                    break
                                                
                                                case 0x58,
                                                    Data = Data:sub(7)
                                                    break
                                                
                                                case 0x2F,
                                                    Data = Data:sub(3)
                                                    out("End of block.\n")
                                                    
                                                    soundPurge()
                                                    P["state", number] = 2
                                                    break
                                                
                                                default,
                                                    out("Unknown command " + Command:toString(16) + "\n")
                                            }
                                        }
                                    }
                                    break
                                
                                default,
                                    out("Unknown command " + Command:toString(16) + "\n")
                            }
                            
                            P["substate", number] = 0
                        }
                        break
                }
            }
            P["data", string] = Data
            break
    }
}
