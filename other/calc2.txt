#
# Created by scaled
#

@name calc2

PExist["calc2", number] = 1

function calc2() { 
    switch (P["state", number]) {
        case 0,
            out("Calculator shell.\n")
            
            P["input", array] = array()
            
            P["expression", table] = table()
            P["stack", table] = table()
            
            P["priorityStack", array] = array()
            
            P["priorityTable", table] = table(
                "+" = 0,
                "-" = 0,
                "*" = 1,
                "/" = 1,
                "^" = 2
            )
            
            P["state", number] = 1
            break
        
        case 1,
            if (wait()) {
                local In = in()
                
                switch (In) {
                    case "q", case "quit", case "exit",
                        end()
                        break
                    
                    case "h", case "help",
                        out("Just write here your formula.\nExample: \"2+2*2\"\n")
                        break
                    
                    default,
                        P["input", array] = In:replaceRE("[%+%-%*/^()]", " %1 "):trim():explodeRE(" +")
                        
                        P["this", table] = P["expression", table]
                        
                        P["state", number] = 2
                }
            }
            break
        
        case 2,
            local This = P["this", table]
            local Input = P["input", array]
            
            for (I = 1, Overload) {
                if (P["state", number] != 2) {
                    break
                }
                elseif (Input:count() > 0) {
                    local In1 = Input:shiftString()
                    
                    switch (In1) {
                        case "+", case "-", case "*", case "/", case "^", 
                            if (This:exists("table" + This["count", number])) {
                                while (P["priority", number] < P["priorityTable", table][In1, number]) {
                                    P["priority", number] = P["priority", number] + 1
                                    
                                    local Child = This["table" + This["count", number], table]
                                    
                                    P["stack", table]:pushTable(This)
                                    This = This["table" + This["count", number], table] = table()
                                    
                                    This["table1", table] = Child
                                    This["count", number] = 1
                                }
                                
                                This["action", string] = In1
                                
                                while (P["priority", number] > P["priorityTable", table][In1, number]) {
                                    P["priority", number] = P["priority", number] - 1
                                    
                                    This = P["stack", table]:popTable()
                                }
                                
                                if (In1 == "/" | In1 == "-") {
                                    This["reverse" + (This["count", number] + 1), number] = 1
                                }
                            }
                            else {
                                out("Error: +-*/^ in wrong place.\n")
                                P["state", number] = 4
                            }
                            break
                        
                        case "(",
                            P["priorityStack", array]:pushNumber(P["priority", number])
                            P["priority", number] = 0
                            
                            This["count", number] = This["count", number] + 1
                            
                            P["stack", table]:pushTable(This)
                            This = This["table" + This["count", number], table] = table()
                            break
                        
                        case ")",
                            if (P["stack", table]) {
                                while (P["priority", number] > 0) {
                                    P["priority", number] = P["priority", number] - 1
                                    This = P["stack", table]:popTable()
                                }
                                
                                P["priority", number] = P["priorityStack", array]:popNumber()
                                
                                This = P["stack", table]:popTable()
                            }
                            else {
                                out("Error: \")\" in wrong place.\n")
                                P["state", number] = 4
                            }
                            break
                        
                        default,
                            local In2 = Input:shiftString()
                            
                            switch (In2) {
                                case "+", case "-", case "*", case "/", case "^",
                                    while (P["priority", number] < P["priorityTable", table][In2, number]) {
                                        P["priority", number] = P["priority", number] + 1
                                        
                                        This["count", number] = This["count", number] + 1
                                        P["stack", table]:pushTable(This)
                                        This = This["table" + This["count", number], table] = table()
                                    }
                                    
                                    This["count", number] = This["count", number] + 1
                                    This["number" + This["count", number], number] = In1:toNumber()
                                    
                                    This["action", string] = In2
                                    
                                    while (P["priority", number] > P["priorityTable", table][In2, number]) {
                                        P["priority", number] = P["priority", number] - 1
                                        
                                        This = P["stack", table]:popTable()
                                    }
                                    
                                    if (In2 == "/" | In2 == "-") {
                                        This["reverse" + (This["count", number] + 1), number] = 1
                                    }
                                    break
                                
                                case ")",
                                    This["count", number] = This["count", number] + 1
                                    This["number" + This["count", number], number] = In1:toNumber()
                                    
                                    Input:unshiftString(In2)
                                    break
                                    
                                case "(",
                                    out("Error: expressions like " + In1 + In2 + " not supported.\n")
                                    
                                    P["state", number] = 4
                                    break
                                
                                case "",
                                    This["count", number] = This["count", number] + 1
                                    This["number" + This["count", number], number] = In1:toNumber()
                                    break
                                
                                default,
                                    out("Internal error: number after number.\n")
                                    P["state", number] = 4
                            }
                    }
                }
                else {
                    out(P["expression", table]:toString())
                    
                    This = P["expression", table]
                    while (This["count", number] == 1 & This:exists("table1")) {
                        This = This["table1", table]
                    }
                    
                    P["stack", table]:clear()
                    P["state", number] = 3
                    break
                }
            }
            
            P["this", table] = This
            break
        
        case 3,
            local This = P["this", table]
            local Stack = P["stack", table]
            
            for (I = 1, Overload) {
                local Count = This["count", number]
                
                if (Count == 1 & This:exists("table1")) {
                    #out("1\n")
                    local Table = This["table1", table]
                    This = Stack:popTable()
                    
                    This["table" + This["pos", number], table] = Table
                }
                elseif (Count > 1) {
                    if (This:exists("table" + Count)) {
                        #out("2\n")
                        This["pos", number] = Count
                        
                        Stack:pushTable(This)
                        This = This["table" + This["pos", number], table]
                    }
                    elseif (This:exists("table" + (Count - 1))) {
                        #out("3\n")
                        This["pos", number] = Count - 1
                        
                        Stack:pushTable(This)
                        This = This["table" + This["pos", number], table]
                    }
                    else {
                        #out("4\n")
                        
                        local Action = This["action", string]
                        switch (Action) {
                            case "+", case "-",
                                for (I = 0, 1) {
                                    if (This["reverse" + (Count - I), number]) {
                                        This["number" + (Count - I), number] = -This["number" + (Count - I), number]
                                    }
                                }
                                This["number" + (Count - 1), number] = This["number" + (Count - 1), number] + This["number" + Count, number]
                                break
                            
                            case "*", case "/",
                                for (I = 0, 1) {
                                    if (This["reverse" + (Count - I), number]) {
                                        This["number" + (Count - I), number] = 1 / This["number" + (Count - I), number]
                                    }
                                }
                                This["number" + (Count - 1), number] = This["number" + (Count - 1), number] * This["number" + Count, number]
                                break
                            
                            case "^",
                                This["number" + (Count - 1), number] = This["number" + (Count - 1), number] ^ This["number" + Count, number]
                                break
                            
                            default,
                                out("Internal error: Unknown action.\n")
                        }
                        This["count", number] = Count - 1
                    }
                }
                elseif (Stack) {
                    #out("5\n")
                    local Value = This["number1", number]
                    This:clear()
                    This = Stack:popTable()
                    
                    This:remove("table" + This["pos", number])
                    This["number" + This["pos", number], number] = Value
                }
                else {
                    out(This["number1", number] + "\n")
                    P["state", number] = 4
                    break
                }
            }
            
            P["this", table] = This
            break
        
        case 4,
            P["stack", table]:clear()
            P["expression", table]:clear()
            P["priorityStack", array]:clear()
            P["priority", number] = 0
            P["state", number] = 1
            break
    }
}
