#
# Created by scaled
#

@name calc2

KList["calc2", number] = 1

function calc2() { 
    switch (P["state", number]) {
        case 0,
            out("Calculator shell.\n")
            
            P["input", array] = array()
            
            P["vars", array] = array()
            P["order", array] = array()
            
            P["expression", table] = table()
            P["stack", table] = table()
            
            P["priority", table] = table(
                "+" = 0,
                "-" = 0,
                "*" = 1,
                "/" = 1,
                "^" = 2
            )
            
            P["lastPriorities", array] = array()
            
            P["state", number] = 1
            break
        
        case 1,
            if (wait()) {
                local In = in()
                
                switch (In) {
                    case "q", case "quit", case "exit",
                        end()
                        break
                    
                    case "h", case "help",
                        out("Just write here your formula.\nExample: \"2+2*2\"\n")
                        break
                    
                    default,
                        P["input", array] = In:replaceRE("[%+%-%*/^()]", " %1 "):trim():explodeRE(" +")
                        
                        P["this", table] = P["expression", table]
                        
                        P["state", number] = 2
                }
            }
            break
        
        case 2,
            local This = P["this", table]
            local Input = P["input", array]
            
            for (I = 1, Overload) {
                if (Input:count() > 0) {
                    local In1 = Input:shiftString()
                    print(In1)
                    
                    if (
                        In1 == "+"
                        | In1 == "-"
                        | In1 == "*"
                        | In1 == "/"
                        | In1 == "^"
                    ) {
                        out("Error: +-*/^ in wrong place.\n")
                        printTable(Input)
                        P["state", number] = 1
                        return
                    }
                    elseif (In1 == "(") {
                        P["stack", table]:pushTable(This)
                        This = This["table" + This["count", number], table] = table()
                    }
                    elseif (In1 == ")") {
                        This = P["stack", table]:popTable()
                    }
                    else {
                        local In2 = Input:shiftString()
                        print(In2)
                        
                        if (
                            In1 == "+"
                            | In1 == "-"
                            | In1 == "*"
                            | In1 == "/"
                            | In1 == "^"
                        ) {
                            local Priority = 0
                            while (Priority < P["priority", table][In1, number]) {
                                Priority++
                                
                                P["stack", table]:pushTable(This)
                                This = This["table" + This["count", number], table] = table()
                            }
                            
                            This["count", number] = This["count", number] + 1
                            This["number" + This["count", number], number] = In2:toNumber()
                        }
                        elseif (In2 == "") {
                            out("Ok.\n")
                            printTable(P["expression", table])
                            
                            P["state", number] = 1
                        }
                        else {
                            out("Internal error.\n")
                            P["state", number] = 1
                            return
                        }
                    }
                }
                else {
                    out("Expression ended.\n")
                    printTable(P["expression", table])
                    
                    P["state", number] = 1
                }
            }
            
            P["this", table] = This
            break
        
        #[case 3,
            local Expression = P["expression", array]
            local Stack = P["stack", array]
            
            for (I = 1, Overload) {
                if (Expression:count() > 1) {
                }
                else {
                    P["state", number] = 1
                    return
                }
            }
            break]#
    }
}
