#
# Created by scaled
#

@name libx

function table xcreate(Type:string) {
    if (P["xobjects", table]:count() > 0) {
        local Device = P["xdevice", wirelink]
        
        local Object = P["xobjects", table]:removeTable(1)
        local Id = Object["id", number]
        
        Object["type", string] = Type
        switch (Type) {
            case "box", case "frame", Device:egpBox(Id, vec2(), vec2()) break
            case "circle", Device:egpCircle(Id, vec2(), vec2()) break
            case "line", Device:egpLine(Id, vec2(), vec2()) break
            case "text",
                Device:egpText(Id, "", vec2())
                Object["sizeNum", number] = 20
                Device:egpSize(Id, 20 * P["xparam", table]["textMultiplier", number])
                break
            case "textLayout",
                Device:egpTextLayout(Id, "", vec2(), vec2())
                Object["sizeNum", number] = 20
                Device:egpSize(Id, 20 * P["xparam", table]["textMultiplier", number])
                
                Object["monospaced", number] = 1
                Device:egpFont(Id, "Courier New")
                break
            case "poly",
                Device:egpPoly(Id, vec2(), vec2(), vec2())
                Object["verticles", array] = array(vec2(), vec2(), vec2())
                break
            case "polyOutline",
                Device:egpPolyOutline(Id, vec2(), vec2(), vec2())
                Object["verticles", array] = array(vec2(), vec2(), vec2())
                Object["sizeNum", number] = 1
                break
            case "lineStrip",
                Device:egpLineStrip(Id, vec2(), vec2(), vec2())
                Object["verticles", array] = array(vec2(), vec2(), vec2())
                Object["sizeNum", number] = 1
                break
            default, return NULL
        }
        
        Device:egpParent(Id, Object["parent", table]["id", number])
        
        return Object
    }
    else {
        return NULL
    }
}

function table:xredraw() {
    local Device = P["xdevice", wirelink]
    
    local Id = This["id", number]
    local Type = This["type", string]
    switch (Type) {
        case "box",
            Device:egpBox(Id, This["pos", vector2], This["size", vector2])
            break
        
        case "frame",
            Device:egpBox(Id, This["pos", vector2], vec2())
            break
        
        case "circle",
            Device:egpCircle(Id, This["pos", vector2], This["size", vector2])
            break
        
        case "line", 
            Device:egpLine(Id, This["pos", vector2], This["size", vector2])
            Device:egpSize(Id, This["sizeNum", number])
            break
        
        case "text",
            Device:egpText(Id, This["text", string], This["pos", vector2])
            Device:egpFont(Id, This["monospaced", number] ? "Courier New" : "")
            Device:egpAlign(Id, This["align", vector2][1], This["align", vector2][2])
            Device:egpSize(Id, This["sizeNum", number] * P["xparam", table]["textMultiplier", number])
            break
        
        case "textLayout",
            Device:egpTextLayout(Id, This["text", string], This["pos", vector2], This["size", vector2])
            Device:egpFont(Id, This["monospaced", number] ? "Courier New" : "")
            Device:egpAlign(Id, This["align", vector2][1], This["align", vector2][2])
            Device:egpSize(Id, This["sizeNum", number] * P["xparam", table]["textMultiplier", number])
            break
        
        case "poly",
            Device:egpPoly(Id, This["verticles", array])
            break
        
        case "polyOutline",
            Device:egpPolyOutline(Id, This["verticles", array])
            Device:egpSize(Id, This["sizeNum", number])
            break
        
        case "lineStrip",
            Device:egpLineStrip(Id, This["verticles", array])
            Device:egpSize(Id, This["sizeNum", number])
            break
        
        default,
            Device:egpLine(Id, vec2(), vec2())
            break
    }
    
    Device:egpColor(Id, This["color", vector])
    Device:egpAlpha(Id, This["alpha", number])
    Device:egpParent(Id, This["parent", table]["id", number])
}

function table table:xpos(Pos:vector2) {
    This["pos", vector2] = Pos
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpPos(This["id", number], Pos)
    }
    return This
}

function table table:xsize(Size:vector2) {
    This["size", vector2] = Size
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpSize(This["id", number], Size)
    }
    return This
}

function table table:xsize(Size) {
    This["sizeNum", number] = Size
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpSize(This["id", number], Size * P["xparam", table]["textMultiplier", number])
    }
    return This
}

function table table:xtext(Text:string) {
    This["text", string] = Text
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpSetText(This["id", number], Text)
    }
    return This
}

function table table:xcolor(Color:vector) {
    This["color", vector] = Color
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpColor(This["id", number], Color)
    }
    return This
}

function table table:xalign(Align:vector2) {
    This["align", vector2] = Align
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpAlign(This["id", number], Align[1], Align[2])
    }
    return This
}

function table table:xmonospaced(Monospaced) {
    This["monospaced", number] = Monospaced
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpFont(This["id", number], Monospaced ? "Courier New" : "")
    }
    return This
}

function table table:xparent(Parent:table) {
    This["parent", table] = Parent
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpParent(This["id", number], Parent["id", number])
    }
    if (Parent["type", string] == "frame") {
        Parent["count", number] = Parent["count", number] + 1
    }
    return This
}

function table table:xvertices(Verticles:array) {
    This["verticles", array] = Verticles
    if (This["id", number] > 0) {
        switch (This["type", string]) {
            case "poly", P["xdevice", wirelink]:egpPoly(This["id", number], Verticles) break
            case "polyOutline", P["xdevice", wirelink]:egpPolyOutline(This["id", number], Verticles) break
            case "lineStrip", P["xdevice", wirelink]:egpLineStrip(This["id", number], Verticles) break
            default,
        }
    }
    return This
}

function table table:xalpha(Alpha) {
    This["alpha", number] = Alpha
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpAlpha(This["id", number], Alpha)
    }
    return This
}

function table table:xline(Pos1:vector2, Pos2:vector2) {
    This["pos", vector2] = Pos1
    This["size", vector2] = Pos2
    if (This["id", number] > 0) {
        P["xdevice", wirelink]:egpLine(This["id", number], Pos1, Pos2)
    }
    return This
}


function vector2 xcursor() {
    local Frame = P["xframe", table]
    local Device = P["xdevice", wirelink]
    
    if (!Frame:exists("parent")) {
        if (systime() > Frame["cursorTimer", number]) {
            #ifdef findByClass(string)
            
            findByClass("player")
            findSortByDistance(Device:entity():pos() - vec(0, 0, 64))
            Frame["user", entity] = find()
            
            #else
            
            local ScreenPos = Device:entity():pos()
            
            local User = owner()
            local Distance = ScreenPos:distance(User:pos())
            
            foreach (I, Player:entity = players()) {
                local TempDistance = ScreenPos:distance(Player:pos() + vec(0, 0, 64))
                if (TempDistance < Distance) {
                    Distance = TempDistance
                    User = Player
                }
            }
            
            Frame["user", entity] = User
            
            #endif
            
            Frame["cursorTimer", number] = systime() + 1
        }
        
        #Frame["cursor", vector2] = round(Device:egpCursor(Frame["user", entity]))
        Frame["cursor", vector2] = Device:egpCursor(Frame["user", entity])
        Frame["keyUse", number] = Frame["cursor", vector2] != vec2(-1) & Frame["user", entity]:keyUse()
    }
    else {
        local Cursor = Frame["parent", table]["cursor", vector2]
        if (Cursor != vec2(-1)) {
            Frame["cursor", vector2] = Cursor - Frame["pos", vector2]
        }
        else {
            Frame["cursor", vector2] = Cursor
        }
        
        if (Frame["parent", table]["keyUse", number] >= 0) {
            Frame["keyUse", number] = Frame["parent", table]["keyUse", number] & inrange(Frame["cursor", vector2], vec2(), Frame["size", vector2])
        }
    }
    return Frame["cursor", vector2]
}

function number xkeyUse() {
    return P["xframe", table]["keyUse", number]
}


function number xxlastObjectId() {
    return P["xobjectsAll", table]:count()
}

function number table:xxlastObjectId() {
    if (This:exists("parent")) {
        return This["id", number] + This["count", number]
    }
    else {
        return P["xobjectsAll", table]:count()
    }
}

function number xxobjectsLeft() {
    return egpMaxObjects() - xxlastObjectId()
}

function table table:xexec(ProgramName:string) {
    local Program = exec(ProgramName)
    
    Program["xframe", table] = This
    
    Program["xparam", table] = P["xparam", table]
    Program["xobjects", table] = table()
    Program["xobjectsAll", table] = P["xobjectsAll", table]
    Program["xdevice", wirelink] = P["xdevice", wirelink]
    
    return Program
}

function table xexec(ProgramName:string, Pos:vector2, Size:vector2) {
    if (P["xobjects", table]:count() >= 1) {
        local Frame = xcreate("frame")
        Frame["size", vector2] = Size
        Frame:xpos(Pos)
        
        return Frame:xexec(ProgramName)
    }
    else {
        return NULL
    }
}

function table:xcountOffset(Offset) {
    while (This:exists("parent")) {
        if (This["type", string] == "frame") {
            This["count", number] = This["count", number] + Offset
        }
        This = This["parent", table]
    }
}

function table xnewObject(Id) {
    P["xframe", table]:xcountOffset(1)
    P["xdevice", wirelink]:egpLine(Id, vec2(), vec2())
    return table("id" = Id, "parent" = P["xframe", table], "color" = vec(255), "alpha" = 255)
}

function xprintAll() {
    local Text = "xprintAll start\n"
    for (I = 1, P["xobjectsAll", table]:count()) {
        Text += I + "\t" + P["xobjectsAll", table][I, table]["type", string] + "\n"
    }
    print(Text + "xprintAll end\n")
}

function number xcanDraw() {
    return !P["xparam", table]["blocked", number]
}

function table xxdaemon(Name:string) {
    local Program = exec(Name)
    
    Program["xparam", table] = P["xparam", table]
    Program["xdevice", wirelink] = P["xdevice", wirelink]
    Program["xobjectsAll", table] = P["xobjectsAll", table]
    
    return Program
}

function number xcanCreate(Count) {
    if (P["xparam", table]["blocked", number]) {
        return 0
    }
    if (P["xobjects", table]:count() >= Count) {
        return 1
    }
    if (P["xframe", table]["id", number] == 0) {
        return 0
    }
    if (!P["xcreate", table]) {
        if (!P["xframe", table]:exists("parent")) {
            if (xxobjectsLeft() > Count) {
                P["xparam", table]["blocked", number] = 1
                
                local Program = xxdaemon("xcreate")
                Program["xobjects", table] = P["xobjects", table]
                Program["xframe", table] = P["xframe", table]
                
                P["xcreate", table] = Program
                
                Program["count", number] = Count
                
                Program:execNow()
            }
            else {
                return 0
            }
        }
        else {
            if (P["xframe", table]:xxlastObjectId() >= xxlastObjectId()) {
                local Program = xxdaemon("xcreate")
                Program["xobjects", table] = P["xobjects", table]
                Program["xframe", table] = P["xframe", table]
                
                P["xcreate", table] = Program
                
                Program["count", number] = Count
                
                Program:execNow()
            }
            else {
                local Program = xxdaemon("xcreate")
                Program["xobjects", table] = P["xobjects", table]
                Program["xframe", table] = P["xframe", table]
                
                P["xcreate", table] = Program
                
                Program["state", number] = 1
                Program["count", number] = Count
                
                Program["xshiftStart", number] = P["xframe", table]:xxlastObjectId()
                Program["xobjectsTemp", table] = table()
                
                Program["counter", number] = Program["xshiftStart", number]
                
                Program:execNow()
            }
        }
    }
    
    return 0
}

function table:xclear() {
    if (This["id", number] != 0) {
        local Id = This["id", number]
        
        This["parent", table]:xcountOffset(-1)
        
        #This:clear()
        This["removed", number] = 1
        This["id", number] = 0
        
        P["xdevice", wirelink]:egpLine(Id, vec2(), vec2())
    }
}

function xxremoveByDaemon(IdStart, IdEnd) {
    local Program = xxdaemon("xremove")
    P["xremove", table] = Program
    Program:remove("parent")
    
    Program["idStart", number] = IdStart
    Program["idEnd", number] = IdEnd
    
    Program:execNow()
}

function table:xremove() {
    if (!This:exists("removed")) {
        if (P["xremove", table]) {
            This:xclear()
        }
        else {
            xxremoveByDaemon(This["id", number], This["id", number] + This["count", number])
        }
    }
}

function xend() {
    P["xframe", table]:xremove()
    end()
}

function xxup(StartId, ObjectLastId, ParentLastId) {
    local Program = xxdaemon("xup")
    
    Program["idStart", number] = StartId
    Program["idObjectLast", number] = ObjectLastId
    Program["idParentLast", number] = ParentLastId
    
    Program:execNow()
}

function table:xup() {
    if (This:xxlastObjectId() < P["xframe", table]:xxlastObjectId()) {
        xxup(This["id", number], This["id", number] + This["count", number], P["xframe", table]:xxlastObjectId())
    }
}



# For lib simple
function vector2 xres() {
    return P["xframe", table]["size", vector2]
}

function number table:xinrange() {
    return inrange(P["xframe", table]["cursor", vector2] - This["pos", vector2], vec2(), This["size", vector2])
}
