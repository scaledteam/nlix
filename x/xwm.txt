#
# Created by scaled
#

@name xwm

xregister("wm's", "xwm")

P2F["xwm", string] = "xwm"

function xwm() {
    switch (P["state", number]) {
        case 0,
            if (P["parent", table]["name", string] == "sh") {
                P:removeTable("parent"):clear()
            }
            
            if (!P:exists("xframe")) {
                if (P:exists("args")) {
                    P["args", array]:unshiftString(P["name", string])
                }
                else {
                    P["args", array] = array(P["name", string])
                }
                P["name", string] = "xstart"
            }
            elseif (xcanCreate(3)) {
                local Res = P["xframe", table]["size", vector2]
                local Background = xcreate("box"):xsize(Res):xcolor(P["xframe", table]:exists("parent") ? hsv2rgb(randint(360), 1, 0.7) : hsv2rgb(205, 1, 0.7))
                
                local Multiplier = min(Res[1], Res[2]) / 2 * 0.3
                
                local Poses = array(
                    Multiplier * vec2(-1, 1),
                    Multiplier * vec2(-1),
                    Multiplier * vec2(-1, -0.9),
                    Multiplier * vec2(1, 0.25),
                    Multiplier * vec2(1),
                    Multiplier * vec2(1, -1)
                )
                
                xcreate("lineStrip"):xparent(Background):xvertices(Poses):xsize(Multiplier * 0.3):xcolor(vec())
                xcreate("lineStrip"):xparent(Background):xvertices(Poses):xsize(Multiplier * 0.2):xcolor(vec(191))
                
                P["in", array] = array("interface xpanel")
                
                P["programs", table] = table()
                P["frames", table] = table()
                
                local Kbd = exec("kbd")
                programUp()
                
                P["kbd", array] = Kbd["out", array] = array()
                
                local Count = 2.1
                P["windowSize", vector2] = floor((Res - vec2(0, 20 + 20 * Count)) / Count)
                
                P["state", number] = 1
            }
            break
            
        case 1,
            if (!P["xparam", table]["blocked", number]) {
                if (P["programs", table]:count() > 0) {
                    # Send cursor to programs
                    local Cursor = xcursor()
                    local Use = xkeyUse()
                    P["xframe", table]["keyUse", number] = -1
                    P["xframe", table]["interfaceUse", number] = Use
                    
                    # Program
                    local Program = P["programs", table][1, table]
                    
                    # Check if program is dead
                    if (!Program) {
                        P["programs", table]:remove(1)
                        P["frames", table]:removeTable(1):xremove()
                    }
                    else {
                        local Frame = P["frames", table][1, table]
                        
                        # Send key use
                        Frame["keyUse", number] = Use
                        
                        # Keyboard
                        local KbdReal = P["kbd", array]
                        local KbdInsideProgram = Program["kbd", array]
                        
                        KbdInsideProgram:clear()
                        for (I = 1, KbdReal:count()) {
                            KbdInsideProgram[I, number] = KbdReal[I, number]
                        }
                        
                        # Moving windows
                        if (
                            !Frame["interface", number]
                            &
                            Use
                            &
                            (
                                Frame:exists("moveMode")
                                |
                                inrange(Cursor - Frame["pos", vector2], vec2(0, -20), Frame["size", vector2]:setY(0))
                            )
                        ) {
                            if (!Frame:exists("moveMode") & (Cursor[1] > Frame["pos", vector2][1] + Frame["size", vector2][1] - 20)) {
                                Program:clear()
                            }
                            else {
                                local NewPos = round(clamp(Cursor - vec2(Frame["size", vector2][1] / 2, -10), vec2(0, 20), P["xframe", table]["size", vector2] - vec2(0, 20) - Program["xframe", table]["size", vector2]))
                                Frame:xpos(NewPos)
                                
                                Frame["moveMode", number] = 1
                                return
                            }
                        }
                        elseif (Frame:exists("moveMode")) {
                            Frame:remove("moveMode")
                        }
                        
                        # Action for change focus
                        if (!P["focusUse", number]) {
                            if (Use & !inrange(Cursor - Frame["pos", vector2], vec2(0, -20), Frame["size", vector2])) {
                                P["focusUse", number] = 1
                                P["focusCounter", number] = 2
                            }
                        }
                    }
                    
                    # Focus
                    if (P["focusUse", number]) {
                        local Counter = P["focusCounter", number]
                        
                        for (I = 1, Overload) {
                            if (Counter <= P["programs", table]:count()) {
                                local Frame = P["frames", table][Counter, table]
                                
                                if (inrange(Cursor - Frame["pos", vector2], vec2(0, -20), Frame["size", vector2])) {
                                    # Clear old data after focus changed
                                    P["programs", table][1, table]["kbd", array]:clear()
                                    P["frames", table][1, table]["keyUse", number] = 0
                                    
                                    # Up window
                                    if (!Frame["interface", number]) {
                                        Frame:xup()
                                        
                                        P["frames", table]:unshiftTable(P["frames", table]:removeTable(Counter))
                                        P["programs", table]:unshiftTable(P["programs", table]:removeTable(Counter))
                                    }
                                    
                                    P["focusUse", number] = 0
                                    break
                                }
                                else {
                                    Counter++
                                }
                            }
                            else {
                                P["focusUse", number] = 0
                                break
                            }
                        }
                        
                        P["focusCounter", number] = Counter
                    }
                    
                    
                    
                    # Infinity cycle
                    local Counter = P["counter", number] + 1
                    if (Counter > P["programs", table]:count()) {
                        Counter = 1
                    }
                    P["counter", number] = Counter
                    
                    Program = P["programs", table][Counter, table]
                    
                    # Check if program is dead
                    if (!Program) {
                        P["programs", table]:remove(Counter)
                        P["frames", table]:removeTable(Counter):xremove()
                    }
                }
                
                # Commands
                if (wait()) {
                    local CommandExp = in():trim():explodeRE(" +")
                    
                    switch (CommandExp[1, string]) {
                        case "exit",
                            P["xdevice", wirelink]:egpClear()
                            end()
                            break
                            
                        case "sh",
                            P["xdevice", wirelink]:egpClear()
                            end()
                            exec("sh")
                            break
                            
                        case "poweroff",
                            P["xdevice", wirelink]:egpClear()
                            poweroff()
                            break
                        
                        default,
                            P["CommandExp", array] = CommandExp
                            
                            P["state", number] = 2
                            return
                    }
                }
            }
            break
        
        case 2,
            if (xcanCreate(1)) {
                local CommandExp = P["CommandExp", array]
                
                local IsUsualWindow = 1
                if (CommandExp[1, string] == "interface") {
                    CommandExp:shift()
                    IsUsualWindow = 0
                }
                
                P["tempProgramName", string] = CommandExp:shiftString()
                
                local Frame = xcreate("frame")
                Frame["size", vector2] = xres()
                
                P["tempFrame", table] = Frame
                
                if (IsUsualWindow) {
                    P["state", number] = 3
                }
                else {
                    Frame["interface", number] = 1
                    P["state", number] = 4
                }
            }
            break
        
        case 3,
            if (xcanCreate(3)) {
                local Frame = P["tempFrame", table]
                
                local Res = xres()
                local Size = P["windowSize", vector2]
                
                Frame["size", vector2] = Size
                Frame:xpos(randvec2(vec2(0, 20), Res - vec2(0, 20) - Size))
                
                local WindowPos = vec2(0, -20)
                local WindowSize = vec2(Size[1], 20)
                
                xcreate("box"):xparent(Frame):xpos(WindowPos):xsize(vec2(Size[1], 20))
                
                xcreate("text"):xparent(Frame):xpos(WindowPos):xtext(P["tempProgramName", string]):xsize(20):xcolor(vec())
                
                local Offset = vec2(WindowSize[1] - 10, -10)
                xcreate("lineStrip"):xparent(Frame):xsize(2):xvertices(array(
                    vec2(-6) + Offset,
                    vec2(6) + Offset,
                    vec2() + Offset,
                    vec2(-6, 6) + Offset,
                    vec2(6, -6) + Offset
                )):xcolor(vec())
                
                P["state", number] = 4
            }
            break
        
        case 4,
            if (xcanDraw()) {
                local Frame = P["tempFrame", table]
                
                local Program = Frame:xexec(P["tempProgramName", string])
                P["programs", table]:unshiftTable(Program)
                P["frames", table]:unshiftTable(Program["xframe", table])
                
                Program["args", array] = P:removeArray("CommandExp")
                Program["out", array] = P["out", array]
                Program["kbd", array] = array()
                
                if (Frame["interface", number]) {
                    Program["out", array] = P["in", array]
                }
                
                P["focus", number] = P["programs", table]:count()
                
                P["state", number] = 1
            }
            break
    }
}

