#
# This E2 made by scaled
#

@name workspaces-manager

switch (stateGet()) {
    # Wait terminal driver
    case 0,
        if (terminalInit()) {
            terminalPrint("Workspaces manager. Write \"quit\" for exit.\n")
            stateNext()
        }
        break
    
    # Wait keyboard driver
    case 1,
        if (simpleKeyboardInit()) {
            stateNext()
        }
        break
    
    # Main state
    case 2,
        terminalPrint("> ")
        varWrite("outputCount", varNumber("outputCount") + 2)
        simpleKeyboardRequestInput()
        
        stateNext()
        break
    
    # Get input
    case 3,
        if (simpleKeyboardWaitInput()) {
            local Input = simpleKeyboardGetInput()
            varWrite("input", Input)
            varWrite("outputCount", varNumber("outputCount") + Input:length() + 1)
            local InputExplode = Input:explode(" ")
            local Command = InputExplode[1, string]
            switch (Command) {
                case "",
                    stateSet(2)
                    break
                
                case "ws-term",
                    if (devicePop("gmod_wire_textscreen") | devicePop("gmod_wire_consolescreen") | devicePop("gmod_wire_egp")) { }
                    if (devicePop("gmod_wire_keyboard") | devicePop("gmod_wire_textentry")) { }
                    
                    local ThisProgramDevices = ThisProgram["devices", table]
                    if (ThisProgramDevices:count() == 2) {
                        local Environment = table()
                        Environment["devices", table] = table()
                        
                        while (ThisProgramDevices:count() > 0) {
                            local Device = ThisProgramDevices:popTable()
                            Device:remove("program")
                            Environment["devices", table]:pushTable(Device)
                        }
                        
                        local Autostart = array(
                            "driver-terminal",
                            "driver-keyboard",
                            "simple-keyboard",
                            "sh"
                        )
                        foreach (I, ProgramName:string = Autostart) {
                            Environment:programStart(ProgramName)
                        }
                    }
                    else {
                        devicePushAll()
                    }
                    
                    stateSet(2)
                    break
                
                #[case "ws-egp",
                    local WorkspaceWithDevices = NULL
                    for (I = 1, Apps:count()) {
                        local App = Apps[I, table]
                        if (App["name", string] == "hotplugd") {
                            WorkspaceWithDevices = App["workspace", table]
                        }
                    }
                    local Workspace = createWorkspace(AUTOSTART_EGP)
                    Workspace:addDevice(WorkspaceWithDevices:findFreeDeviceByType("egp-screen"))
                    Workspace:addDevice(WorkspaceWithDevices:findFreeDeviceByType("cursor"))
                    Workspace:addDevice(WorkspaceWithDevices:findFreeDeviceByType("keyboard"))
                    Workspace:startWorkspace()
                    stateSet(2)
                    break]#
                
                case "dev-list",
                    local Devices = ThisEnvironment["devices", table]
                    local Message = ""
                    for (I = 1, Devices:count()) {
                        local Device = Devices[I, table]
                        Message += I + ", " + (Device:deviceIsBusy() ? "busy" : "free") + ", " + Device:type() + "\n"
                    }
                    terminalPrint(Message)
                    varWrite("outputCount", varNumber("outputCount") + Message:length())
                    stateSet(2)
                    break
                
                case "dev-del",
                    local Devices = ThisEnvironment["devices", table]
                    local Id = InputExplode[2, string]:toNumber()
                    Devices[Id, table]:clear()
                    Devices:remove(Id)
                    stateSet(2)
                    break
                
                case "quit",
                    programKill()
                    break
                
                case "exit",
                    programKill()
                    break
                
                case "clear",
                    terminalErase(varNumber("outputCount"))
                    varWrite("outputCount", 0)
                    stateSet(2)
                    break
                
                case "help",
                    local Message = "ws-term\n" +
                        "ws-egp\n" +
                        "dev-list\n" +
                        "dev-del\n" +
                        "quit\n" + 
                        "exit\n" +
                        "clear\n" + 
                        "help\n"
                    terminalPrint(Message)
                    varWrite("outputCount", varNumber("outputCount") + Message:length())
                    stateSet(2)
                    break
                
                default,
                    local Message = "Wrong command\n"
                    terminalPrint(Message)
                    varWrite("outputCount", varNumber("outputCount") + Message:length())
                    stateSet(2)
                    break
            }
        }
        break
}
