#
# This E2 made by scaled
#

@name egp-wm

switch (stateGet()) {
    case 0,
        if (egpInit()) {
            egpBox(1, vec2(), egpResolution())
            egpParentToBase(1)
            egpColor(1, vec(127 * egpResolution()[1] / 512))
            
            stateNext()
        }
        break
    
    case 1,
        if (cursorInit()) {
            stateNext()
        }
        break
    
    case 2,
        if (keyboardInit()) {
            stateNext()
        }
        break
    
    case 3,
        varWrite("egp-size-standart", vec2(300, 150))
        varWrite("egpids-standart", 20)
        
        varWrite("EGP_CURSOR_INVALID_POS", vec2(-1))
        varWrite("KEYS_NULL", array())
        
        varWrite("egp-last", 1)
        varWrite("egp-ids", array())
        varWrite("egp-poses", array())
        varWrite("egp-sizes", array())
        varWrite("egp-id-counts", array())
        varWrite("workspacesByName", table())
        varWrite("workspacesById", table())
        varWrite("workspacesNameToId", table())
        varWrite("workspacesDevices", table())
        
        local CallBackDevice = object("egp-wm-callback")
        local AppSize = clamp(vec2(300, 160), vec2(), egpResolution() * 0.9 - vec2(0, 25))
        CallBackDevice["queue", array] = array(
            "create", "wm-sh", randvec2(vec2(0, 25), egpResolution() - AppSize), AppSize, 5,
            "add-device", "wm-sh", "egp-screen",
            "add-device", "wm-sh", "cursor",
            "add-device", "wm-sh", "keyboard",
            "add-device", "wm-sh", "callback",
            "add-app", "wm-sh", "driver-terminal",
            "add-app", "wm-sh", "driver-keyboard",
            "add-app", "wm-sh", "simple-keyboard",
            "add-app", "wm-sh", "egp-wm-shell"
        )
        varWrite("callback-device", CallBackDevice)
        
        stateNext()
        break
    
    case 4,
        if (egpIsIdle()) {
            stateNext()
        }
        break
    
    case 5,
        if (varNumber("workspacesCount") > 0) {
            # Workspaces counter
            if (varNumber("workspacesCount") > 1) {
                varWrite("workspaceId", varNumber("workspaceId") % varNumber("workspacesCount") + 1)
            }
            else {
                varWrite("workspaceId", 1)
            }
            local WorkspaceId = varNumber("workspaceId")
            local Workspace = varTable("workspacesById")[WorkspaceId, table]
            
            # Virtual screen driver
            local ParentId = varArray("egp-ids")[WorkspaceId, number]
            for (I = 1, KERNEL_OVERLOAD) {
                local VirtualScreenDevice = varTable("workspacesDevices")[WorkspaceId, table][1, table]
                #local VirtualScreenDevice = Workspace:findDeviceByType("virtual-egp-screen")
                local EgpQueue = VirtualScreenDevice["output-queue", array]
                if (EgpQueue:count() > 0) {
                    VirtualScreenDevice["idle", number] = 0
                    
                    local Command = EgpQueue:shiftString()
                    local Id = EgpQueue:shiftNumber() + ParentId
                    
                    switch (Command) {
                        case "egpBox",
                            egpBox(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpBoxOutline",
                            egpBoxOutline(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpSetText",
                            egpSetText(Id, EgpQueue:shiftString())
                            break
                        
                        case "egpText",
                            egpText(Id, EgpQueue:shiftString(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpTextLayout",
                            egpTextLayout(Id, EgpQueue:shiftString(), EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpLine",
                            egpLine(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpLineStrip",
                            local Count = EgpQueue:shiftNumber()
                            
                            local Poses = array()
                            
                            for (I = 1, Count) {
                                Poses:pushVector2(EgpQueue:shiftVector2())
                            }
                            break
                            egpLineStrip(Id, Poses)
                            break
                        
                        case "egpColor",
                            egpColor(Id, EgpQueue:shiftVector())
                            break
                        
                        case "egpColor4",
                            egpColor4(Id, EgpQueue:shiftVector4())
                            break
                        
                        case "egpAlpha",
                            egpAlpha(Id, EgpQueue:shiftNumber())
                            break
                        
                        case "egpSize",
                            egpSize(Id, EgpQueue:shiftVector2())
                            break
                        
                        case "egpSizeNumber",
                            egpSizeNumber(Id, EgpQueue:shiftNumber())
                            break
                        
                        case "egpParent",
                            egpParent(Id, EgpQueue:shiftNumber() + ParentId)
                            break
                        
                        case "egpParentToBase",
                            egpParent(Id, ParentId)
                            break
                        
                        case "egpParentPoint",
                            egpParentPoint(Id, EgpQueue:shiftVector2())
                            break
                        
                        case "egpAlign",
                            egpAlign(Id, EgpQueue:shiftNumber())
                            break
                        
                        case "egpAlign2",
                            egpAlign2(Id, EgpQueue:shiftNumber(), EgpQueue:shiftNumber())
                            break
                        
                        case "egpCircle",
                            egpCircle(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpCircleOutline",
                            egpCircleOutline(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpPos",
                            egpPos(Id, EgpQueue:shiftVector2())
                            break
                        
                        case "egpRemove",
                            egpRemove(Id)
                            break
                        
                        case "egpCopy",
                            egpCopy(Id, EgpQueue:shiftNumber() + ParentId)
                            break
                        
                        case "egpMove",
                            egpMove(Id, EgpQueue:shiftNumber() + ParentId)
                            break
                    }
                }
                else {
                    VirtualScreenDevice["idle", number] = 1
                    break
                }
            }
                
            # Virtual cursor device driver
            local VirtualCursorDevice = varTable("workspacesDevices")[WorkspaceId, table][2, table]
            #local VirtualCursorDevice = Workspace:findDeviceByType("virtual-cursor")
            local CursorPos = cursorGetPos()
            if (CursorPos == varVector2("EGP_CURSOR_INVALID_POS")) {
                VirtualCursorDevice["pos", vector2] = varVector2("EGP_CURSOR_INVALID_POS")
            }
            else {
                VirtualCursorDevice["pos", vector2] = CursorPos - varArray("egp-poses")[WorkspaceId, vector2]
            }
            
            if (WorkspaceId == varNumber("window-focus")) {
                VirtualCursorDevice["use", number] = cursorGetUse()
            }
            else {
                VirtualCursorDevice["use", number] = 0
            }
        }
        
        local UseKey = cursorGetUse()
        for (WorkspaceId = 1, varNumber("workspacesCount")) {
            # Window management
            #local UseKey = keyboardGetKeys()[2, number] == 101
            if (WorkspaceId == varNumber("window-focus")) {
                if (UseKey & inrange(cursorGetPos() - varArray("egp-poses")[WorkspaceId, vector2], vec2(0, -25), vec2(varArray("egp-sizes")[WorkspaceId, vector2][1], 0))) {
                    local NewPos = cursorGetPos() - vec2(varArray("egp-sizes")[WorkspaceId, vector2][1] / 2, -12)
                    #NewPos = clamp(NewPos, vec2(), egpResolution())
                    
                    local EgpPoses = varArray("egp-poses")
                    EgpPoses[WorkspaceId, vector2] = NewPos
                    egpPos(varArray("egp-ids")[WorkspaceId, number], NewPos)
                }
            }
            else {
                if ((UseKey != varNumber("UseKeyOld")) & UseKey & inrange(cursorGetPos() - varArray("egp-poses")[WorkspaceId, vector2], vec2(0, -25), varArray("egp-sizes")[WorkspaceId, vector2])) {
                    # Send data for redraw window
                    local EgpIds = varArray("egp-ids")[WorkspaceId, number]
                    varWrite("counterOffset", EgpIds)
                    varWrite("counterStart", -2)
                    varWrite("counterLimit", varArray("egp-id-counts")[WorkspaceId, number])
                    
                    local EgpIDs = varArray("egp-ids")
                    EgpIDs[WorkspaceId, number] = varNumber("egp-last") + 3
                    
                    # Change keyboard target
                    local WorkspacesById = varTable("workspacesById")
                    local WindowFocusOld = varNumber("window-focus")
                    varWrite("window-focus", WorkspaceId)
                    
                    local WorkspacesDevices = varTable("workspacesDevices")
                    WorkspacesDevices[WorkspaceId, table][3, table]["keys", array] = keyboardGetKeys()
                    WorkspacesDevices[WindowFocusOld, table][3, table]["keys", array] = varArray("KEYS_NULL")
                    
                    # Move to redraw state
                    stateSet(6)
                }
            }
        }
        varWrite("UseKeyOld", UseKey)
        
        for (I = 1, KERNEL_OVERLOAD) {
            # Callback device
            local CommandQueue = varTable("callback-device")["queue", array]
            if (CommandQueue:count() > 0) {
                local Command = CommandQueue:shiftString()
                
                switch (Command) {
                    case "create",
                        # Create workspace
                        local Workspace = table()
                        local WorkspaceName = CommandQueue:shiftString()
                        
                        local WmWorkspacesByName = varTable("workspacesByName")
                        WmWorkspacesByName[WorkspaceName, table] = Workspace
                        
                        varTable("workspacesById"):pushTable(Workspace)
                        local WorkspaceId = varNumber("workspacesCount") + 1
                        varWrite("workspacesCount", WorkspaceId)
                        local WorkspacesDevices = varTable("workspacesDevices")
                        WorkspacesDevices[WorkspaceId, table] = table()
                        
                        local WmWorkspacesNameToId = varTable("workspacesNameToId")
                        WmWorkspacesNameToId[WorkspaceName, number] = WorkspaceId
                        
                        # Draw workspace
                        ## Prepare
                        local BorderWidth = 2
                        local LabelHeight = 25
                        
                        local NewEgpId = varNumber("egp-last") + 3
                        varArray("egp-ids"):pushNumber(NewEgpId)
                        
                        local Pos = CommandQueue:shiftVector2()
                        varArray("egp-poses"):pushVector2(Pos)
                        
                        local Size = CommandQueue:shiftVector2()
                        varArray("egp-sizes"):pushVector2(Size)
                        
                        ## Drawing
                        egpParentPoint(NewEgpId, Pos)
                        egpParentToBase(NewEgpId)
                        
                        egpBox(NewEgpId - 2, vec2(-BorderWidth, -BorderWidth - LabelHeight), Size + vec2(2 * BorderWidth, 2 * BorderWidth + LabelHeight))
                        egpParent(NewEgpId - 2, NewEgpId)
                        egpColor(NewEgpId - 2, vec(100, 180, 255))
                        
                        egpTextLayout(NewEgpId - 1, WorkspaceName, vec2(0, -LabelHeight), vec2(Size[1], LabelHeight))
                        egpParent(NewEgpId - 1, NewEgpId)
                        egpAlign2(NewEgpId - 1, 1, 1)
                        
                        # Initialize place for app
                        local EgpIdsCount = CommandQueue:shiftNumber()
                        varArray("egp-id-counts"):pushNumber(EgpIdsCount + 1)
                        varWrite("egp-last", NewEgpId + EgpIdsCount + 1)
                        
                        WindowFocusOld = varNumber("window-focus")
                        varWrite("window-focus", WorkspaceId)
                        local WorkspacesById = varTable("workspacesById")
                        if (WindowFocusOld != 0) {
                            WorkspacesById[WindowFocusOld, table]["devices", table][3, table]["keys", array] = varArray("KEYS_NULL")
                        }
                        break
                    
                    case "add-device",
                        local WorkspaceName = CommandQueue:shiftString()
                        local DeviceType = CommandQueue:shiftString()
                        
                        local Workspace = varTable("workspacesByName")[WorkspaceName, table]
                        local WorkspaceId = varTable("workspacesNameToId")[WorkspaceName, number]
                        
                        local Device = NULL
                        
                        switch (DeviceType) {
                            case "egp-screen",
                                local Size = varArray("egp-sizes")[WorkspaceId, vector2]
                                local EgpIdsCount = varArray("egp-id-counts")[WorkspaceId, number]
                                
                                Device = createVirtualEgpScreen(Size, EgpIdsCount)
                                break
                            
                            case "keyboard",
                                Device = createVirtualKeyboard()
                                Device["keys", array] = keyboardGetKeys()
                                break
                            
                            case "cursor",
                                Device = createVirtualCursor()
                                break
                            
                            case "callback",
                                Device = varTable("callback-device")
                                break
                        }
                        if (Device != NULL) {
                            varTable("workspacesDevices")[WorkspaceId, table]:pushTable(Device)
                            Workspace:pushTable(Device)
                        }
                        break
                    
                    case "add-app",
                        local WorkspaceName = CommandQueue:shiftString()
                        local Workspace = varTable("workspacesByName")[WorkspaceName, table]
                        Workspace:programStart(CommandQueue:shiftString())
                        break
                    
                    case "launch",
                        local AppName = CommandQueue:shiftString()
                        local WorkspaceName = "window" + varNumber("workspacesCount")
                        
                        local AppSize = varVector2("egp-size-standart")
                        #[if (APPS_INFO[AppName, table]:exists("min-egp-size")) {
                            AppSize = clamp(APPS_INFO[AppName, table]["min-egp-size", vector2], vec2(), egpResolution() * 0.75 - vec2(0, 25))
                        }]#
                        
                        local AppEgpids = varNumber("egpids-standart")
                        #[if (APPS_INFO[AppName, table]:exists("min-egpid-count")) {
                            AppEgpids = APPS_INFO[AppName, table]["min-egpid-count", number]
                        }]#
                        
                        local CallBackDevice = varTable("callback-device")
                        CallBackDevice["queue", array] = CallBackDevice["queue", array]:add(array(
                            "create", WorkspaceName, randvec2(vec2(0, 25), egpResolution() - AppSize), AppSize, AppEgpids,
                            "add-device", WorkspaceName, "egp-screen",
                            "add-device", WorkspaceName, "cursor",
                            "add-device", WorkspaceName, "keyboard",
                            "add-app", WorkspaceName, "driver-cursor",
                            "add-app", WorkspaceName, "driver-egp",
                            "add-app", WorkspaceName, "driver-keyboard",
                            "add-app", WorkspaceName, AppName
                        ))
                        break
                    
                    case "test",
                        egpColor(1, randvec(0, 255))
                        break
                    
                    case "clear",
                        local CallBackDevice = varTable("callback-device")
                        CallBackDevice["queue", array]:pushString("add-app")
                        CallBackDevice["queue", array]:pushString("wm-sh")
                        CallBackDevice["queue", array]:pushString("clear")
                        
                        CallBackDevice["queue", array]:pushString("start")
                        CallBackDevice["queue", array]:pushString("wm-sh")
                        break
                    
                    case "terminal",
                        local WorkspaceName = "window" + varNumber("workspacesCount")
                        local AppSize = varVector2("egp-size-standart") * vec2(1, 2)
                        
                        local CallBackDevice = varTable("callback-device")
                        CallBackDevice["queue", array] = CallBackDevice["queue", array]:add(array(
                            "create", WorkspaceName, randvec2(vec2(0, 25), egpResolution() - AppSize), AppSize, 5,
                            "add-device", WorkspaceName, "egp-screen",
                            "add-device", WorkspaceName, "cursor",
                            "add-device", WorkspaceName, "keyboard",
                            "add-app", WorkspaceName, "driver-terminal",
                            "add-app", WorkspaceName, "driver-keyboard",
                            "add-app", WorkspaceName, "simple-keyboard",
                            "add-app", WorkspaceName, "sh"
                        ))
                        break
                    
                    case "close",
                        local WorkspaceName = CommandQueue:shiftString()
                        local CallBackDevice = varTable("callback-device")
                        CallBackDevice["queue", array]:pushString("add-app")
                        CallBackDevice["queue", array]:pushString(WorkspaceName)
                        CallBackDevice["queue", array]:pushString("exit")
                        
                        CallBackDevice["queue", array]:pushString("start")
                        CallBackDevice["queue", array]:pushString(WorkspaceName)
                        break
                    
                    default,
                }
            }
            else {
                break
            }
        }
        break
    
    case 6,
        if (egpIsIdle()) {
            varWrite("counter", varNumber("counterStart"))
            stateNext()
        }
        break
        
    case 7,
        for (I = 1, KERNEL_OVERLOAD) {
            local Counter = varNumber("counter")
            
            local NewId = Counter + varNumber("egp-last") + 3
            local OldId = Counter + varNumber("counterOffset")
            
            #[egpCopy(NewId, OldId)
            if (OldId != varNumber("counterOffset")) {
                egpParent(NewId, (NewId - OldId) + egpParent(OldId))
            }
            egpRemove(OldId)]#
            
            #print(OldId, egpParent(OldId))
            if (egpParent(OldId) == 0) {
                egpMove(NewId, OldId)
                egpParentToBase(NewId)
            }
            else {
                egpMove(NewId, OldId)
            }
            
            if (Counter >= varNumber("counterLimit")) {
                stateNext()
                break
            }
            else {
                varWrite("counter", Counter + 1)
            }
        }
        break
    
    case 8,
        if (egpIsIdle()) {
            varWrite("egp-last", varNumber("egp-last") + 3 + varNumber("counterLimit"))
            
            varRemove("counter")
            varRemove("counterLimit")
            varRemove("counterOffset")
            varRemove("counterStart")
            stateSet(5)
        }
        break
}
