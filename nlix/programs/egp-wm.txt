#
# This E2 made by scaled
#

@name egp-wm

switch (P["state", number]) {
    case 0,
        if (egpInit()) {
            egpBox(1, vec2(), egpResolution())
            egpParentToBase(1)
            egpColor(1, vec(127 * egpResolution()[1] / 512))
            
            P["state", number] = 1
        }
        break
    
    case 1,
        if (cursorInit()) {
            P["state", number] = 2
        }
        break
    
    case 2,
        if (keyboardInit()) {
            P["state", number] = 3
        }
        break
    
    case 3,
        P["EGP_SIZE_STANDART", vector2] = vec2(300, 150)
        P["EGPIDS_STANDART", number] = 20
        
        P["EGP_CURSOR_INVALID_POS", vector2] = vec2(-1)
        P["KEYS_NULL", array] = array()
        
        P["egpLast", number] = 1
        P["egpIds", array] = array()
        P["egpPoses", array] = array()
        P["egpSizes", array] = array()
        P["egpIdCounts", array] = array()
        P["workspacesByName", table] = table()
        P["workspacesById", table] = table()
        P["workspacesNameToId", table] = table()
        P["workspacesDevices", table] = table()
        
        local CallBackDevice = object("egp-wm-callback")
        local AppSize = clamp(vec2(300, 160), vec2(), egpResolution() * 0.9 - vec2(0, 25))
        CallBackDevice["queue", array] = array(
            "create", "wm-sh", randvec2(vec2(0, 25), egpResolution() - AppSize), AppSize, 5,
            "add-device", "wm-sh", "egp-screen",
            "add-device", "wm-sh", "cursor",
            "add-device", "wm-sh", "keyboard",
            "add-device", "wm-sh", "callback",
            "add-app", "wm-sh", "driver-terminal",
            "add-app", "wm-sh", "driver-keyboard",
            "add-app", "wm-sh", "simple-keyboard",
            "add-app", "wm-sh", "egp-wm-shell"
        )
        P["callbackDevice", table] = CallBackDevice
        
        P["state", number] = 4
        break
    
    case 4,
        if (egpIsIdle()) {
            P["state", number] = 5
        }
        break
    
    case 5,
        if (P["workspacesCount", number] > 0) {
            # Workspaces counter
            if (P["workspacesCount", number] > 1) {
                P["workspaceId", number] = P["workspaceId", number] % P["workspacesCount", number] + 1
            }
            else {
                P["workspaceId", number] = 1
            }
            local WorkspaceId = P["workspaceId", number]
            local Workspace = P["workspacesById", table][WorkspaceId, table]
            
            # Virtual screen driver
            local ParentId = P["egpIds", array][WorkspaceId, number]
            for (I = 1, KERNEL_OVERLOAD) {
                local VirtualScreenDevice = P["workspacesDevices", table][WorkspaceId, table]["devices", table][1, table]
                #local VirtualScreenDevice = Workspace:findDeviceByType("virtual-egp-screen")
                local EgpQueue = VirtualScreenDevice["output-queue", array]
                if (EgpQueue:count() > 0) {
                    VirtualScreenDevice["idle", number] = 0
                    
                    local Command = EgpQueue:shiftString()
                    local Id = EgpQueue:shiftNumber() + ParentId
                    
                    switch (Command) {
                        case "egpBox",
                            egpBox(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpBoxOutline",
                            egpBoxOutline(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpSetText",
                            egpSetText(Id, EgpQueue:shiftString())
                            break
                        
                        case "egpText",
                            egpText(Id, EgpQueue:shiftString(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpTextLayout",
                            egpTextLayout(Id, EgpQueue:shiftString(), EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpLine",
                            egpLine(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpLineStrip",
                            local Count = EgpQueue:shiftNumber()
                            
                            local Poses = array()
                            
                            for (I = 1, Count) {
                                Poses:pushVector2(EgpQueue:shiftVector2())
                            }
                            break
                            egpLineStrip(Id, Poses)
                            break
                        
                        case "egpColor",
                            egpColor(Id, EgpQueue:shiftVector())
                            break
                        
                        case "egpColor4",
                            egpColor4(Id, EgpQueue:shiftVector4())
                            break
                        
                        case "egpAlpha",
                            egpAlpha(Id, EgpQueue:shiftNumber())
                            break
                        
                        case "egpSize",
                            egpSize(Id, EgpQueue:shiftVector2())
                            break
                        
                        case "egpSizeNumber",
                            egpSizeNumber(Id, EgpQueue:shiftNumber())
                            break
                        
                        case "egpParent",
                            egpParent(Id, EgpQueue:shiftNumber() + ParentId)
                            break
                        
                        case "egpParentToBase",
                            egpParent(Id, ParentId)
                            break
                        
                        case "egpParentPoint",
                            egpParentPoint(Id, EgpQueue:shiftVector2())
                            break
                        
                        case "egpAlign",
                            egpAlign(Id, EgpQueue:shiftNumber())
                            break
                        
                        case "egpAlign2",
                            egpAlign2(Id, EgpQueue:shiftNumber(), EgpQueue:shiftNumber())
                            break
                        
                        case "egpCircle",
                            egpCircle(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpCircleOutline",
                            egpCircleOutline(Id, EgpQueue:shiftVector2(), EgpQueue:shiftVector2())
                            break
                        
                        case "egpPos",
                            egpPos(Id, EgpQueue:shiftVector2())
                            break
                        
                        case "egpRemove",
                            egpRemove(Id)
                            break
                        
                        case "egpCopy",
                            egpCopy(Id, EgpQueue:shiftNumber() + ParentId)
                            break
                        
                        case "egpMove",
                            egpMove(Id, EgpQueue:shiftNumber() + ParentId)
                            break
                    }
                }
                else {
                    VirtualScreenDevice["idle", number] = 1
                    break
                }
            }
                
            # Virtual cursor device driver
            local VirtualCursorDevice = P["workspacesDevices", table][WorkspaceId, table]["devices", table][2, table]
            
            local CursorPos = cursorGetPos()
            if (CursorPos == P["EGP_CURSOR_INVALID_POS", vector2]) {
                VirtualCursorDevice["pos", vector2] = P["EGP_CURSOR_INVALID_POS", vector2]
            }
            else {
                VirtualCursorDevice["pos", vector2] = CursorPos - P["egpPoses", array][WorkspaceId, vector2]
            }
            
            if (WorkspaceId == P["window-focus", number]) {
                VirtualCursorDevice["use", number] = cursorGetUse()
            }
            else {
                VirtualCursorDevice["use", number] = 0
            }
        }
        
        local UseKey = cursorGetUse()
        for (WorkspaceId = 1, P["workspacesCount", number]) {
            # Window management
            if (WorkspaceId == P["window-focus", number]) {
                if (UseKey & inrange(cursorGetPos() - P["egpPoses", array][WorkspaceId, vector2], vec2(0, -25), vec2(P["egpSizes", array][WorkspaceId, vector2][1], 0))) {
                    local NewPos = cursorGetPos() - vec2(P["egpSizes", array][WorkspaceId, vector2][1] / 2, -12)
                    #NewPos = clamp(NewPos, vec2(), egpResolution())
                    
                    P["egpPoses", array][WorkspaceId, vector2] = NewPos
                    egpPos(P["egpIds", array][WorkspaceId, number], NewPos)
                }
            }
            else {
                if ((UseKey != P["UseKeyOld", number]) & UseKey & inrange(cursorGetPos() - P["egpPoses", array][WorkspaceId, vector2], vec2(0, -25), P["egpSizes", array][WorkspaceId, vector2])) {
                    # Send data for redraw window
                    local EgpIds = P["egpIds", array][WorkspaceId, number]
                    P["counterOffset", number] = EgpIds
                    P["counterStart", number] = -2
                    P["counterLimit", number] = P["egpIdCounts", array][WorkspaceId, number]
                    
                    local EgpIDs = P["egpIds", array]
                    EgpIDs[WorkspaceId, number] = P["egpLast", number] + 3
                    
                    # Change keyboard target
                    local WindowFocusOld = P["window-focus", number]
                    P["window-focus", number] = WorkspaceId
                    
                    P["workspacesDevices", table][WorkspaceId, table]["devices", table][3, table]["keys", array] = keyboardGetKeys()
                    P["workspacesDevices", table][WindowFocusOld, table]["devices", table][3, table]["keys", array] = P["KEYS_NULL", array]
                    
                    # Move to redraw state
                    P["state", number] = 6
                }
            }
        }
        P["UseKeyOld", number] = UseKey
        
        for (I = 1, KERNEL_OVERLOAD) {
            # Callback device
            local CommandQueue = P["callbackDevice", table]["queue", array]
            if (CommandQueue:count() > 0) {
                local Command = CommandQueue:shiftString()
                
                switch (Command) {
                    case "create",
                        # Create workspace
                        local Workspace = table()
                        Workspace["devices", table] = table()
                        local WorkspaceName = CommandQueue:shiftString()
                        
                        P["workspacesByName", table][WorkspaceName, table] = Workspace
                        
                        P["workspacesById", table]:pushTable(Workspace)
                        local WorkspaceId = P["workspacesCount", number] + 1
                        
                        P["workspacesCount", number] = WorkspaceId
                        P["workspacesDevices", table][WorkspaceId, table] = Workspace
                        P["workspacesNameToId", table][WorkspaceName, number] = WorkspaceId
                        
                        # Draw workspace
                        ## Prepare
                        local BorderWidth = 2
                        local LabelHeight = 25
                        
                        local NewEgpId = P["egpLast", number] + 3
                        P["egpIds", array]:pushNumber(NewEgpId)
                        
                        local Pos = CommandQueue:shiftVector2()
                        P["egpPoses", array]:pushVector2(Pos)
                        
                        local Size = CommandQueue:shiftVector2()
                        P["egpSizes", array]:pushVector2(Size)
                        
                        ## Drawing
                        egpParentPoint(NewEgpId, Pos)
                        egpParentToBase(NewEgpId)
                        
                        egpBox(NewEgpId - 2, vec2(-BorderWidth, -BorderWidth - LabelHeight), Size + vec2(2 * BorderWidth, 2 * BorderWidth + LabelHeight))
                        egpParent(NewEgpId - 2, NewEgpId)
                        egpColor(NewEgpId - 2, vec(100, 180, 255))
                        
                        egpTextLayout(NewEgpId - 1, WorkspaceName, vec2(0, -LabelHeight), vec2(Size[1], LabelHeight))
                        egpParent(NewEgpId - 1, NewEgpId)
                        egpAlign2(NewEgpId - 1, 1, 1)
                        
                        # Initialize place for app
                        local EgpIdsCount = CommandQueue:shiftNumber()
                        P["egpIdCounts", array]:pushNumber(EgpIdsCount + 1)
                        P["egpLast", number] = NewEgpId + EgpIdsCount + 1
                        
                        WindowFocusOld = P["window-focus", number]
                        P["window-focus", number] = WorkspaceId
                        if (WindowFocusOld != 0) {
                            P["workspacesById", table][WindowFocusOld, table]["devices", table][3, table]["keys", array] = P["KEYS_NULL", array]
                        }
                        break
                    
                    case "add-device",
                        local WorkspaceName = CommandQueue:shiftString()
                        local DeviceType = CommandQueue:shiftString()
                        
                        local Workspace = P["workspacesByName", table][WorkspaceName, table]
                        local WorkspaceId = P["workspacesNameToId", table][WorkspaceName, number]
                        
                        local Device = NULL
                        
                        switch (DeviceType) {
                            case "egp-screen",
                                local Size = P["egpSizes", array][WorkspaceId, vector2]
                                local EgpIdsCount = P["egpIdCounts", array][WorkspaceId, number]
                                
                                Device = createVirtualEgpScreen(Size, EgpIdsCount)
                                break
                            
                            case "keyboard",
                                Device = createVirtualKeyboard()
                                Device["keys", array] = keyboardGetKeys()
                                break
                            
                            case "cursor",
                                Device = createVirtualCursor()
                                break
                            
                            case "callback",
                                Device = P["callbackDevice", table]
                                break
                        }
                        if (Device != NULL) {
                            P["workspacesDevices", table][WorkspaceId, table]["devices", table]:pushTable(Device)
                            Workspace:pushTable(Device)
                        }
                        break
                    
                    case "add-app",
                        local WorkspaceName = CommandQueue:shiftString()
                        local Workspace = P["workspacesByName", table][WorkspaceName, table]
                        Workspace:programStart(CommandQueue:shiftString())
                        break
                    
                    case "launch",
                        local AppName = CommandQueue:shiftString()
                        local WorkspaceName = "window" + P["workspacesCount", number]
                        
                        local AppSize = P["EGP_SIZE_STANDART", vector2]
                        #[if (APPS_INFO[AppName, table]:exists("min-egp-size")) {
                            AppSize = clamp(APPS_INFO[AppName, table]["min-egp-size", vector2], vec2(), egpResolution() * 0.75 - vec2(0, 25))
                        }]#
                        
                        local AppEgpids = P["EGPIDS_STANDART", number]
                        #[if (APPS_INFO[AppName, table]:exists("min-egpid-count")) {
                            AppEgpids = APPS_INFO[AppName, table]["min-egpid-count", number]
                        }]#
                        
                        local CallBackDevice = P["callbackDevice", table]
                        CallBackDevice["queue", array] = CallBackDevice["queue", array]:add(array(
                            "create", WorkspaceName, randvec2(vec2(0, 25), egpResolution() - AppSize), AppSize, AppEgpids,
                            "add-device", WorkspaceName, "egp-screen",
                            "add-device", WorkspaceName, "cursor",
                            "add-device", WorkspaceName, "keyboard",
                            "add-app", WorkspaceName, "driver-cursor",
                            "add-app", WorkspaceName, "driver-egp",
                            "add-app", WorkspaceName, "driver-keyboard",
                            "add-app", WorkspaceName, AppName
                        ))
                        break
                    
                    case "test",
                        egpColor(1, randvec(0, 255))
                        break
                    
                    case "clear",
                        local CallBackDevice = P["callbackDevice", table]
                        CallBackDevice["queue", array]:pushString("add-app")
                        CallBackDevice["queue", array]:pushString("wm-sh")
                        CallBackDevice["queue", array]:pushString("clear")
                        
                        CallBackDevice["queue", array]:pushString("start")
                        CallBackDevice["queue", array]:pushString("wm-sh")
                        break
                    
                    case "terminal",
                        local WorkspaceName = "window" + P["workspacesCount", number]
                        local AppSize = P["EGP_SIZE_STANDART", vector2] * vec2(1, 2)
                        
                        local CallBackDevice = P["callbackDevice", table]
                        CallBackDevice["queue", array] = CallBackDevice["queue", array]:add(array(
                            "create", WorkspaceName, randvec2(vec2(0, 25), egpResolution() - AppSize), AppSize, 5,
                            "add-device", WorkspaceName, "egp-screen",
                            "add-device", WorkspaceName, "cursor",
                            "add-device", WorkspaceName, "keyboard",
                            "add-app", WorkspaceName, "driver-terminal",
                            "add-app", WorkspaceName, "driver-keyboard",
                            "add-app", WorkspaceName, "simple-keyboard",
                            "add-app", WorkspaceName, "sh"
                        ))
                        break
                    
                    case "close",
                        local WorkspaceName = CommandQueue:shiftString()
                        local CallBackDevice = P["callbackDevice", table]
                        CallBackDevice["queue", array]:pushString("add-app")
                        CallBackDevice["queue", array]:pushString(WorkspaceName)
                        CallBackDevice["queue", array]:pushString("exit")
                        
                        CallBackDevice["queue", array]:pushString("start")
                        CallBackDevice["queue", array]:pushString(WorkspaceName)
                        break
                    
                    default,
                }
            }
            else {
                break
            }
        }
        break
    
    case 6,
        if (egpIsIdle()) {
            P["counter", number] = P["counterStart", number]
            P["state", number] = 7
        }
        break
        
    case 7,
        for (I = 1, KERNEL_OVERLOAD) {
            local Counter = P["counter", number]
            
            local NewId = Counter + P["egpLast", number] + 3
            local OldId = Counter + P["counterOffset", number]
            
            #[egpCopy(NewId, OldId)
            if (OldId != P["counterOffset", number]) {
                egpParent(NewId, (NewId - OldId) + egpParent(OldId))
            }
            egpRemove(OldId)]#
            
            #print(OldId, egpParent(OldId))
            if (egpParent(OldId) == 0) {
                egpMove(NewId, OldId)
                egpParentToBase(NewId)
            }
            else {
                egpMove(NewId, OldId)
            }
            
            if (Counter >= P["counterLimit", number]) {
                P["state", number] = 8
                break
            }
            else {
                P["counter", number] = Counter + 1
            }
        }
        break
    
    case 8,
        if (egpIsIdle()) {
            P["egpLast", number] = P["egpLast", number] + 3 + P["counterLimit", number]
            
            P:remove("counter")
            P:remove("counterLimit")
            P:remove("counterOffset")
            P:remove("counterStart")
            P["state", number] = 5
        }
        break
}
