#
# Created by scaled
#

@name driver-gl

switch (stateGet()) {
    # Initialize
    case 0,
        eventInit()
        driverInit()
        stateNext()
        break
    
    case 1,
        if (driverPopDevice("gmod_wire_egp")) {
            local Port = varTable("device")["port", wirelink]
            Port:egpClear()
            Port:egpDrawTopLeft(1)
            Port:egpResolution(vec2(-256), vec2(256))
            
            Port:egpBox(1, vec2(-256), vec2(512))
            Port:egpColor(1, vec())
            
            local Id = min(egpMaxObjects(), 300)
            while (Id >= 2) {
                Port:egpLine(Id, vec2(), vec2())
                Id--
            }
            
            stateNext()
        }
        break
    
    case 2,
        varWrite("usedIds", array())
        
        varWrite("idle", 1)
        stateNext()
        break
    
    # Wait events
    case 3,
        local Device = varTable("device")
        local Port = Device["port", wirelink]
        if (Device:isValid()) {
            for (I = 1, KERNEL_OVERLOAD) {
                if (eventExists()) {
                    varWrite("idle", 0)
                    local Command = eventGetString()
                    
                    switch (Command) {
                        case "glStart",
                            local Id = min(egpMaxObjects(), 300)
                            
                            local UsedIds = varArray("usedIds")
                            local UsedIdsOld = varArray("usedIdsOld")
                            while (Id >= 2) {
                                if (!UsedIds:exists(Id) & UsedIdsOld:exists(Id)) {
                                    Port:egpLine(Id, vec2(), vec2())
                                    UsedIds:remove(Id)
                                }
                                Id--
                            }
                            varWrite("usedIdsOld", UsedIds)
                            
                            UsedIdsOld:clear()
                            varWrite("usedIds", UsedIdsOld)
                            break
                        
                        case "glFillColor",
                            Port:egpColor(1, eventGetVector())
                            break
                        
                        case "glColor",
                            varWrite("color", eventGetVector())
                            break
                        
                        case "glPos",
                            varWrite("pos", eventGetVector())
                            break
                        
                        case "glAng",
                            varWrite("matrix", matrix(eventGetAngle()))
                            break
                        
                        case "glTriangle",
                            local Matrix = varMatrix("matrix")
                            local Pos = varVector("pos")
                            
                            local Pos1 = Matrix * (eventGetVector() - Pos)
                            local Pos2 = Matrix * (eventGetVector() - Pos)
                            local Pos3 = Matrix * (eventGetVector() - Pos)
                            
                            local UsedIds = varArray("usedIds")
                            local Id = int(min(egpMaxObjects(), 300) / 10 * (Pos1 + Pos2 + Pos3)[3] / 3) + 1
                            
                            while (UsedIds:exists(Id)) {
                                Id++
                            }
                            UsedIds[Id, number] = 1
                            
                            if (Pos1[3] > 0 & Pos2[3] > 0 & Pos3[3] > 0) {
                                Port:egpTriangle(Id,
                                    256 * Pos1:dehomogenized(),
                                    256 * Pos2:dehomogenized(),
                                    256 * Pos3:dehomogenized()
                                )
                                Port:egpColor(Id, varVector("color"))
                            }
                            break
                        
                        case "exit",
                            Port:egpClear()
                            driverPushDevice()
                            programKill()
                            break
                        
                        default,
                    }
                }
                else {
                    varWrite("idle", 1)
                    break
                }
            }
        }
        else {
            driverPushDevice()
            stateSet(1)
        }
        break
    }
