#
# Created by scaled
#

@name eventctl

switch (stateGet()) {
    # Wait terminal driver
    case 0,
        if (terminalInit()) {
            terminalPrint("Event control shell. Write \"quit\" for exit.\n")
            
            eventInit()
            
            varWrite("order", array())
            
            stateNext()
        }
        break
    
    # Wait keyboard driver
    case 1,
        if (simpleKeyboardInit()) {
            stateNext()
        }
        break
    
    # Main state
    case 2,
        terminalPrint("> ")
        simpleKeyboardRequestInput()
        
        stateNext()
        break
    
    # Get input
    case 3,
        if (simpleKeyboardWaitInput()) {
            local Input = simpleKeyboardGetInput()
            varWrite("input", Input)
            local InputExplode = Input:explode(" ")
            local Command = InputExplode[1, string]
            switch (Command) {
                case "",
                    stateSet(2)
                    break
                
                case "find-by-name", case "fn",
                    local Program = programFindByName(InputExplode[2, string])
                    if (Program != NULL) {
                        varWrite("program", Program)
                    }
                    else {
                        terminalPrint("Can't find this program.\n")
                    }
                    stateSet(2)
                    break
                
                case "find-by-id", case "fi",
                    local Program = Programs[InputExplode[2, string]:toNumber(), table]
                    if (Program:isValid()) {
                        varWrite("program", Program)
                        terminalPrint("Target is \"" + Program:type() + "\".\n")
                    }
                    else {
                        terminalPrint("Program or input is not valid.\n")
                    }
                    stateSet(2)
                    break
                
                case "write", case "w",
                    varArray("order"):pushString(Input)
                    
                    stateSet(2)
                    break
                
                case "clear", case "c",
                    varArray("order"):clear()
                    
                    stateSet(2)
                    break
                
                case "send", case "s",
                    stateSet(4)
                    break
                
                case "quit", case "q", case "exit",
                    programKill()
                    break
                
                case "help", case "h",
                    local Message = 
                        "fn, find-by-name [program name]\n" +
                        "fi, find-by-id [program id]\n" +
                        "w, write [type] [value]\n" +
                        "c, clear\n" +
                        "s, send\n" +
                        "q, quit, exit\n" + 
                        "h, help\n"
                    terminalPrint(Message)
                    stateSet(2)
                    break
                
                default,
                    local Message = "Wrong command\n"
                    terminalPrint(Message)
                    stateSet(2)
                    break
            }
        }
        break
    
    case 4,
        local Order = varArray("order")
        for (I = 1, KERNEL_OVERLOAD) {
            if (Order:count() > 0) {
                local InputExplode = Order:shiftString():explode(" ")
                
                local Program = varTable("program")
                
                local Type = InputExplode[2, string]
                local Value = InputExplode[3, string]
                switch (Type:lower()) {
                    case "number", case "n",
                        Program:eventSend(Value:toNumber())
                        break
                    
                    case "string", case "s",
                        Program:eventSend(InputExplode:concat(" ", 3))
                        break
                    
                    case "vector", case "v",
                        Program:eventSend(vec(Value:toNumber(), InputExplode[4, string]:toNumber(), InputExplode[5, string]:toNumber()))
                        break
                    
                    case "vector2", case "v2",
                        Program:eventSend(vec2(Value:toNumber(), InputExplode[4, string]:toNumber()))
                        break
                    
                    case "vector4", case "v4",
                        Program:eventSend(vec4(Value:toNumber(), InputExplode[4, string]:toNumber(), InputExplode[5, string]:toNumber(), InputExplode[6, string]:toNumber()))
                        break
                }
            }
            else {
                stateSet(2)
                break
            }
        }
        break
}
