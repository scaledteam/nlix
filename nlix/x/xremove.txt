#
# Created by scaled
#

@name xremove

P2F["xremove", string] = "xremove"

function xremove() {
    switch (P["state", number]) {
        case 0,
            if (!P["xparam", table]["blocked", number]) {
                P["xparam", table]["blocked", number] = 1
                
                P["removedObjectsIds", table] = table()
                
                P["counter", number] = P["idStart", number]
                P["limit", number] = P["idEnd", number]
                
                P["state", number] = 1
            }
            break
        
        case 1,
            local Id = P["counter", number]
            
            for (I = 1, Overload) {
                if (Id <= P["limit", number]) {
                    local Object = P["xobjectsAll", table][Id, table]
                    
                    Object:xclear()
                    P["removedObjectsIds", table][Id, number] = 1
                    
                    Id++
                }
                else {
                    P["counter", number] = 1
                    P["state", number] = 2
                    return
                }
            }
            
            P["counter", number] = Id
            break
        
        case 2,
            local Id = P["counter", number]
            
            for (I = 1, Overload) {
                Id++
                
                if (Id <= P["xobjectsAll", table]:count()) {
                    local Object = P["xobjectsAll", table][Id, table]
                    
                    if (!P["removedObjectsIds", table]:exists(Id)) {
                        if (Object:exists("removed")) {
                            P["removedObjectsIds", table][Id, number] = 1
                        }
                        elseif (Object["parent", table]:exists("removed") & Object:exists("parent")) {
                            Object:xclear()
                            P["removedObjectsIds", table][Id, number] = 1
                            P["removed", number] = P["removed", number] + 1
                        }
                    }
                }
                else {
                    if (P["removed", number] > 0) {
                        P["removed", number] = 0
                        Id = 1
                    }
                    else {
                        P["counter", number] = 1
                        P["state", number] = 3
                        return
                    }
                }
            }
            
            P["counter", number] = Id
            break
        
        case 3,
            local Id = P["counter", number]
            local Offset = P["offset", number]
            
            for (I = 1, Overload) {
                if (Id <= P["xobjectsAll", table]:count()) {
                    #print(Id, Offset, Id + Offset, P["removedObjectsIds", table][Id + Offset, number])
                    if (P["removedObjectsIds", table][Id + Offset, number]) {
                        P["removedObjectsIds", table][Id + Offset, number] = 0
                        Offset++
                        
                        P["xdevice", wirelink]:egpRemove(P["xobjectsAll", table]:count())
                        P["xobjectsAll", table]:removeTable(Id)
                        
                        P["xdevice", wirelink]:egpLine(Id, vec2(), vec2())
                    }
                    else {
                        if (Offset != 0) {
                            local Object = P["xobjectsAll", table][Id, table]
                            
                            Object["id", number] = Id
                            Object:xredraw()
                        }
                        
                        Id++
                    }
                }
                else {
                    P["removedObjectsIds", table]:clear()
                    P["xparam", table]["blocked", number] = 0
                    end()
                    return
                }
            }
            
            P["counter", number] = Id
            P["offset", number] = Offset
            break
    }
}
