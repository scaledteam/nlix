#
# Created by scaled
#

@name xwm

xregister("wm's", "xwm")

P2F["xwm", string] = "xwm"

function xwm() {
    switch (P["state", number]) {
        case 0,
            if (P["parent", table]["name", string] == "sh") {
                P:removeTable("parent"):clear()
            }
            elseif (!P:exists("xframe")) {
                if (!P:exists("args")) {
                    P["args", array] = array()
                }
                P["args", array]:unshiftString(P["name", string])
                P["name", string] = "xstart"
            }
            elseif (xcanCreate(1)) {
                local Res = P["xframe", table]["size", vector2]
                xcreate("box"):xsize(Res):xcolor(P["xframe", table]:exists("parent") ? hsv2rgb(randint(360), 1, 0.7) : hsv2rgb(205, 1, 0.7))
                
                P["in", array] = array("interface xpanel")
                
                P["programs", table] = table()
                P["frames", table] = table()
                P["windows", table] = table()
                
                local Kbd = exec("kbd")
                programUp()
                
                P["kbd", array] = Kbd["out", array] = array()
                
                P["state", number] = 1
            }
            break
            
        case 1,
            if (xcanDraw()) {
                # Send cursor to programs
                local Cursor = xcursor()
                local Use = xkeyUse()
                #P["xframe", table]["keyUse", number] = -1
                
                # Program
                local Program = P["programs", table][P["focus", number], table]
                # Keyboard
                local KbdReal = P["kbd", array]
                local KbdInsideProgram = Program["kbd", array]
                
                KbdInsideProgram:clear()
                for (I = 1, KbdReal:count()) {
                    KbdInsideProgram[I, number] = KbdReal[I, number]
                }
                
                # Moving windows
                local Window = P["windows", table][P["focus", number], table]
                if (Window:isValid() & Use & (Window:exists("moveMode") | inrange(Cursor - Window["pos", vector2], vec2(), Window["size", vector2]))) {
                    if (!Window:exists("moveMode") & (Cursor[1] > Window["pos", vector2][1] + Window["size", vector2][1] - 20)) {
                        Program:clear()
                    }
                    else {
                        local NewPos = round(clamp(Cursor - Window["size", vector2] / 2, vec2(), P["xframe", table]["size", vector2] - vec2(0, 40) - Program["xframe", table]["size", vector2]))
                        Window:xpos(NewPos)
                        Program["xframe", table]:xpos(NewPos + vec2(0, 20))
                        
                        Window["moveMode", number] = 1
                        return
                    }
                }
                elseif (Window:exists("moveMode")) {
                    Window:remove("moveMode")
                }
                
                # Programs
                if (P["programs", table]:count() > 0) {
                    local Counter = P["counter", number] + 1
                    if (Counter > P["programs", table]:count()) {
                        Counter = 1
                    }
                    P["counter", number] = Counter
                    
                    # Check if program is dead
                    Program = P["programs", table][Counter, table]
                    if (!Program:isValid()) {
                        P["programs", table]:remove(Counter)
                        
                        if (!P["frames", table][Counter, table]:exists("removed")) {
                            if (P["xremove", table]:isValid()) {
                                P["frames", table]:removeTable(Counter):xremove()
                                P["windows", table]:removeTable(Counter):xremove()
                            }
                            else {
                                xxremoveByDaemon(P["windows", table]:removeTable(Counter)["id", number], P["frames", table]:removeTable(Counter):xxlastObjectId())
                            }
                        }
                    }
                    # Check focus
                    elseif (P["focus", number] != Counter & Use & inrange(Cursor - Program["xframe", table]["pos", vector2], vec2(0, -20), Program["xframe", table]["size", vector2])) {
                        # Clear old data after focus changed
                        local ProgramOld = P["programs", table][P["focus", number], table]
                        ProgramOld["kbd", array]:clear()
                        
                        # set new focus
                        P["focus", number] = Counter
                        
                        # test
                        local Window = P["windows", table][Counter, table]
                        if (Window:isValid()) {
                            #Program["xframe", table]:xup()
                            xxup(Window["id", number], Program["xframe", table]:xxlastObjectId(), P["xframe", table]:xxlastObjectId())
                            #xprintAll()
                        }
                    }
                }
            }
            
            # Commands
            if (wait() & xcanCreate(4)) {
                local CommandExp = in():trim():explodeRE(" +")
                
                switch (CommandExp[1, string]) {
                    case "exit",
                        end()
                        break
                        
                    case "sh",
                        end()
                        exec("sh")
                        break
                        
                    case "poweroff",
                        P["xdevice", wirelink]:egpClear()
                        poweroff()
                        break
                    
                    default,
                        local IsUsualWindow = 1
                        if (CommandExp[1, string] == "interface") {
                            CommandExp:shift()
                            IsUsualWindow = 0
                        }
                        
                        local ProgramName = CommandExp:shiftString()
                        
                        local Res = P["xframe", table]["size", vector2]
                        
                        local Pos = vec2()
                        local Size = Res
                        
                        if (IsUsualWindow) {
                            local Count = 2.1
                            Size = floor((Res - vec2(0, 20 + 20 * Count)) / Count)
                            Pos = randvec2(vec2(0, 20), Res - vec2(0, 20) - Size)
                            
                            local WindowSize = vec2(Size[1], 20)
                            local Window = xcreate("box"):xpos(Pos - vec2(0, 20)):xsize(WindowSize)
                            xcreate("text"):xparent(Window):xpos(-WindowSize / 2):xtext(ProgramName):xsize(20):xcolor(vec())
                            local Offset = vec2(WindowSize[1] - 20, -(WindowSize[2] - 20)) / 2
                            xcreate("lineStrip"):xparent(Window):xsize(2):xverticles(array(
                                vec2(-6) + Offset,
                                vec2(6) + Offset,
                                vec2() + Offset,
                                vec2(-6, 6) + Offset,
                                vec2(6, -6) + Offset
                            )):xcolor(vec())
                            
                            P["windows", table]:pushTable(Window)
                        }
                        else {
                            P["windows", table]:pushTable(table())
                        }
                        
                        local Program = xexec(ProgramName, Pos, Size)
                        P["programs", table]:pushTable(Program)
                        P["frames", table]:pushTable(Program["xframe", table])
                        
                        Program["args", array] = CommandExp
                        Program["out", array] = P["out", array]
                        Program["kbd", array] = array()
                        
                        if (!IsUsualWindow) {
                            Program["out", array] = P["in", array]
                        }
                        
                        P["focus", number] = P["programs", table]:count()
                }
            }
            break
    }
}

