#
# Created by scaled
#

@name xclicker

xregister("games", "xclicker")

P2F["xclicker", string] = "xclicker"

function xclicker() {
    switch (P["state", number]) {
        case 0,
            if (xcanCreate(17)) {
                # Graphics
                local Res = P["xframe", table]["size", vector2]
                local TextSize = Res[2] / 15
                
                # Background
                xcreate("box"):xsize(Res):xcolor(vec())
                xcreate("box"):xsize(Res * vec2(1 / 3, 1 / 5))
                
                P["scopeText", table] = xcreate("textLayout"):xsize(Res * vec2(1 / 3, 1 / 5)):xsize(TextSize):xcolor(vec()):xalign(vec2(1))
                
                xcreate("box"):xpos(Res * vec2(1 / 3, 0)):xsize(Res * vec2(2 / 3, 1)):xcolor(vec(80))
                
                P["ballSize", number] = Res[2] / 6
                
                P["circle", table] = xcreate("circle"):xpos(Res * vec2(1 / 6, 6 / 10)):xsize(vec2(P["ballSize", number]))
                
                local Offset = Res[2] / 30
                local Pos = Res * vec2(1 / 3, 0) + vec2(Offset)
                local Step = Res * vec2(1 / 3, 1 / 5)
                local Size = Res * vec2(1 / 3, 2 / 15) - vec2(Offset * 2, 0)
                
                for (X = 0, 1) {
                    for (Y = 0, 4) {
                        xcreate("box"):xpos(Pos + vec2(X, Y) * Step):xsize(Size):xcolor(vec(63, 127, 255))
                    }
                }
                
                xcreate("textLayout"):xtext(
                    "First\n50\t+1" + "\n\n" + 
                    "Third\n2000\t+60"
                ):xpos(Res * vec2(1 / 3, 0) + vec2(0, TextSize / 2)):xsize(Res * vec2(1 / 3, 1)):xsize(TextSize):xalign(vec2(1, 0)):xmonospaced(1)
                
                xcreate("textLayout"):xtext(
                    "Second\n500\t+14" + "\n\n" + 
                    "Last\n6000\t+160"
                ):xpos(Res * vec2(2 / 3, 0) + vec2(0, TextSize / 2)):xsize(Res * vec2(1 / 3, 1)):xsize(TextSize):xalign(vec2(1, 0))
                
                # Algorithm
                P["systimeOld", number] = systime()
                
                P["costs", array] = array(
                    50, 500,
                    2000, 6000
                )
                
                P["boosts", array] = array(
                    1, 7,
                    30, 80
                )
                
                P["state", number] = 1
            }
            break
        
        case 1,
            if (xcanDraw()) {
                local DeltaTime = systime() - P["systimeOld", number]
                P["systimeOld", number] = systime()
                
                P["score", number] = P["score", number] + P["speed", number] * DeltaTime
                
                P["circlePos", number] = P["circlePos", number] + (DeltaTime * P["speed", number]) ^ 0.5
                
                if (P["impulse", number] > 0) {
                    P["impulse", number] = clamp(P["impulse", number] - 2 * DeltaTime, 0, 1)
                }
                
                P["scopeText", table]:xtext(int(P["score", number]):toString())
                
                P["circle", table]:xcolor(hsv2rgb((systime() * 18) % 360, 1, 1))
                P["circle", table]:xsize(vec2(P["ballSize", number] * min(1, (sin(P["circlePos", number]) + 3 + P["impulse", number]) / 4)))
                
                local Cursor = xcursor()
                if (xkeyUse() != P["egpUseOld", number]) {
                    P["egpUseOld", number] = xkeyUse()
                    
                    if (xkeyUse()) {
                        local Res = P["xframe", table]["size", vector2]
                        
                        if (inrange(Cursor, Res * vec2(1 / 3, 0), Res)) {
                            local Pos = int(Cursor[1] / Res[1] * 3) + int(Cursor[2] / Res[2] * 5) * 2
                            
                            if (P["score", number] >= P["costs", array][Pos, number]) {
                                P["score", number] = P["score", number] - P["costs", array][Pos, number]
                                P["speed", number] = P["speed", number] + P["boosts", array][Pos, number]
                            }
                        }
                        
                        elseif (inrange(Cursor, vec2(0, Res[2] / 5), Res * vec2(1 / 3, 1))) {
                            P["score", number] = P["score", number] + 1
                            
                            P["impulse", number] = 1
                        }
                    }
                }
            }
            break
    }
}
