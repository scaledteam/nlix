#
# Created by scaled
#

@name xclicker

xregister("games", "xclicker")

P2F["xclicker", string] = "xclicker"

function xclicker() {
    switch (P["state", number]) {
        case 0,
            if (xcanCreate(17)) {
                # Graphics
                local Res = P["xframe", table]["size", vector2]
                local TextSize = Res[2] / 15
                
                # Background
                xcreate(table(
                    "type" = "box",
                    "size" = Res,
                    "color" = vec()
                ))
                
                xcreate(table(
                    "type" = "box",
                    "size" = Res * vec2(1 / 3, 1 / 5)
                ))
                
                P["scopeText", table] = xcreate(table(
                    "type" = "text",
                    "size" = Res * vec2(1 / 3, 1 / 5),
                    "sizeNum" = TextSize,
                    "color" = vec(),
                    "align" = vec2(1)
                ))
                
                xcreate(table(
                    "type" = "box",
                    "pos" = Res * vec2(1 / 3, 0),
                    "size" = Res * vec2(2 / 3, 1),
                    "color" = vec(80)
                ))
                
                P["ballSize", number] = Res[2] / 6
                
                P["circle", table] = xcreate(table(
                    "type" = "circle",
                    "pos" = Res * vec2(1 / 6, 6 / 10),
                    "size" = vec2(P["ballSize", number])
                ))
                
                local Offset = Res[2] / 30
                local Pos = Res * vec2(1 / 3, 0) + vec2(Offset)
                local Step = Res * vec2(1 / 3, 1 / 5)
                local Size = Res * vec2(1 / 3, 2 / 15) - vec2(Offset * 2, 0)
                
                for (X = 0, 1) {
                    for (Y = 0, 4) {
                        xcreate(table(
                            "type" = "box",
                            "pos" = Pos + vec2(X, Y) * Step,
                            "size" = Size,
                            "color" = vec(63, 127, 255)
                        ))
                    }
                }
                
                xcreate(table(
                    "type" = "text",
                    "text" = 
                        "First\n50\t+1" + "\n\n" + 
                        "Third\n2000\t+60",
                    "pos" = Res * vec2(1 / 3, 0) + vec2(0, TextSize / 2),
                    "size" = Res * vec2(1 / 3, 1),
                    "sizeNum" = TextSize,
                    "align" = vec2(1, 0)
                ))
                
                xcreate(table(
                    "type" = "text",
                    "text" = 
                        "Second\n500\t+14" + "\n\n" + 
                        "Last\n6000\t+160",
                    "pos" = Res * vec2(2 / 3, 0) + vec2(0, TextSize / 2),
                    "size" = Res * vec2(1 / 3, 1),
                    "sizeNum" = TextSize,
                    "align" = vec2(1, 0)
                ))
                
                # Algorithm
                P["systimeOld", number] = systime()
                
                P["costs", array] = array(
                    50, 500,
                    2000, 6000
                )
                
                P["boosts", array] = array(
                    1, 7,
                    30, 80
                )
                
                P["state", number] = 1
            }
            break
        
        case 1,
            local DeltaTime = systime() - P["systimeOld", number]
            P["systimeOld", number] = systime()
            
            P["score", number] = P["score", number] + P["speed", number] * DeltaTime
            
            P["circlePos", number] = P["circlePos", number] + (DeltaTime * P["speed", number]) ^ 0.5
            
            if (P["impulse", number] > 0) {
                P["impulse", number] = clamp(P["impulse", number] - 2 * DeltaTime, 0, 1)
            }
            
            P["scopeText", table]["text", string] = int(P["score", number]):toString()
            xdraw(P["scopeText", table])
            
            P["circle", table]["color", vector] = hsv2rgb((systime() * 18) % 360, 1, 1)
            P["circle", table]["size", vector2] = vec2(P["ballSize", number] * min(1, (sin(P["circlePos", number]) + 3 + P["impulse", number]) / 4))
            xdraw(P["circle", table])
            
            local Cursor = xcursor()
            if (xkeyUse() != P["egpUseOld", number]) {
                P["egpUseOld", number] = xkeyUse()
                
                if (xkeyUse()) {
                    local Res = P["xframe", table]["size", vector2]
                    
                    if (inrange(Cursor, Res * vec2(1 / 3, 0), Res)) {
                        local Pos = int(Cursor[1] / Res[1] * 3) + int(Cursor[2] / Res[2] * 5) * 2
                        
                        if (P["score", number] >= P["costs", array][Pos, number]) {
                            P["score", number] = P["score", number] - P["costs", array][Pos, number]
                            P["speed", number] = P["speed", number] + P["boosts", array][Pos, number]
                        }
                    }
                    
                    elseif (inrange(Cursor, vec2(Res[1] / 5, 0), Res * vec2(1 / 3, 1))) {
                        P["score", number] = P["score", number] + 1
                        
                        P["impulse", number] = 1
                    }
                }
            }
            break
    }
}
