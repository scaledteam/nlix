#
# Created by scaled
#

@name xradar

#ifdef findInSphere(vector, number)
xregister("real", "xradar")

P2F["xradar", string] = "xradar"

function xradar() {
    switch (P["state", number]) {
        case 0,
            if (xcanCreate(11)) {
                local Res = P["xframe", table]["size", vector2]
                
                xcreate(table(
                    "type" = "box",
                    "size" = Res,
                    "color" = vec()
                ))
                
                P["texts", table] = table()
                for (I = 1, 10) {
                    P["texts", table]:pushTable(xcreate(table("type" = "text", "sizeNum" = 12)))
                }
                
                P["distance", number] = 2000
                P["multiplier", number] = min(Res[1], Res[2]) / P["distance", number] / 2 * sqrt(2)
                
                P["state", number] = 1
            }
            break
        
        case 1,
            if (systime() > P["nextUpdate", number]) {
                #local Entity = P["device", wirelink]:entity()
                local Entity = entity()
                local Pos = Entity:pos()
                
                findIncludeClass("player")
                    findInSphere(Pos, P["distance", number])
                findClearWhiteClassList()
                
                findSortByDistance(Pos)
                
                local Res = P["xframe", table]["size", vector2]
                local Offset = Res / 2
                
                local FindToArray = findToArray()
                local Count = min(FindToArray:count(), 10)
                for (I = 1, Count) {
                    local Object = P["texts", table][I, table]
                    
                    #Object["pos", vector2] = clamp(vec2(FindToArray[I, entity]:pos() - Pos):rotate(90 - Entity:angles()[2]) * vec2(-1, 1) * P["multiplier", number] + Offset, vec2(), Res - vec2(0, 12))
                    Object["pos", vector2] = clamp(shift(vec2(entity():toLocal(FindToArray[I, entity]:pos()))) * P["multiplier", number] + Offset, vec2(), Res - vec2(0, 12))
                    
                    if (Object["pos", vector2][1] > Offset[1]) {
                        Object["text", string] = FindToArray[I, entity]:name() + " '"
                        Object["align", vector2] = vec2(2, 0)
                    }
                    else {
                        Object["text", string] = "' " + FindToArray[I, entity]:name()
                        Object["align", vector2] = vec2()
                    }
                    
                    xdraw(Object)
                }
                
                local I = P["countOld", number]
                while (I > Count) {
                    local Object = P["texts", table][I, table]
                    
                    Object["text", string] = ""
                    xdraw(Object)
                    
                    I--
                }
                P["countOld", number] = Count
                
                P["nextUpdate", number] = systime() + 0.5
            }
            break
    }
}
#endif
