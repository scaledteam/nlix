#
# Created by scaled
#

@name libx

S["xmenu", table] = table()

function xregister(Category:string, ProgramName:string) {
    if (S["xmenu", table]:exists(Category)) {
        S["xmenu", table][Category, array]:pushString(ProgramName)
    }
    else {
        S["xmenu", table][Category, array] = array(ProgramName)
    }
}


function table xcreate(Type:string) {
    if (P["xobjects", table]:count() > 0) {
        local Device = P["xdevice", wirelink]
        
        local Object = P["xobjects", table]:removeTable(1)
        local Id = Object["id", number]
        Object["type", string] = Type
        
        switch (Type) {
            case "box", case "frame", Device:egpBox(Id, vec2(), vec2()) break
            case "circle", Device:egpCircle(Id, vec2(), vec2()) break
            case "line", Device:egpLine(Id, vec2(), vec2()) break
            case "text",
                Device:egpText(Id, "", vec2())
                Object["sizeNum", number] = 20
                Device:egpSize(20 * P["xparam", table]["textMultiplier", number])
                break
            case "textLayout", Device:egpTextLayout(Id, "", vec2(), vec2()) break
            case "poly", Device:egpPoly(Id, vec2(), vec2(), vec2()) break
            case "polyOutLine", Device:egpPolyOutline(Id, vec2(), vec2(), vec2()) break
            case "lineStrip", Device:egpLineStrip(Id, vec2(), vec2(), vec2()) break
            default, return NULL
        }
        
        Device:egpParent(Id, Object["parent", table]["id", number])
        
        return Object
    }
    else {
        return NULL
    }
}

function table:xredraw() {
    local Device = P["xdevice", wirelink]
    
    local Id = This["id", number]
    local Type = This["type", string]
    switch (Type) {
        case "box",
            Device:egpBox(Id, This["pos", vector2], This["size", vector2])
            break
        
        case "frame",
            Device:egpBox(Id, This["pos", vector2], vec2())
            break
        
        case "circle",
            Device:egpCircle(Id, This["pos", vector2], This["size", vector2])
            break
        
        case "line", 
            Device:egpLine(Id, This["pos", vector2], This["size", vector2])
            Device:egpSize(Id, This["sizeNum", number])
            break
        
        case "text",
            Device:egpText(Id, This["text", string], This["pos", vector2])
            Device:egpFont(Id, P["monospaced", number] ? "Courier New" : "")
            Device:egpAlign(Id, This["align", vector2][1], This["align", vector2][2])
            Device:egpSize(Id, This["sizeNum", number] * P["xparam", table]["textMultiplier", number])
            break
        
        case "textLayout", 
            Device:egpTextLayout(Id, This["text", string], This["pos", vector2], This["size", vector2])
            Device:egpFont(Id, P["monospaced", number] ? "Courier New" : "")
            Device:egpAlign(Id, This["align", vector2][1], This["align", vector2][2])
            Device:egpSize(Id, This["sizeNum", number] * P["xparam", table]["textMultiplier", number])
            break
        
        case "poly",
            Device:egpPoly(Id, This["verticles", array])
            break
        
        case "polyOutLine",
            Device:egpPolyOutline(Id, This["verticles", array])
            Device:egpSize(Id, This["sizeNum", number])
            break
        
        case "lineStrip",
            Device:egpLineStrip(Id, This["verticles", array])
            Device:egpSize(Id, This["sizeNum", number])
            break
        
        case "",
            Device:egpLine(Id, vec2(), vec2())
            break
        default,
    }
    
    Device:egpColor(Id, This["color", vector])
    Device:egpParent(Id, This["parent", table]["id", number])
}

function table table:xpos(Pos:vector2) {
    This["pos", vector2] = Pos
    P["xdevice", wirelink]:egpPos(This["id", number], Pos)
    return This
}

function table table:xsize(Size:vector2) {
    This["size", vector2] = Size
    P["xdevice", wirelink]:egpSize(This["id", number], Size)
    return This
}

function table table:xsize(Size) {
    This["sizeNum", number] = Size
    P["xdevice", wirelink]:egpSize(This["id", number], Size * P["xparam", table]["textMultiplier", number])
    return This
}

function table table:xtext(Text:string) {
    This["text", string] = Text
    P["xdevice", wirelink]:egpSetText(This["id", number], Text)
    return This
}

function table table:xcolor(Color:vector) {
    This["color", vector] = Color
    P["xdevice", wirelink]:egpColor(This["id", number], Color)
    return This
}

function table table:xalign(Align:vector2) {
    This["align", vector2] = Align
    P["xdevice", wirelink]:egpAlign(This["id", number], Align[1], Align[2])
    return This
}

function table table:xmonospaced(Monospaced) {
    This["monospaced", number] = Monospaced
    P["xdevice", wirelink]:egpFont(This["id", number], Monospaced ? "Courier New" : "")
    return This
}

function table table:xparent(Parent:table) {
    This["parent", table] = Parent
    P["xdevice", wirelink]:egpParent(This["id", number], Parent["id", number])
    return This
}

function table table:xverticles(Verticles:array) {
    This["verticles", array] = Verticles
    switch (This["type", string]) {
        case "poly", P["xdevice", wirelink]:egpPoly(This["id", number], Verticles) break
        case "polyOutLine", P["xdevice", wirelink]:egpPolyOutline(This["id", number], Verticles) break
        case "lineStrip", P["xdevice", wirelink]:egpLineStrip(This["id", number], Verticles) break
        default,
    }
    return This
}


function vector2 xcursor() {
    local Frame = P["xframe", table]
    local Device = P["xdevice", wirelink]
    
    if (!Frame:exists("parent")) {
        if (systime() > Frame["cursorTimer", number]) {
            #ifdef findByClass(string)
            
            findByClass("player")
            findSortByDistance(Device:entity():pos())
            Frame["cursorUser", entity] = find()
            
            #else
            
            local ScreenPos = Device:entity():pos()
            
            local User = owner():pos()
            local Distance = ScreenPos:distance(User)
            
            foreach (I, Player:entity = players()) {
                local TempDistance = ScreenPos:distance(Player:pos())
                if (TempDistance < Distance) {
                    Distance = TempDistance
                    User = Player
                }
            }
            
            Frame["cursorUser", entity] = User
            
            #endif
            
            Frame["cursorTimer", number] = systime() + 1
        }
        
        Frame["cursor", vector2] = Device:egpCursor(Frame["cursorUser", entity])
        Frame["keyUse", number] = Frame["cursorUser", entity]:keyUse()
    }
    else {
        local Cursor = Frame["parent", table]["cursor", vector2]
        if (Cursor != vec2(-1)) {
            Frame["cursor", vector2] = Cursor - Device:egpPos(Frame["id", number])
        }
        else {
            Frame["cursor", vector2] = Cursor
        }
        
        Frame["keyUse", number] = Frame["parent", table]["keyUse", number]
    }
    return Frame["cursor", vector2]
}

function number xkeyUse() {
    return P["xframe", table]["keyUse", number]
}

function table xexec(ProgramName:string, Size:vector2) {
    local Program = exec(ProgramName)
    
    Program["xframe", table] = xcreate("frame"):xparent(P["xframe", table])
    Program["xframe", table]["size", vector2] = Size
    
    Program["xparam", table] = P["xparam", table]
    Program["xobjects", table] = table()
    Program["xobjectsAll", table] = P["xobjectsAll", table]
    Program["xdevice", wirelink] = P["xdevice", wirelink]
    
    return Program
}


function number table:xxlastObjectId() {
    return This["id", number] + This["count", number]
}

function number xxlastObjectId() {
    return P["xobjectsAll", table]:count()
}

function number table:xxobjectsLeft() {
    return egpMaxObjects() - This:xxlastObjectId()
}

function number xxobjectsLeft() {
    return egpMaxObjects() - xxlastObjectId()
}

function table xnewObject(Id) {
    return table("id" = Id, "parent" = P["xframe", table], "color" = vec(255))
}

function number xcanCreate(Count) {
    for (I = 1, Overload) {
        switch (P["xworkerState", number]) {
            case 0,
                if (!P["xframe", table]:exists("parent")) {
                    if (xxobjectsLeft() > Count) {
                        P["xworkerState", number] = 1
                    }
                    else {
                        return 0
                    }
                }
                else {
                    if (P["xframe", table]:xxlastObjectId() >= xxlastObjectId()) {
                        P["xworkerState", number] = 1
                    }
                    else {
                        P["xshiftStart", number] = P["xframe", table]:xxlastObjectId()
                        P["xobjectsTemp", table] = table()
                        
                        P["xcounter", number] = P["xshiftStart", number]
                        P["xworkerState", number] = 2
                    }
                }
                break
            
            # For last objects
            case 1,
                if (P["xobjects", table]:count() < Count) {
                    local Object = xnewObject(P["xobjectsAll", table]:count() + 1)
                    P["xobjects", table]:pushTable(Object)
                    P["xobjectsAll", table]:pushTable(Object)
                    
                    P["xframe", table]["count", number] = P["xframe", table]["count", number] + 1
                }
                else {
                    P:remove("xworkerState")
                    return 1
                }
                break
            
            # For middle objects
            case 2,
                P["xcounter", number] = P["xcounter", number] + 1
                
                if (P["xcounter", number] <= P["xobjectsAll", table]:count()) {
                    local Id = P["xcounter", number]
                    P["xobjectsTemp", table]:pushTable(P["xobjectsAll", table][Id, table])
                }
                else {
                    P["xcounter", number] = 0
                    P["xworkerState", number] = 3
                }
                break
            
            case 3,
                P["xcounter", number] = P["xcounter", number] + 1
                
                if (P["xcounter", number] <= Count) {
                    local Id = P["xcounter", number] + P["xshiftStart", number]
                    local Object = xnewObject(Id)
                    Object:xredraw()
                    
                    P["xobjectsAll", table][Id, table] = Object
                    P["xobjects", table]:pushTable(Object)
                }
                else {
                    P["xcounter", number] = 0
                    P["xworkerState", number] = 4
                }
                break
            
            case 4,
                P["xcounter", number] = P["xcounter", number] + 1
                
                if (P["xobjectsTemp", table]:count() > 0) {
                    local Object = P["xobjectsTemp", table]:removeTable(1)
                    local Id = P["xcounter", number] + P["xshiftStart", number] + Count
                    
                    Object["id", number] = Id
                    P["xobjectsAll", table][Id, table] = Object
                    
                    Object:xredraw()
                }
                else {
                    P:remove("xworkerState")
                    P:remove("xcounter")
                    P:remove("xobjectsTemp")
                    return 1
                }
                break
        }
    }
    return 0
}

function table:xclear() {
    if (This["id", number] != 0) {
        local Id = This["id", number]
        This:clear()
        P["xdevice", wirelink]:egpLine(Id, vec2(), vec2())
    }
}

function table:xremove() {
    This:xclear()
    
    if (!P["xremove", table]:isValid()) {
        local Program = exec("xremove")
        P["xremove", table] = Program
        
        Program["xobjectsAll", table] = P["xobjectsAll", table]
        Program["xdevice", wirelink] = P["xdevice", wirelink]
    }
}
