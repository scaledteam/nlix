#
# Created by scaled
#

@name libegp

# Output
function egpBox(Id, Pos:vector2, Size:vector2) {
    local Out = P["out", array]
    Out:pushString("box")
    Out:pushNumber(Id)
    Out:pushVector2(Pos)
    Out:pushVector2(Size)
}

function egpCircle(Id, Pos:vector2, Size:vector2) {
    local Out = P["out", array]
    Out:pushString("circle")
    Out:pushNumber(Id)
    Out:pushVector2(Pos)
    Out:pushVector2(Size)
}

function egpText(Id, Text:string, Pos:vector2, Size:vector2) {
    local Out = P["out", array]
    Out:pushString("text")
    Out:pushNumber(Id)
    Out:pushString(Text)
    Out:pushVector2(Pos)
    Out:pushVector2(Size)
}

function egpLine(Id, Pos:vector2, Size:vector2) {
    local Out = P["out", array]
    Out:pushString("line")
    Out:pushNumber(Id)
    Out:pushVector2(Pos)
    Out:pushVector2(Size)
}

function egpTriangle(Id, Point1:vector2, Point2:vector2, Point3:vector2) {
    local Out = P["out", array]
    Out:pushString("poly")
    Out:pushNumber(Id)
    Out:pushVector2(Point1)
    Out:pushVector2(Point2)
    Out:pushVector2(Point3)
}


function egpPos(Id, Pos:vector2) {
    P["out", array]:pushString("pos")
    P["out", array]:pushNumber(Id)
    P["out", array]:pushVector2(Pos)
}

function egpSize(Id, Size:vector2) {
    P["out", array]:pushString("size")
    P["out", array]:pushNumber(Id)
    P["out", array]:pushVector2(Size)
}

function egpSize(Id, Size) {
    P["out", array]:pushString("sizeNumber")
    P["out", array]:pushNumber(Id)
    P["out", array]:pushNumber(Size)
}

function egpText(Id, Text:string) {
    P["out", array]:pushString("setText")
    P["out", array]:pushNumber(Id)
    P["out", array]:pushString(Text)
}

function egpColor(Id, Color:vector) {
    P["out", array]:pushString("color")
    P["out", array]:pushNumber(Id)
    P["out", array]:pushVector(Color)
}

function egpParent(Id, Id2) {
    P["out", array]:pushString("parent")
    P["out", array]:pushNumber(Id)
    P["out", array]:pushNumber(Id2)
}

function egpRemove(Id) {
    P["out", array]:pushString("remove")
    P["out", array]:pushNumber(Id)
}

# Input
function vector2 egpResolution() {
    return P["in", array][1, vector2]
}

function number egpMax() {
    return P["in", array][2, number]
}

function vector2 egpCursor() {
    return P["in", array][3, vector2]
}

function number egpWait() {
    return P["out", array]:count() == 0
}

function number egpReady() {
    return P["in", array]:count() > 0
}
