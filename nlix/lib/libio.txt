#
# Created by scaled
#

@name libio
@persist [ERASE ERASE1]:string

ERASE  = toChar(15) + "erase"
ERASE1 = toChar(15) + "erase1"

function out(Text:string) {
    P["out", array]:pushString(Text)
}

function number wait() {
    return P["in", array]:count() > 0
}

function string in() {
    return P["in", array]:shiftString()
}

function erase() {
    P["out", array]:pushString(ERASE1)
}

function erase(Count) {
    P["out", array]:pushString(ERASE)
    P["out", array]:pushNumber(Count)
}


function string arg() {
    return P["args", array]:shiftString()
}

function number argsExist() {
    return P["args", array]:count() > 0
}


#[function array table:setOut(Out:array) {
    This["out", array] = Out
    return Out
}

function array table:setIn(In:array) {
    This["in", array] = In
    return In
}

function array table:setOut() {
    This["out", array] = array()
    return This["out", array]
}

function array table:setIn() {
    This["in", array] = array()
    return This["in", array]
}


function table table:out2in(Parent:table) {
    This["out", array] = Parent["in", array]
    return This
}

function table table:in2out(Parent:table) {
    This["in", array] = Parent["out", array]
    return This
}

function table table:in2in(Parent:table) {
    This["in", array] = Parent["in", array]
    return This
}

function table table:out2out(Parent:table) {
    This["out", array] = Parent["out", array]
    return This
}
