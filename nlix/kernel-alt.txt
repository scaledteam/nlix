#
# Created by scaled
#

@name nlix

@persist [G L S]:table
@persist [Ps P]:table PName:string
@persist KPerf KState
@persist PtoFunction:table

if (!tickClk()) {
    if (clk()) {
        interval(tickInterval())
        
        while (perf(KPerf)) {
            KState++
            switch (KState) {
                case 1, #include "nlix/lib/libobject" break
                case 2, #include "nlix/lib/libkernel" break
                case 3, #include "nlix/lib/libdevices" break
                case 4, #include "nlix/lib/libio" break
                
                case 5, #include "nlix/lib/liboverload" break
                case 6, #include "nlix/lib/libfs" break
                case 7, #include "nlix/lib/liborder" break
                
                case 9, #include "nlix/lib/libegp" break
                case 10, #include "nlix/lib/libx" break
                
                case 11, #include "nlix/init/g" break
                #case 12, SYSTEM_NAME = "system0" #include "nlix/init/sync" break
                
                case 13, #include "nlix/init/autostart" break
                case 14, #include "nlix/init/fstab" break
                
                case 20, PtoFunction["term", string] = "term" function term() { #include "nlix/bin/term" } break
                case 21, PtoFunction["skbd", string] = "skbd" function skbd() { #include "nlix/bin/skbd" } break
                
                case 22, PtoFunction["hotplugd", string] = "hotplugd" function hotplugd() { #include "nlix/bin/hotplugd" } break
                
                case 23, PtoFunction["sh", string] = "sh" function sh() { #include "nlix/bin/sh" } break
                
                case 24, PtoFunction["echo", string] = "echo" function echo() { #include "nlix/bin/echo" } break
                
                case 25, PtoFunction["plist", string] = "plist" function plist() { #include "nlix/bin/plist" } break
                case 26, PtoFunction["dlist", string] = "dlist" function dlist() { #include "nlix/bin/dlist" } break
                
                case 27, PtoFunction["perf", string] = "setperf" function setperf() { #include "nlix/bin/perf" } break
                case 28, PtoFunction["overload", string] = "overload" function overload() { #include "nlix/bin/overload" } break
                
                case 29, PtoFunction["rund", string] = "rund" function rund() { #include "nlix/bin/rund" } break
                case 30, PtoFunction["kill", string] = "kill" function kill() { #include "nlix/bin/kill" } break
                case 31, PtoFunction["reboot", string] = "reboot" function reboot() { #include "nlix/bin/reboot" } break
                case 32, PtoFunction["poweroff", string] = "poweroff" function poweroff() { #include "nlix/bin/poweroff" } break
                
                case 33, PtoFunction["print-pi", string] = "printpi" function printpi() { #include "nlix/bin/print-pi" } break
                
                # Files
                case 34, PtoFunction["ls", string] = "ls" function ls() { #include "nlix/bin/ls" } break
                case 35, PtoFunction["cat", string] = "cat" function cat() { #include "nlix/bin/cat" } break
                case 36, PtoFunction["touch", string] = "touch" function touch() { #include "nlix/bin/touch" } break
                case 37, PtoFunction["rm", string] = "rm" function rm() { #include "nlix/bin/rm" } break
                
                case 37, PtoFunction["cp", string] = "cp" function cp() { #include "nlix/bin/cp" } break
                
                #ifdef httpRequest(string)
                case 38, PtoFunction["wget", string] = "wget" function wget() { #include "nlix/bin/wget" } break
                #endif
                
                case 39, PtoFunction["fstable", string] = "fstable" function fstable() { #include "nlix/bin/fstable" } break
                #ifdef fileRead()
                case 40, PtoFunction["fsreal", string] = "fsreal" function fsreal() { #include "nlix/bin/fsreal" } break
                #endif
                
                # EGP
                case 41, PtoFunction["egp", string] = "egp" function egp() { #include "nlix/bin/egp" } break
                case 42, PtoFunction["kbd", string] = "kbd" function kbd() { #include "nlix/bin/kbd" } break
                
                case 43, PtoFunction["estart", string] = "estart" function estart() { #include "nlix/bin/estart" } break
                
                case 44, PtoFunction["eclock", string] = "eclock" function eclock() { #include "nlix/bin/eclock" } break
                case 45, PtoFunction["eeyes", string] = "eeyes" function eeyes() { #include "nlix/bin/eeyes" } break
                
                case 46, PtoFunction["etiles", string] = "etiles" function etiles() {#include "nlix/bin/etiles" } break
                case 47, PtoFunction["eterm", string] = "eterm" function eterm() { #include "nlix/bin/eterm" } break
                
                case 48, PtoFunction["eclicker", string] = "eclicker" function eclicker() { #include "nlix/bin/eclicker" } break
                case 49, PtoFunction["eobj", string] = "eobj" function eobj() { #include "nlix/bin/eobj" } break
                
                # Other
                case 50, PtoFunction["bc", string] = "bc" function bc() { #include "nlix/bin/bc" } break
                
                #ifdef soundURLload(string, string, number, number, entity)
                case 51, PtoFunction["surl", string] = "surl" function surl() { #include "nlix/bin/surl" } break
                #endif
                
                #ifdef ranger(number)
                case 52, PtoFunction["digi-scan", string] = "digiscan" function digiscan() { #include "nlix/bin/digi-scan" } break
                #endif
                
                case 53, PtoFunction["x", string] = "x" function x() {#include "nlix/bin/x" } break
                case 54, PtoFunction["xstart", string] = "xstart" function xstart() { #include "nlix/bin/xstart" } break
                case 55, PtoFunction["xclock", string] = "xclock" function xclock() { #include "nlix/bin/xclock" } break
                case 56, PtoFunction["xres", string] = "xres" function xres() { #include "nlix/bin/xres" } break
                case 57, PtoFunction["xtiles", string] = "xtiles" function xtiles() { #include "nlix/bin/xtiles" } break
                
                case 58, KState = 1 runOnTick(1) break
                default,
            }
        }
    }
    elseif (first()) {
        KPerf = 5
        
        interval(tickInterval())
    }
}  
else {
    while (perf(KPerf)) {
        if (KState >= Ps:count()) {
            KState = 1
        }
        else {
            KState++
        }
        
        P = Ps[KState, table]
        if (P:exists("parent") & P["parent", table]:count() == 0) {
            end()
            continue
        }
        PName = P["type", string]
        
        if (PtoFunction:exists(PName)) {
            PtoFunction[PName, string]()
        }
        elseif (P:count() == 0) {
            if (Ps:count() > 0) {
                end()
            }
            else {
                runOnTick(0)
                break
            }
        }
        else {
            out("Program \"" + PName + "\" is not exist.\n")
            end()
        }
    }
}
