#
# Created by scaled
#

@name nlix

@persist [G L S]:table
@persist [Ps P]:table PName:string
@persist KPerf KState0 KState1

if (tickClk()) {
    switch (KState0) {
        case 0,
            while (perf(KPerf)) {
                KState1++
                switch (KState1) {
                    case 1, #include "nlix/lib/libobject" break
                    case 2, #include "nlix/lib/libprogram" break
                    case 3, #include "nlix/lib/libdevices" break
                    case 4, #include "nlix/lib/libio" break
                    
                    case 5, #include "nlix/lib/liboverload" break
                    case 6, #include "nlix/lib/libfs" break
                    case 7, #include "nlix/lib/liborder" break
                    
                    case 9, #include "nlix/lib/libegp" break
                    
                    case 10, #include "nlix/init/g" break
                    #case 11, SYSTEM_NAME = "system0" #include "nlix/init/sync" break
                    
                    case 13, #include "nlix/init/autostart" break
                    case 14, #include "nlix/init/fstab" break
                    
                    #case 15, #include "nlix/init/entity" break
                    case 17, KState0 = 1 KState1 = 0 break
                    default,
                }
            }
            break
        
        case 1,
            if (Ps:count() > 0) {
                while (perf(KPerf)) {
                    KState1++
                    
                    if (KState1 > Ps:count()) {
                        KState1 = 1
                    }
                    
                    P = Ps[KState1, table]
                    PName = P:type()
                    
                    switch (PName) {
                        case "term",        #include "nlix/bin/term" break
                        #case "kbd",         #include "nlix/bin/kbd" break
                        case "skbd",        #include "nlix/bin/skbd" break
                        
                        case "hotplugd",    #include "nlix/bin/hotplugd" break
                        
                        case "sh",          #include "nlix/bin/sh" break
                        
                        case "plist",       #include "nlix/bin/plist" break
                        case "dlist",       #include "nlix/bin/dlist" break
                        
                        case "perf",        #include "nlix/bin/perf" break
                        case "overload",    #include "nlix/bin/overload" break
                        
                        case "kill",        #include "nlix/bin/kill" break
                        case "reboot",      #include "nlix/bin/reboot" break
                        case "poweroff",    #include "nlix/bin/poweroff" break
                        
                        case "print-pi",    #include "nlix/bin/print-pi" break
                        
                        case "ls",          #include "nlix/bin/ls" break
                        case "cat",         #include "nlix/bin/cat" break
                        case "touch",       #include "nlix/bin/touch" break
                        case "rm",          #include "nlix/bin/rm" break
                        
                        case "cp",          #include "nlix/bin/cp" break
                        
                        case "egp",         #include "nlix/bin/egp" break
                        case "estart",      #include "nlix/bin/estart" break
                        
                        case "eclock",      #include "nlix/bin/eclock" break
                        case "eeyes",       #include "nlix/bin/eeyes" break
                        
                        case "etitles",     #include "nlix/bin/etitles" break
                        case "eterm",       #include "nlix/bin/eterm" break
                        
                        #ifdef httpRequest(string)
                        case "wget",        #include "nlix/bin/wget" break
                        #endif
                        
                        case "fstable",    #include "nlix/bin/fstable" break
                        #ifdef fileRead()
                        case "fsreal",     #include "nlix/bin/fsreal" break
                        #endif
                        
                        case "bc",          #include "nlix/bin/bc" break
                        
                        #ifdef soundURLload(string, string, number, number, entity)
                        case "surl",        #include "nlix/bin/surl" break
                        #endif
                        
                        case "",            end() break
                        default,
                            out("Program \"" + PName + "\" is not exist.\n")
                            end()
                            break
                    }
                }
            }
            else {
                runOnTick(0)
            }
            break
    }
    exit()
}

if (first()) {
    KPerf = 5
    runOnTick(1)
}
