#
# This E2 made by scaled
#

@name driver-terminal

if (!APPS_INFO:exists("driver-terminal")) {
    local Info = table()
    
    APPS_INFO["driver-terminal", table] = Info
}

if (app("driver-terminal")) {
    switch (ThisAppState) {
        # Initialize
        case 0,
            appS("console-text",
                "Welcome to the Nlix operation system!\n"
                + "Your workspace named as \"" + ThisWorkspace["name", string] + "\"\n"
            )
            
            local ScreensCount = ThisWorkspace["devices", table]["console-screens", table]:count()
            
            # Init first screen
            local ScreenId = 0
            for (I = 1, ThisWorkspace["devices", table]["console-screens", table]:count()) {
                if (!ThisWorkspace["devices", table]["console-screens", table][I, table]["busy", number]) {
                    ScreenId = I
                    break
                }
            }
            
            if (ScreenId != 0) {
                local ScreenDevice = ThisWorkspace["devices", table]["console-screens", table][ScreenId, table]
                local Screen = ScreenDevice["port", wirelink]
                switch (ScreenDevice["type", string]) {
                    case "egp-screen",
                        ScreenDevice["busy", number] = 1
                        
                        Screen:egpClear()
                        Screen:egpDrawTopLeft(1)
                        
                        Screen:egpTextLayout(1, appS("console-text"), vec2(), vec2(512))
                        Screen:egpFont(1, FONT_MONOSPACED)
                        
                        appT("screen-device", ScreenDevice)
                        break
                    
                    case "console-screen",
                        ScreenDevice["busy", number] = 1
                        
                        Screen[2041] = 1
                        Screen:writeString(appS("console-text"), 0, 0)
                        
                        appT("screen-device", ScreenDevice)
                        break
                    
                    case "virtual",
                        ScreenDevice["busy", number] = 1
                        
                        ScreenDevice["new-output", string] = appS("console-text")
                        
                        appT("screen-device", ScreenDevice)
                        break
                }
            }
            else {
                Dmesg += "Failed to find free console screen on workspace " + ThisWorkspace["name", string] + "."
                appCloseSelf()
            }
            
            appNextState()
            break
        
        # Wait events
        case 1,
            #for (I = 1, TICKS_INSIDE) {
                if (waitAnyEvent()) {
                    local ScreenDevice = appT("screen-device")
                    local ScreenType = ScreenDevice["type", string]
                    
                    local Command = getEventDataS()
                    switch (Command) {
                        case "clear",
                            switch (ScreenType) {
                                case "egp-screen",
                                    ScreenDevice["port", wirelink]:egpSetText(1, "")
                                    break
                                
                                case "console-screen",
                                    ScreenDevice["port", wirelink][2041] = 1
                                    break
                                
                                case "virtual",
                                    ScreenDevice["new-erase", number] = appS("console-text"):length()
                                    break
                            }
                            
                            appS("console-text", "")
                            break
                        
                        case "print",
                            local NewPrint = getEventDataS()
                            appS("console-text", appS("console-text") + NewPrint)
                            
                            switch (ScreenType) {
                                case "egp-screen",
                                    ScreenDevice["port", wirelink]:egpSetText(1, appS("console-text"))
                                    break
                                
                                case "console-screen",
                                    ScreenDevice["port", wirelink]:writeString(appS("console-text"), 0, 0)
                                    break
                                
                                case "virtual",
                                    ScreenDevice["new-output", string] = NewPrint
                                    break
                            }
                            break
                        
                        case "erase",
                            local EraseCount = getEventDataN()
                            appS("console-text", appS("console-text"):left(appS("console-text"):length() - EraseCount))
                            
                            switch (ScreenType) {
                                case "egp-screen",
                                    ScreenDevice["port", wirelink]:egpSetText(1, appS("console-text"))
                                    break
                                
                                case "console-screen",
                                    ScreenDevice["port", wirelink][2041] = 1
                                    ScreenDevice["port", wirelink]:writeString(appS("console-text"), 0, 0)
                                    break
                                
                                case "virtual",
                                    ScreenDevice["new-erase", number] = EraseCount
                                    break
                            }
                            break
                            
                    }
                }
            #    else {
            #        break
            #    }
            #}
            break
    }
}

