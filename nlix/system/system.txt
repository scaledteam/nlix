#
# This E2 made by scaled
#

@name system

# Persists
@persist SysStartTime
@persist Workspaces:table
@persist SysPerf
@persist [Dmesg]:string
@persist AllData:gtable
@persist [AUTOSTART_TERMINAL AUTOSTART_EGP]:array
@persist FONT_MONOSPACED:string

function log(Text:string) {
    Dmesg += Text
}

function createWorkspace(Name:string, Ports:array) {
    Workspaces[Name, table] = table()
    Workspaces[Name, table]["name", string] = Name
    Workspaces[Name, table]["autostart", array] = AUTOSTART_EGP
    
    
    Workspaces[Name, table]["ports", array] = Ports
    
    Workspaces[Name, table]["devices", table] = table()
    Workspaces[Name, table]["devices", table]["console-screens", table] = table()
    Workspaces[Name, table]["devices", table]["egp-screens", table] = table()
    Workspaces[Name, table]["devices", table]["digital-screens", table] = table()
    Workspaces[Name, table]["devices", table]["keyboards", table] = table()
    Workspaces[Name, table]["devices", table]["cursors", table] = table()
}

function initDrivers() {
    foreach (I, Workspace:table = Workspaces) {
        foreach (I, Port:wirelink = Workspace["ports", array]) {
            switch (Port:entity():type()) {
                case "gmod_wire_egp",
                    local Device = table()
                    Device["type", string] = "egp-screen"
                    
                    Device["resolution", vector2] = vec2(512)
                    Device["max-objects", number] = 300
                    
                    Device["port", wirelink] = Port
                    Device["busy", number] = 0
                    
                    Workspace["devices", table]["console-screens", table]:pushTable(Device)
                    Workspace["devices", table]["egp-screens", table]:pushTable(Device)
                    Workspace["devices", table]["digital-screens", table]:pushTable(Device)
                    Workspace["devices", table]["cursors", table]:pushTable(Device)
                    
                    log("egp-screen for workspace \"" + Workspace["name", string] + "\" initialized\n")
                    break
                
                case "gmod_wire_consolescreen",
                    local Device = table()
                    Device["type", string] = "console-screen"
                    Device["resolution", vector2] = vec2(30, 18)
                    Device["port", wirelink] = Port
                    Device["busy", number] = 0
                    
                    Workspace["devices", table]["console-screens", table]:pushTable(Device)
                    Workspace["devices", table]["digital-screens", table]:pushTable(Device)
                    
                    log("console-screen for workspace \"" + Workspace["name", string] + "\" initialized\n")
                    break
                
                case "gmod_wire_keyboard",
                    local Device = table()
                    Device["type", string] = "keyboard"
                    Device["port", wirelink] = Port
                    Device["busy", number] = 0
                    
                    Workspace["devices", table]["keyboards", table]:pushTable(Device)
                    
                    log("keyboard for workspace \"" + Workspace["name", string] + "\" initialized\n")
                    break
            }
        }
    }
}

function halt() {
    AllData:clear()
    Workspaces:clear()
    Apps:clear()
    
    runOnTick(0)
}

function init() {
    # Settings
    SysPerf = 50
    
    FONT_MONOSPACED = "Courier New"
    
    AUTOSTART_TERMINAL = array(
        "driver-terminal",
        "driver-keyboard",
        "simple-keyboard",
        "sh"
    )
    
    AUTOSTART_EGP = array(
        "driver-egp",
        "driver-cursor",
        "driver-keyboard",
        "egp-wm"
        #"egp-terminal"
    )
    
    SysStartTime = systime()
    
    # Save data to gtable
    AllData = gTable("nlix")
    if (AllData["version", number] == 0.12) {
        Workspaces = AllData["workspaces", table]
        Apps = AllData["apps", table]
        APPS_INFO = AllData["APPS_INFO", table]
        runOnTick(1)
    }
    elseif (Port0 | Port1 | Port2 | Port3 | Port4 | Port5 | Port6 | Port7) {
        AllData["workspaces", table] = Workspaces
        AllData["apps", table] = Apps
        AllData["APPS_INFO", table] = APPS_INFO
        AllData["version", number] = 0.1
        AllData["this-app-id", number] = 0
        AllData["app-closed", array] = array()
        AllData["app-count", number] = 0
    
        if (Port0 | Port1 | Port2 | Port3) {
            createWorkspace("ws1", array(Port0, Port1, Port2, Port3))
        }
        
        if (Port4 | Port5 | Port6 | Port7) {
            createWorkspace("ws2", array(Port4, Port5, Port6, Port7))
        }
        
        initDrivers()
        runOnTick(1)
    }
}
