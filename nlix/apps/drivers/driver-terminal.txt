#
# This E2 made by scaled
#

@name driver-terminal

if (!APPS_INFO:exists("driver-terminal")) {
    local Info = table()
    
    APPS_INFO["driver-terminal", table] = Info
}

if (app("driver-terminal")) {
    switch (ThisAppState) {
        # Initialize
        case 0,
            # Init first screen
            #appS("consoleText", "Welcome to the Nlix operation system!\n")
            
            local Device = findDeviceByType("console-screen")
            
            if (Device != NULL) {
                Device["busy", number] = 1
                local Screen = Device["port", wirelink]
                Screen[2041] = 1
                Screen:writeString(appS("consoleText"), 0, 0)
                
                appT("device", Device)
                appNextState()
            }
            else {
                local Device = findDeviceByType("egp-screen")
                
                if (Device != NULL) {
                    Device["busy", number] = 1
                    local Screen = Device["port", wirelink]
                    Screen:egpClear()
                    Screen:egpDrawTopLeft(1)
                    
                    Screen:egpTextLayout(1, appS("consoleText"), vec2(), vec2(512))
                    Screen:egpFont(1, FONT_MONOSPACED)
                    
                    appT("device", Device)
                    appNextState()
                }
                else {
                    local Device = findDeviceByType("virtual-terminal")
                    
                    if (Device != NULL) {
                        Device["busy", number] = 1
                        Device["new-output", string] = appS("consoleText")
                        
                        appT("device", Device)
                        appNextState()
                    }
                }
            }
            
            break
        
        # Wait events
        case 1,
            local Device = appT("device")
            if (Device:isValid()) {
                if (waitAnyEvent()) {
                    local ScreenType = Device["type", string]
                    
                    local Command = getEventString()
                    switch (Command) {
                        case "clear",
                            switch (ScreenType) {
                                case "egp-screen",
                                    Device["port", wirelink]:egpSetText(1, "")
                                    break
                                
                                case "console-screen",
                                    Device["port", wirelink][2041] = 1
                                    break
                                
                                case "virtual-terminal",
                                    Device["new-erase", number] = appS("consoleText"):length()
                                    break
                            }
                            
                            appS("consoleText", "")
                            break
                        
                        case "print",
                            local NewPrint = getEventString()
                            appS("consoleText", appS("consoleText") + NewPrint)
                            
                            switch (ScreenType) {
                                case "egp-screen",
                                    Device["port", wirelink]:egpSetText(1, appS("consoleText"))
                                    break
                                
                                case "console-screen",
                                    Device["port", wirelink]:writeString(appS("consoleText"), 0, 0)
                                    break
                                
                                case "virtual-terminal",
                                    Device["new-output", string] = NewPrint
                                    break
                            }
                            break
                        
                        case "erase",
                            local EraseCount = getEventNumber()
                            appS("consoleText", appS("consoleText"):left(appS("consoleText"):length() - EraseCount))
                            
                            switch (ScreenType) {
                                case "egp-screen",
                                    Device["port", wirelink]:egpSetText(1, appS("consoleText"))
                                    break
                                
                                case "console-screen",
                                    Device["port", wirelink][2041] = 1
                                    Device["port", wirelink]:writeString(appS("consoleText"), 0, 0)
                                    break
                                
                                case "virtual-terminal",
                                    Device["new-erase", number] = EraseCount
                                    break
                            }
                            break
                        
                        case "exit",
                            Device["busy", number] = 0
                            appClose()
                            
                            switch (ScreenType) {
                                case "egp-screen",
                                    Device["port", wirelink]:egpClear()
                                    break
                                
                                case "console-screen",
                                    Device["port", wirelink][2041] = 1
                                    break
                                
                                case "virtual-terminal",
                                    Device["new-erase", number] = appS("consoleText"):length()
                                    break
                            }
                            break
                    }
                }
            }
            else {
                appSetState(0)
            }
            break
    }
}

