#
# Created by scaled
#

@name lib-long-math

function string lmPlus(N1:string, N2:string) {
    local Length = max(N1:length(), N2:length())
    local N1Rev = N1:reverse()
    local N2Rev = N2:reverse()
    
    local N = ""
    local Plus1 = 0
    for (I = 1, Length + 1) {
        local Temp = N1Rev[I]:toNumber() + N2Rev[I]:toNumber() + Plus1
        #print(Temp)
        
        if (Temp > 9) {
            Plus1 = 1
            Temp -= 10
        }
        elseif (Plus1) {
            Plus1 = 0
        }
        
        N += Temp:toString()
    }
    return N:reverse()
}

function string lmMinus(N1:string, N2:string) {
    local Length = max(N1:length(), N2:length())
    local N1Rev = N1:reverse()
    local N2Rev = N2:reverse()
    
    local N = ""
    local Plus1 = 0
    for (I = 1, Length + 1) {
        local Temp = N1Rev[I]:toNumber() + N2Rev[I]:toNumber() + Plus1
        #print(Temp)
        
        if (Temp > 9) {
            Plus1 = 1
            Temp -= 10
        }
        elseif (Plus1) {
            Plus1 = 0
        }
        
        N += Temp:toString()
    }
    return N:reverse()
}

#print("result", lmPlus("99999992", "7"))
print("result", lmMinus("99999992", "7"))
selfDestruct()
