#
# Created by scaled
#

@name lib-file
@persist Files:table 
@persist FileLoad:string FileLoadReady FileLoadType:string
@persist FileList:array FileListReady FileListType:string
@persist FILE_NO_LIST:array

Files = object("fakedir")

Files["testfile", table] = object("fakefile")
Files["testfile", table]["data", string] = "The magic word."

Files["dir", table] = object("fakedir")
Files["dir", table]["testfile2", string] = "1234"
Files["dir", table]["testdir", table] = object("fakedir")
Files["dir", table]["testdir", table]["1", table] = object("fakedir")
Files["dir", table]["testdir", table]["2", table] = object("fakedir")
Files["dir", table]["testdir", table]["3", table] = object("fakefile")
Files["dir", table]["testdir", table]["3", table]["data", string] = "Magic word 2."

Files["rdir", table] = object("realdir")
Files["rdir", table]["path", string] = ""

Files["rdir2", table] = object("realdir")
Files["rdir2", table]["path", string] = "test"

function table:afileListQuery(Path:string) {
    local PathExp = Path:explode("/")
    
    local Object = This[PathExp[1, string], table]
    local PathEnd = PathExp:concat("/", 2)
    
    FileListType = Object:type()
    switch (FileListType) {
        case "fakedir",
            if (PathEnd == "") {
                FileList = Object:keys()
                FileListReady = 1
            }
            else {
                Object:afileListQuery(PathEnd)
            }
            break
        
        case "realdir",
            fileList(Object["path", string] + "/" + PathEnd)
            break
        
        default,
    }
}

function afileListQuery(Path:string) {
    Files:afileListQuery(Path)
}

function number afileListIsReady() {
    switch (FileListType) {
        case "realdir",
            return fileLoadedList()
        
        case "fakedir",
            if (FileListReady) {
                FileListReady = 0
                return 1
            }
            else {
                return 0
            }
        
        default,
            return 0
    }
}

function array afileListGetList() {
    switch (FileListType) {
        case "realdir",
            return fileReadList()
        
        case "fakedir",
            return FileList
        
        default,
            return FILE_NO_LIST
    }
}

function table:afileLoadQuery(Path:string) {
    local PathExp = Path:explode("/")
    
    local Object = This[PathExp[1, string], table]
    local PathEnd = PathExp:concat("/", 2)
    
    FileLoadType = Object:type()
    switch (FileLoadType) {
        case "fakedir",
            Object:afileLoadQuery(PathEnd)
            break
        
        case "fakefile",
            FileLoad = Object["data", string]
            FileLoadReady = 1
            break
        
        case "realdir",
            fileLoad(Object["path", string] + "/" + PathEnd)
            print("dir", Object["path", string] + "/" + PathEnd)
            break
        
        case "realfile",
            fileLoad(Object["path", string] + "/" + PathEnd)
            print("file", Object["path", string] + "/" + PathEnd)
            break
        
        default,
    }
}

function afileLoadQuery(Path:string) {
    Files:afileLoadQuery(Path)
}

function number afileLoadIsReady() {
    switch (FileLoadType) {
        case "realdir",
            return fileLoaded()
        
        case "fakefile",
            if (FileLoadReady) {
                FileLoadReady = 0
                return 1
            }
            else {
                return 0
            }
        
        default,
            return 0
    }
}

function string afileLoadGetData() {
    switch (FileLoadType) {
        case "fakefile",
            return FileLoad
            
        case "realdir",
            return fileRead()
        
        default,
            return ""
    }
}
