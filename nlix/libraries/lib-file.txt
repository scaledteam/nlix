#
# Created by scaled
#

@name lib-file
@persist Files:table 
@persist FileLoad:string FileLoadReady FileLoadType:string
@persist FileList:array FileListReady FileListType:string
@persist FILE_NO_LIST:array

# File list
function table:afileListQuery(Path:string) {
    local PathExp = Path:explode("/")
    
    local Object = This[PathExp[1, string], table]
    local PathEnd = PathExp:concat("/", 2)
    
    if (PathExp[1, string] == "") {
        Object = This
    }
    
    FileListType = Object:type()
    switch (FileListType) {
        case "fakedir",
            if (PathEnd == "") {
                FileList = Object:keys()
                FileListReady = 1
            }
            else {
                Object:afileListQuery(PathEnd)
            }
            break
        
        case "realdir",
            fileList(Object["path", string] + "/" + PathEnd + "/*")
            break
        
        default,
    }
}

function afileListQuery(Path:string) {
    Files:afileListQuery(Path)
}

function number afileListIsReady() {
    switch (FileListType) {
        case "realdir",
            return fileLoadedList()
        
        case "fakedir",
            if (FileListReady) {
                FileListReady = 0
                return 1
            }
            else {
                return 0
            }
        
        default,
            return 0
    }
}

function array afileListGetList() {
    switch (FileListType) {
        case "realdir",
            return fileReadList()
        
        case "fakedir",
            return FileList
        
        default,
            return FILE_NO_LIST
    }
}

# File load
function table:afileLoadQuery(Path:string) {
    local PathExp = Path:explode("/")
    
    local Object = This[PathExp[1, string], table]
    local PathEnd = PathExp:concat("/", 2)
    
    FileLoadType = Object:type()
    switch (FileLoadType) {
        case "fakedir",
            Object:afileLoadQuery(PathEnd)
            break
        
        case "fakefile",
            FileLoad = Object["data", string]
            FileLoadReady = 1
            break
        
        case "realdir", case "realfile",
            fileLoad(Object["path", string] + "/" + PathEnd)
            break
        
        default,
    }
}

function afileLoadQuery(Path:string) {
    Files:afileLoadQuery(Path)
}

function number afileLoadIsReady() {
    switch (FileLoadType) {
        case "realdir", case "realfile",
            return fileLoaded()
        
        case "fakefile",
            if (FileLoadReady) {
                FileLoadReady = 0
                return 1
            }
            else {
                return 0
            }
        
        default,
            return 0
    }
}

function string afileLoadGetData() {
    switch (FileLoadType) {
        case "fakefile",
            return FileLoad
            
        case "realdir", case "realfile",
            return fileRead()
        
        default,
            return ""
    }
}

function table:afileWrite(Path:string, Data:string) {
    local PathExp = Path:explode("/")
    
    local Object = This[PathExp[1, string], table]
    local PathEnd = PathExp:concat("/", 2)
    
    Type = Object:type()
    switch (Type) {
        case "fakedir",
            Object:afileWrite(PathEnd, Data)
            break
        
        case "fakefile",
            Object["data", string] = Data
            break
        
        case "realdir", case "realfile",
            fileWrite(Object["path", string] + "/" + PathEnd, Data)
            break
        
        case "",
            Object = object("fakefile")
            Object["data", string] = Data
            This[PathExp[1, string], table] = Object
            break
        
        default,
    }
}

function afileWrite(Path:string, Data:string) {
    Files:afileWrite(Path, Data)
}
