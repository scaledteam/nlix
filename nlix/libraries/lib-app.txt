#
# This E2 made by scaled
#

@name lib-app

# Persists
@persist Apps:table
@persist ThisAppName:string ThisAppData:table ThisAppState ThisWorkspace:table
@persist ThisApp:table ThisAppId

# Const
@persist APPS_INFO:table

function appManager() {
    if (AllData["app-count", number] > 1) {
        AllData["this-app-id", number] = AllData["this-app-id", number] % AllData["app-count", number] + 1
    }
    else {
        AllData["this-app-id", number] = 1
    }
    
    ThisAppId = AllData["this-app-id", number]
    ThisApp = Apps[ThisAppId, table]
    ThisAppName = ThisApp["name", string]
}

function number appExists(AppName:string) {
    return APPS_INFO:exists(AppName)
}

function number findAppByName(AppName:string) {
    for (I = 1, AllData["app-count", number]) {
        if (Apps[I, table]["workspace", table]["name", string] != ThisWorkspace["name", string]) {
            continue
        }
        elseif (Apps[I, table]["name", string] == AppName) {
            return I
        }
    }
    return -1
}

function number appLaunch(AppName:string) {
    local AppId = 0
    if (AllData["app-closed", array]:count() > 0) {
        AppId = AllData["app-closed", array]:shiftNumber()
    }
    else {
        AllData["app-count", number] = AllData["app-count", number] + 1
        AppId = AllData["app-count", number]
    }
    
    Apps[AppId, table] = table()
    Apps[AppId, table]["name", string] = AppName
    Apps[AppId, table]["data", table] = table()
    Apps[AppId, table]["events", array] = array()
    Apps[AppId, table]["workspace", table] = ThisWorkspace
    return AppId
}

function number command(Command:string) {
    Command = Command:trim()
    local AppName = Command
    local Args = ""
    local WithArgs = Command:find(" ")
    if (WithArgs) {
        local CommandExplode = Command:explode(" ")
        AppName = CommandExplode[1, string]
        Args = CommandExplode:concat(" ", 2):trim()
    }
    
    if (appExists(AppName)) {
        local AppId = appLaunch(AppName)
        if (WithArgs) {
            glbS(AppId, "args", Args)
        }
        return AppId
    }
    else {
        return -1
    }
}

function appClose(AppId) {
    Apps[AppId, table]:clear()
    Apps[AppId, table]:remove("data")
    Apps[AppId, table]:remove("events")
    Apps:remove(AppId)
    if (AppId == AllData["app-count", number]) {
        AllData["app-count", number] = AllData["app-count", number] - 1
    }
    else {
        AllData["app-closed", array]:pushNumber(AppId)
    }
}

function appCloseSelf() {
    appClose(ThisAppId)
}

function appSetState(State) {
    ThisAppData["state", number] = State
}

function appOffsetState(State) {
    ThisAppData["state", number] = ThisAppData["state", number] + State
}

function appNextState() {
    ThisAppData["state", number] = ThisAppData["state", number] + 1
}

function appPrevState() {
    ThisAppData["state", number] = ThisAppData["state", number] - 1
}

function number app(AppName:string) {
    if (ThisAppName == AppName) {
        ThisAppData = ThisApp["data", table]
        ThisAppState = ThisAppData["state", number]
        
        ThisWorkspace = ThisApp["workspace", table]
        
        AppBreak = 1
        
        return 1
    }
    else {
        return 0
    }
}

function number appLaunched(AppId) {
    return Apps:exists(AppId)
}


function autostart() {
    foreach (WorkspaceName, Workspace:table = Workspaces) {
        ThisWorkspace = Workspace
        log("Starting apps on workspace \"" + Workspace["name", string] + "\" from autostart...\n")
        
        local AutoStarted = 0
        foreach (I, AppName:string = Workspace["autostart", array]) {
            log("Starting " + AppName + "...")
            if (appLaunch(AppName) == -1) {
                log(" Failed.\n")
            }
            else {
                log(" Ok.\n")
                AutoStarted++
            }
        }
        
        if (AutoStarted < Workspace["autostart", array]:count()) {
            log("Some apps failed to start.\n")
        }
        else {
            log("All apps from autostart started.\n")
        }
        
        Workspace:remove("autostart")
    }
}
