#
# This E2 made by scaled
#

@name lib-app

# Persists
@persist Apps:table
@persist ThisAppName:string ThisAppData:table ThisAppState ThisWorkspace:table
@persist ThisApp:table ThisAppId ThisAppUser:string

# Const
@persist APPS_INFO:table

function appManager() {
    if (Apps:count() > 1) {
        AllData["ThisAppId", number] = AllData["ThisAppId", number] % Apps:count() + 1
    }
    else {
        AllData["ThisAppId", number] = 1
    }
    
    ThisAppId = AllData["ThisAppId", number]
    ThisApp = Apps[ThisAppId, table]
    ThisAppName = ThisApp["name", string]
}

function number appExists(AppName:string) {
    return APPS_INFO:exists(AppName)
}

function table findAppByName(AppName:string) {
    for (I = 1, Apps:count()) {
        local App = Apps[I, table]
        if (App["name", string] == AppName & App["workspace", table] == ThisWorkspace) {
            return App
        }
    }
    return NULL
}

function table table:appLaunch(AppName:string) {
    local AppId = 0
    
    local App = table()
    App["name", string] = AppName
    App["user", string] = ROOT_USER
    App["data", table] = table()
    App["events", table] = table()
    App["workspace", table] = This
    Apps:pushTable(App)
    return App
}

function table appLaunch(AppName:string) {
    return ThisWorkspace:appLaunch(AppName)
}

function table command(Command:string) {
    Command = Command:trim()
    local AppName = Command
    local Args = ""
    local WithArgs = Command:find(" ")
    if (WithArgs) {
        local CommandExplode = Command:explode(" ")
        AppName = CommandExplode[1, string]
        Args = CommandExplode:concat(" ", 2):trim()
    }
    
    if (appExists(AppName)) {
        local App = appLaunch(AppName)
        if (WithArgs) {
            App:varWrite("args", Args)
        }
        return App
    }
    else {
        return NULL
    }
}

function table:appClose() {
    This["data", table]:clear()
    This["events", table]:clear()
    for (I = 1, Apps:count()) {
        if (Apps[I, table] == This) {
            #print(Apps[I, table])
            Apps:remove(I)
        }
    }
    This:clear()
    #This = NULL
}

function appClose() {
    ThisApp:appClose()
}

# Deprecated
function appCloseSelf() {
    ThisApp:appClose()
}

function appSetState(State) {
    ThisAppData["state", number] = State
}

function appOffsetState(State) {
    ThisAppData["state", number] = ThisAppData["state", number] + State
}

function appNextState() {
    ThisAppData["state", number] = ThisAppData["state", number] + 1
}

function appPrevState() {
    ThisAppData["state", number] = ThisAppData["state", number] - 1
}

function number app(AppName:string) {
    if (ThisAppName == AppName) {
        ThisAppData = ThisApp["data", table]
        ThisAppState = ThisAppData["state", number]
        ThisAppUser = ThisApp["user", string]
        
        ThisWorkspace = ThisApp["workspace", table]
        
        AppBreak = 1
        
        return 1
    }
    else {
        return 0
    }
}

function number table:appIsLaunched() {
    for (I = 1, Apps:count()) {
        if (Apps[I, table] == This) {
            return 1
        }
    }
    return 0
    #return This != NULL
}


function table table:startWorkspace() {
    foreach (I, AppName:string = This["autostart", array]) {
        This:appLaunch(AppName)
    }
    return This
}
