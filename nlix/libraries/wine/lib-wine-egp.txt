#
# Created by scaled
#

@name lib-wine-egp
@persist Screen:table
@persist EGP
@persist [Sys_Resolution Sys_CursorPos]:vector2
@persist [EGP_SymbolSize EGP_Size_Screen]:vector2

EGP = 1

Sys_Resolution = vec2(512)
#EGP_SymbolSize = Sys_Resolution / 512 * vec2(0.52, 1)
EGP_SymbolSize = vec2(0.52, 1)

# Replace egp functions
## Draw
function table:egpBox(Id, Pos:vector2, Size:vector2) {
    egpBox(Id, Pos - Size / 2, Size)
}

function table:egpBoxOutline(Id, Pos:vector2, Size:vector2) {
    egpBoxOutline(Id, Pos - Size / 2, Size)
}

function table:egpColor(Id, Color:vector) {
    egpColor(Id, Color)
}

function table:egpColor(Id, Color:vector4) {
    egpColor4(Id, Color)
}

function table:egpAlpha(Id, Alpha) {
    egpAlpha(Id, Alpha)
}

function table:egpParent(Id, ParentId) {
    egpParent(Id, ParentId)
}

function table:egpSetText(Id, Text:string) {
    egpSetText(Id, Text)
}

function table:egpText(Id, Text:string, Pos:vector2) {
    egpText(Id, Text, Pos)
}

function table:egpTextLayout(Id, Text:string, Pos:vector2, Size:vector2) {
    egpTextLayout(Id, Text, Pos, Size)
}

function number table:egpFont(Id, Font:string) { }

function table:egpSize(Id, Size:vector2) {
    egpSize(Id, Size)
}

function table:egpSize(Id, Size) {
    egpSizeNumber(Id, Size)
}

function table:egpPos(Id, Pos:vector2) {
    local Type = egpType(Id)
    switch (Type) {
        case "box", case "boxOutline",
            egpPos(Id, Pos - egpSize(Id) / 2)
            break
        
        default,
            egpPos(Id, Pos)
    }
}

function table:egpAlign(Id, Align) {
    egpAlign(Id, Align)
}

function table:egpAlign(Id, Align, Align2) {
    egpAlign2(Id, Align, Align2)
}

function table:egpLine(Id, Pos1:vector2, Pos2:vector2) {
    egpLine(Id, Pos1, Pos2)
}

function table:egpLineStrip(Id, Poses:array) {
    egpLineStrip(Id, Poses)
}

function table:egpLineStrip(Id, Pos1:vector2) { }

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2) { }

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2, Pos12:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11, Pos12))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2, Pos12:vector2, Pos13:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11, Pos12, Pos13))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2, Pos12:vector2, Pos13:vector2, Pos14:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11, Pos12, Pos13, Pos14))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2, Pos12:vector2, Pos13:vector2, Pos14:vector2, Pos15:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11, Pos12, Pos13, Pos14, Pos15))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2, Pos12:vector2, Pos13:vector2, Pos14:vector2, Pos15:vector2, Pos16:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11, Pos12, Pos13, Pos14, Pos15, Pos16))
}

function table:egpLineStrip(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2, Pos4:vector2, Pos5:vector2, Pos6:vector2, Pos7:vector2, Pos8:vector2, Pos9:vector2, Pos10:vector2, Pos11:vector2, Pos12:vector2, Pos13:vector2, Pos14:vector2, Pos15:vector2, Pos16:vector2, Pos17:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Pos8, Pos9, Pos10, Pos11, Pos12, Pos13, Pos14, Pos15, Pos16, Pos17))
}

function table:egpCircle(Id, Pos:vector2, Size:vector2) {
    egpCircle(Id, Pos, Size)
}

function table:egpCircleOutline(Id, Pos:vector2, Size:vector2) {
    egpCircleOutline(Id, Pos, Size)
}

function table:egpFidelity(Id, Fidelity) { }

function table:egpWedge(Id, Pos:vector2, Size:vector2) {
    egpCircle(Id, Pos, Size)
}

function table:egpCopy(Id, IdFrom) {
    egpCopy(Id, IdFrom)
}

function table:egpRemove(Id) {
    egpRemove(Id)
}

function table:egpMaterial(Id, Material:string) { }

# FIX IT
function table:egpPoly(Id, Poses:array) {
    egpLineStrip(Id, Poses)
}

function table:egpPoly(Id, Pos1:vector2, Pos2:vector2, Pos3:vector2) {
    egpLineStrip(Id, array(Pos1, Pos2, Pos3))
}

## Get info
function vector table:egpColor(Id) {
    return egpColor(Id)
}

function number table:egpHasObject(Id) {
    return egpHasObject(Id)
}

function vector2 table:egpPos(Id) {
    if (Id == EGP) {
        return vec2()
    }
    else {
        local Type = egpType(Id)
        switch (Type) {
            case "box", case "boxOutline",
                return egpPos(Id) + egpSize(Id) / 2
            
            default,
                return egpPos(Id)
        }
    }
}

function vector2 table:egpSize(Id) {
    return egpSize(Id)
}

function number table:egpParent(Id) {
    return egpParent(Id)
}

# Windows functions
function vector egpUniColor(Color:vector) {
    return vec(255) * (array(Color:x(), Color:y(), Color:z()):average() < 190)
}

function vector egpUniColor(ParentID) {
    return egpUniColor(Screen:egpColor(ParentID))
}

function number egpTextSizeX(Number) {
    return int(EGP_SymbolSize:x() * int(Number / EGP_SymbolSize:y()) / 2) * 2
}

function number egpInrange(EGPID) {
    local Pos = egpPos(EGPID)
    local Size = egpSize(EGPID)
    return inrange(Sys_CursorPos, Pos, Pos + Size)
}

function number egpInrange(Pos1:vector2, Pos2:vector2, EGPparent) {
    return inrange(Sys_CursorPos, Pos1, Pos2)
}

function vector2 egpChoiceHelper(Pos:vector2, Step) {
    return floor((Sys_CursorPos - Pos) / Step)
}

function vector2 appChoiceHelper(Pos:vector2, Step) {
    return floor((Sys_CursorPos - Pos) / Step)
}

function vector2 egpChoiceHelper(Pos:vector2, Step:vector2) {
    return floor((Sys_CursorPos - Pos) / Step)
}

function vector2 appChoiceHelper(Pos:vector2, Step:vector2) {
    return floor((Sys_CursorPos - Pos) / Step)
}

function array  array:shortArray(Size){
    local Return = array()
    foreach(J, S:string = This){
        for(I = 1, S:length(), Size){
            Return:pushString(S:sub(I, I+Size-1))
        }
        if(!perf(99)){
            return Return
        }
    }
    return Return
}
function array string:shortArray(Size){
    local Resuilt=array()
    for(I=1,int(This:length()/Size+1)){
        Resuilt:pushString(This:sub(1+Size*(I-1),Size*I))
    }
    return Resuilt
}

function array  array:cutArray(Size){
    local Resuilt=array()
    foreach(I,N:string=This){
        Resuilt[I,string] = N:replace("	","  "):left(Size)
    }
    return Resuilt
}

# Windows modifyed functon

function number appEgpInrange(Pos1:vector2, Pos2:vector2) {
    return inrange(Sys_CursorPos, Pos1, Pos2)
}

function number egp(Id) {
    return EGP + Id
}

function vector2 autoResolution() {
    return vec2(512)
}

function entity table:entity() {
    local Device = varTable("driver-egp"):deviceGet()
    if (Device:exists("port")) {
        return Device["post", wirelink]:entity()
    }
    else {
        return entity()
    }
}
