#
# This E2 made by scaled
#

@name lib-workspaces

# Persists
@persist SysStartTime
@persist Dmesg:string
@persist AllData:gtable

function log(Text:string) {
    Dmesg += "[ " + (int((systime() - SysStartTime) * 1000) / 1000) + " ] " + Text
}

function table createWorkspace(Autostart:array) {
    local Workspace = table()
    Workspace["autostart", array] = Autostart
    
    Workspace["devices", table] = table()
    
    return Workspace
}

function table:addDevice(Device:table) {
    if (Device != NULL) {
        This["devices", table]:pushTable(Device)
    }
}

function table:initPort(Port:wirelink) {
    local Devices = ThisWorkspace["devices", table]
    # Check if device exists
    local DeviceExists = 0
    for (I = 1, Devices:count()) {
        if (Devices[I, table]["port", wirelink] == Port) {
            DeviceExists = 1
            break
        }
    }
    
    if (!DeviceExists) {
        switch (Port:entity():type()) {
            case "gmod_wire_egp",
                # Connect as screen
                local Device = table()
                Device["type", string] = "egp-screen"
                
                Device["resolution", vector2] = vec2(512)
                Device["max-objects", number] = egpMaxObjects()
                
                Device["port", wirelink] = Port
                Device["busy", number] = 0
                Device["valid", number] = 1
                
                This:addDevice(Device)
                
                log("egp-screen connected\n")
                
                # Connect as cursor
                Device = table()
                Device["type", string] = "egp-cursor"
                
                Device["resolution", vector2] = vec2(512)
                
                Device["port", wirelink] = Port
                Device["busy", number] = 0
                Device["valid", number] = 1
                
                This:addDevice(Device)
                
                log("egp-cursor connected\n")
                break
            
            case "gmod_wire_consolescreen",
                local Device = table()
                Device["type", string] = "console-screen"
                Device["resolution", vector2] = vec2(30, 18)
                Device["port", wirelink] = Port
                Device["busy", number] = 0
                Device["valid", number] = 1
                
                This:addDevice(Device)
                
                log("console-screen connected\n")
                break
            
            case "gmod_wire_keyboard",
                local Device = table()
                Device["type", string] = "keyboard"
                Device["port", wirelink] = Port
                Device["busy", number] = 0
                Device["valid", number] = 1
                
                This:addDevice(Device)
                
                log("keyboard connected\n")
                break
            
            case "gmod_wire_digitalscreen",
                local Device = table()
                Device["type", string] = "digital-screen"
                Device["resolution", vector2] = vec2(128)
                Device["port", wirelink] = Port
                Device["busy", number] = 0
                Device["valid", number] = 1
                
                This:addDevice(Device)
                
                log("digital-screen connected\n")
                break
            
            case "gmod_wire_expression2",
                local Devices = Port["NlixDevices", table]
                printTable(Devices)
                for (I = 1, Devices:count()) {
                    This:addDevice(Devices[I, table])
                }
                
                log("nlix-device connected\n")
                break
        }
    }
}

function clearAll() {
    Apps:clear()
    APPS_INFO:clear()
    AllData:clear()
}

function table table:findDeviceByType(DeviceType:string) {
    for (I = 1, This["devices", table]:count()) {
        local Device = This["devices", table][I, table]
        if (Device["type", string] == DeviceType) {
            if (!Device["busy", number]) {
                return Device
            }
        }
    }
    return NULL
}

function table findDeviceByType(DeviceType:string) {
    return ThisWorkspace:findDeviceByType(DeviceType)
}


function number table:isValid() {
    return This:exists("valid")
}
