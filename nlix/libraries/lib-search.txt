#
# Created by scaled
#

@name lib-search

# One search
function searchStartForOne(Table:table, Type:string) {
    P["searchTable", table] = Table
    P["searchType", string] = Type
}

function number searchLoopForOne() {
    local Type = P["searchType", string]
    local Counter = P["searchCounter", number]
    local Table = P["searchTable", table]
    for (I = 1, KERNEL_OVERLOAD) {
        Counter++
        
        if (Counter > Table:count()) {
            P["searchResult", table] = NULL
        }
        
        local SubTable = Table[Counter, table]
        if (SubTable:type() == Type) {
            P["searchResult", table] = SubTable
            P["searchCounter", number] = Counter
            return 1
        }
    }
    P["searchCounter", number] = Counter
    return 0
}

function number searchInfinityLoopForOne() {
    local Type = P["searchType", string]
    local Counter = P["searchCounter", number]
    local Table = P["searchTable", table]
    for (I = 1, KERNEL_OVERLOAD) {
        Counter++
        
        if (Counter > Table:count()) {
            Counter = 0
        }
        
        local SubTable = Table[Counter, table]
        if (SubTable:type() == Type) {
            P["searchResult", table] = SubTable
            P["searchCounter", number] = Counter
            return 1
        }
    }
    P["searchCounter", number] = Counter
    return 0
}


function searchStartForMany(Table:table, Type:string) {
    P["searchTable", table] = Table
    P["searchType", string] = Type
    P["searchResult", table] = table()
}

function number searchLoopForMany() {
    local Type = P["searchType", string]
    local Counter = P["searchCounter", number]
    local Table = P["searchTable", table]
    for (I = 1, KERNEL_OVERLOAD) {
        Counter++
        
        if (Counter > Table:count()) {
            if (P["searchResult", table]:count() == 0) {
                P["searchResult", table] = NULL
            }
            P["searchCounter", number] = Counter
            return 1
        }
        
        local SubTable = Table[Counter, table]
        if (SubTable:type() == Type) {
            P["searchResult", table]:pushTable(SubTable)
        }
    }
    P["searchCounter", number] = Counter
    return 0
}


function table searchGetResult() {
    P:remove("searchTable")
    P:remove("searchType")
    local Result = P["searchResult", table]
    P:remove("searchResult")
    return Result
}

function table searchGetTempResult() {
    return P["searchResult", table]
}

function number searchIsReady() {
    return !P:exists("searchTable")
}


# Many searches
function searchStartForOne(Id:string, Table:table, TargetType:string) {
    if (!P:exists("searches")) {
        P["searches", table] = table()
    }
    
    local Search = table()
    Search["table", table] = Table
    Search["targetType", string] = TargetType
    
    local Searches = P["searches", table]
    Searches[Id, table] = Search
}

function number searchLoopForOne(Id:string) {
    local Search = P["searches", table][Id, table]
    
    local TargetType = Search["targetType", string]
    local Counter = Search["counter", number]
    local Table = Search["table", table]
    
    for (I = 1, KERNEL_OVERLOAD) {
        Counter++
        
        if (Counter > Table:count()) {
            Search["result", table] = NULL
            return 1
        }
        
        local SubTable = Table[Counter, table]
        if (SubTable:type() == TargetType) {
            Search["result", table] = SubTable
            Search["counter", number] = Counter
            return 1
        }
    }
    Search["counter", number] = Counter
    return 0
}

function number searchInfinityLoopForOne(Id:string) {
    local Search = P["searches", table][Id, table]
    
    local TargetType = Search["targetType", string]
    local Counter = Search["counter", number]
    local Table = Search["table", table]
    
    for (I = 1, KERNEL_OVERLOAD) {
        Counter++
        
        if (Counter > Table:count()) {
            Counter = 0
            continue
        }
        
        local SubTable = Table[Counter, table]
        if (SubTable:type() == TargetType) {
            Search["result", table] = SubTable
            Search["counter", number] = Counter
            return 1
        }
    }
    Search["counter", number] = Counter
    return 0
}


function searchStartForMany(Id:string, Table:table, TargetType:string) {
    if (!P:exists("searches")) {
        P["searches", table] = table()
    }
    
    local Search = table()
    Search["table", table] = Table
    Search["targetType", string] = TargetType
    Search["result", table] = table()
    
    local Searches = P["searches", table]
    Searches[Id, table] = Search
}

function number searchLoopForMany(Id:string) {
    local Search = P["searches", table][Id, table]
    
    local TargetType = Search["targetType", string]
    local Counter = Search["counter", number]
    local Table = Search["table", table]
    
    for (I = 1, KERNEL_OVERLOAD) {
        Counter++
        
        if (Counter > Table:count()) {
            return 1
        }
        
        local SubTable = Table[Counter, table]
        if (SubTable:type() == TargetType) {
            Search["result", table]:pushTable(SubTable)
            Search["counter", number] = Counter
            return 1
        }
    }
    Search["counter", number] = Counter
    return 0
}


function table searchGetResult(Id:string) {
    local Search = P["searches", table][Id, table]
    local Result = Search["result", table]
    Search:clear()
    
    P["searches", table]:remove(Id)
    
    return Result
}

function table searchGetTempResult(Id:string) {
    return P["searches", table][Id, table]["result", table]
}

function number searchIsReady(Id:string) {
    return !P["searches", table]:exists(Id)
}
