#
# This E2 made by scaled
#

@name lib-driver-egp

@persist LIB_DRIVER_EGP_COLOR_WHITE:vector4

LIB_DRIVER_EGP_COLOR_WHITE = vec4(255)

function table createVirtualEgpScreen(Resolution:vector2, MaxObjects) {
    local Device = object("virtual-egp-screen")
    Device["idle", number] = 1
    
    Device["resolution", vector2] = Resolution
    Device["max-objects", number] = MaxObjects
    
    Device["output-queue", array] = array()
    Device["input-queue", array] = array()
    
    return Device
}

function number egpInit() {
    return driverInitForProgram("driver-egp")
}

function egpBox(Id, Pos:vector2, Size:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpBox")
    Program:eventSend(Id)
    Program:eventSend(Pos)
    Program:eventSend(Size)
}

function egpBoxOutline(Id, Pos:vector2, Size:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpBoxOutline")
    Program:eventSend(Id)
    Program:eventSend(Pos)
    Program:eventSend(Size)
}

function egpText(Id, Text:string, Pos:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpText")
    Program:eventSend(Id)
    Program:eventSend(Text)
    Program:eventSend(Pos)
}

function egpTextLayout(Id, Text:string, Pos:vector2, Size:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpTextLayout")
    Program:eventSend(Id)
    Program:eventSend(Text)
    Program:eventSend(Pos)
    Program:eventSend(Size)
}

function egpSetText(Id, Text:string) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpSetText")
    Program:eventSend(Id)
    Program:eventSend(Text)
}

function egpColor(Id, Color:vector) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpColor")
    Program:eventSend(Id)
    Program:eventSend(Color)
}

function egpColor4(Id, Color:vector4) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpColor4")
    Program:eventSend(Id)
    Program:eventSend(Color)
}

function egpAlpha(Id, Alpha) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpAlpha")
    Program:eventSend(Id)
    Program:eventSend(Alpha)
}

function egpSize(Id, Size:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpSize")
    Program:eventSend(Id)
    Program:eventSend(Size)
}

function egpSizeNumber(Id, Size) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpSizeNumber")
    Program:eventSend(Id)
    Program:eventSend(Size)
}

function egpParent(Id, Id2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpParent")
    Program:eventSend(Id)
    Program:eventSend(Id2)
}

function egpParentPoint(Id, Pos:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpParentPoint")
    Program:eventSend(Id)
    Program:eventSend(Pos)
}

function egpParentToBase(Id) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpParentToBase")
    Program:eventSend(Id)
}

function egpAlign(Id, Align) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpAlign")
    Program:eventSend(Id)
    Program:eventSend(Align)
}

function egpAlign2(Id, Align, Align2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpAlign2")
    Program:eventSend(Id)
    Program:eventSend(Align)
    Program:eventSend(Align2)
}

function egpCircle(Id, Pos:vector2, Size:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpCircle")
    Program:eventSend(Id)
    Program:eventSend(Pos)
    Program:eventSend(Size)
}

function egpCircleOutline(Id, Pos:vector2, Size:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpCircleOutline")
    Program:eventSend(Id)
    Program:eventSend(Pos)
    Program:eventSend(Size)
}

function egpLine(Id, Pos1:vector2, Pos2:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpLine")
    Program:eventSend(Id)
    Program:eventSend(Pos1)
    Program:eventSend(Pos2)
}

function egpLineStrip(Id, Poses:array) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpLineStrip")
    Program:eventSend(Id)
    Program:eventSend(Poses)
}

function egpPos(Id, Pos:vector2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpPos")
    Program:eventSend(Id)
    Program:eventSend(Pos)
}

function egpRemove(Id) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpRemove")
    Program:eventSend(Id)
}

function egpCopy(Id, Id2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpCopy")
    Program:eventSend(Id)
    Program:eventSend(Id2)
}

function egpMove(Id, Id2) {
    local Program = P["driver-egp", table]
    
    Program:eventSend("egpMove")
    Program:eventSend(Id)
    Program:eventSend(Id2)
}

function vector2 egpResolution() {
    return P["driver-egp", table]["resolution", vector2]
}

function number egpIsIdle() {
    return P["driver-egp", table]["idle", number]
}

function number egpMaxObjects2() {
    return P["driver-egp", table]["egpMaxObjects", number]
}

function number egpParent(Id) {
    return P["driver-egp", table]["egpObjects", table][Id, table]["parent", number]
}

function vector egpColor(Id) {
    return vec(P["driver-egp", table]["egpObjects", table][Id, table]["color", vector4])
}

function vector4 egpColor4(Id) {
    return P["driver-egp", table]["egpObjects", table][Id, table]["color", vector4]
}

function number egpHasObject(Id) {
    return P["driver-egp", table]["egpObjects", table][Id, table]["exists", number]
}

function vector2 egpPos(Id) {
    return P["driver-egp", table]["egpObjects", table][Id, table]["pos", vector2]
}

function vector2 egpSize(Id) {
    return P["driver-egp", table]["egpObjects", table][Id, table]["size", vector2]
}

function string egpType(Id) {
    return P["driver-egp", table]["egpObjects", table][Id, table]["type", string]
}
