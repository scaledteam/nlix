#
# This E2 made by scaled
#

@name lib-driver-egp

function number initEgp() {
    
    if (varExists("driver-egp")) {
        local App = varTable("driver-egp")
        if (App:varNumber("ready")) {
            return 0
        }
    }
    else {
        local App = findAppByName("driver-egp")
        if (App == NULL) {
            return 0
        }
        else {
            varWrite("driver-egp", App)
            if (App:varNumber("ready")) {
                return 1
            }
            else {
                return 0
            }
        }
    }
    
}

function egpBox(Id, Pos:vector2, Size:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpBox")
    App:sendEvent(Id)
    App:sendEvent(Pos)
    App:sendEvent(Size)
}

function egpText(Id, Text:string, Pos:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpText")
    App:sendEvent(Id)
    App:sendEvent(Text)
    App:sendEvent(Pos)
}

function egpTextLayout(Id, Text:string, Pos:vector2, Size:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpTextLayout")
    App:sendEvent(Id)
    App:sendEvent(Text)
    App:sendEvent(Pos)
    App:sendEvent(Size)
}

function egpSetText(Id, Text:string) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpSetText")
    App:sendEvent(Id)
    App:sendEvent(Text)
}

function egpColor(Id, Color:vector) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpColor")
    App:sendEvent(Id)
    App:sendEvent(Color)
}

function egpSize(Id, Size) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpSize")
    App:sendEvent(Id)
    App:sendEvent(Size)
}

function egpParent(Id, Id2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpParent")
    App:sendEvent(Id)
    App:sendEvent(Id2)
}

function egpParentPoint(Id, Pos:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpParentPoint")
    App:sendEvent(Id)
    App:sendEvent(Pos)
}

function egpParentToBase(Id) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpParentToBase")
    App:sendEvent(Id)
}

function egpAlign(Id, Align) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpAlign")
    App:sendEvent(Id)
    App:sendEvent(Align)
}

function egpAlign2(Id, Align, Align2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpAlign2")
    App:sendEvent(Id)
    App:sendEvent(Align)
    App:sendEvent(Align2)
}

function egpCircle(Id, Pos:vector2, Size:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpCircle")
    App:sendEvent(Id)
    App:sendEvent(Pos)
    App:sendEvent(Size)
}

function egpCircleOutline(Id, Pos:vector2, Size:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpCircleOutline")
    App:sendEvent(Id)
    App:sendEvent(Pos)
    App:sendEvent(Size)
}

function egpPos(Id, Pos:vector2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpPos")
    App:sendEvent(Id)
    App:sendEvent(Pos)
}

function egpRemove(Id) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpRemove")
    App:sendEvent(Id)
}

function egpCopy(Id, Id2) {
    local App = varTable("driver-egp")
    
    App:sendEvent("egpCopy")
    App:sendEvent(Id)
    App:sendEvent(Id2)
}

function vector2 egpResolution() {
    return varTable("driver-egp"):varVector2("resolution")
}

function number egpIsIdle() {
    return varTable("driver-egp"):varNumber("idle")
}

function number egpMaxObjects2() {
    return varTable("driver-egp"):varNumber("egpMaxObjects")
}

function number egpParent(Id) {
    return varTable("driver-egp"):varArray("egpParents")[Id, number]
}
