#
# Created by scaled
#

@name lib-driver

function driverInit() {
    programFinderWrite()
}

function number driverInitForProgram(DriverName:string) {
    #[local Program = programFindByName(DriverName)
    if (Program != NULL) {
        varWrite(DriverName, Program)
        return 1
    }
    else {
        return 0
    }]#
    
    #[if (searchIsReady()) {
        searchStartForOne(Programs, DriverName)
    }
    if (searchInfinityLoopForOne()) {
        if (searchGetTempResult()["environment", table] == ThisEnvironment) {
            varWrite(DriverName, searchGetResult())
            return 1
        }
    }
    return 0]#
    
    local Program = programFinderRead(DriverName)
    if (Program != NULL) {
        P[DriverName, table] = Program
        return 1
    }
    else {
        return 0
    }
}

function table table:driverGetDevice() {
    return This["device", table]
}

#[function number driverPopDevice(DeviceType:string) {
    for (I = 1, ThisWorkspace:count()) {
        local Device = ThisWorkspace[I, table]
        if (Device:type() == DeviceType) {
            ThisWorkspace:remove(I)
            varWrite("device", Device)
            return 1
        }
    }
    return 0
}

function driverPushDevice() {
    ThisWorkspace:pushTable(varTable("device"))
}]#

function number driverPopDevice(DeviceType:string) {
    if (P["devices", table]:count() == 0 & devicePop(DeviceType)) {
        P["device", table] = deviceGet()
        return 1
    }
    return 0
}

function driverPushDevice() {
    devicePush()
}

#[function number driverPopDevice(DeviceType:string) {
    if (searchIsReady(DeviceType)) {
        searchStartForOne(DeviceType, ThisProgram["workspace", table], DeviceType)
    }
    if (searchInfinityLoopForOne(DeviceType)) {
        if (!searchGetTempResult(DeviceType)["program", table]:isValid()) {
            local Device = searchGetResult(DeviceType)
            Device["program", table] = ThisProgram
            
            if (!ThisProgram:exists("devices")) {
                ThisProgram["devices", table] = table()
            }
            ThisProgram["devices", table]:pushTable(Device)
            return 1
        }
    }
    return 0
}]#
