#
# Created by scaled
#

@name lib-event

function eventInit() {
    P["events", table] = table()
}

function number eventWaitString(EventName:string) {
    if (P["events", table]:count() > 0 & P["events", table][P["events", table]:count(), string] == EventName) {
        P["events", table]:popString()
        return 1
    }
    else {
        return 0
    }
}

function number eventExists() {
    return P["events", table]:count() > 0
}

function number table:eventExists() {
    return This["events", table]:count() > 0
}

function table:eventSend(Data:angle)       { This["events", table]:unshiftAngle(Data) }
function table:eventSend(Data:array)       { This["events", table]:unshiftArray(Data) }
function table:eventSend(Data:bone)        { This["events", table]:unshiftBone(Data) }
function table:eventSend(Data:complex)     { This["events", table]:unshiftComplex(Data) }
function table:eventSend(Data:entity)      { This["events", table]:unshiftEntity(Data) }
function table:eventSend(Data:matrix)      { This["events", table]:unshiftMatrix(Data) }
function table:eventSend(Data:matrix2)     { This["events", table]:unshiftMatrix2(Data) }
function table:eventSend(Data:matrix4)     { This["events", table]:unshiftMatrix4(Data) }
function table:eventSend(Data:number)      { This["events", table]:unshiftNumber(Data) }
function table:eventSend(Data:quaternion)  { This["events", table]:unshiftQuaternion(Data) }
function table:eventSend(Data:string)      { This["events", table]:unshiftString(Data) }
function table:eventSend(Data:table)       { This["events", table]:unshiftTable(Data) }
function table:eventSend(Data:vector)      { This["events", table]:unshiftVector(Data) }
function table:eventSend(Data:vector2)     { This["events", table]:unshiftVector2(Data) }
function table:eventSend(Data:vector4)     { This["events", table]:unshiftVector4(Data) }
function table:eventSend(Data:wirelink)    { This["events", table]:unshiftWirelink(Data) }
#ifdef ranger()
function table:eventSend(Data:ranger)      { This["events", table]:unshiftRanger(Data) }
#endif
#ifdef effect()
function table:eventSend(Data:effect)      { This["events", table]:unshiftEffect(Data) }
#endif

function angle      eventGetAngle()     { return P["events", table]:popAngle() }
function array      eventGetArray()     { return P["events", table]:popArray() }
function bone       eventGetBone()      { return P["events", table]:popBone() }
function complex    eventGetComplex()   { return P["events", table]:popComplex() }
function entity     eventGetEntity()    { return P["events", table]:popEntity() }
function matrix     eventGetMatrix()    { return P["events", table]:popMatrix() }
function matrix2    eventGetMatrix2()   { return P["events", table]:popMatrix2() }
function matrix4    eventGetMatrix4()   { return P["events", table]:popMatrix4() }
function number     eventGetNumber()    { return P["events", table]:popNumber() }
function quaternion eventGetQuaternion(){ return P["events", table]:popQuaternion() }
function string     eventGetString()    { return P["events", table]:popString() }
function table      eventGetTable()     { return P["events", table]:popTable() }
function vector     eventGetVector()    { return P["events", table]:popVector() }
function vector2    eventGetVector2()   { return P["events", table]:popVector2() }
function vector4    eventGetVector4()   { return P["events", table]:popVector4() }
function wirelink   eventGetWirelink()  { return P["events", table]:popWirelink() }
#ifdef ranger()
function ranger     eventGetRanger()    { return P["events", table]:popRanger() }
#endif
#ifdef effect()
function effect     eventGetEffect()    { return P["events", table]:popEffect() }
#endif
