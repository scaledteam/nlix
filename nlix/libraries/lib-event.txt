#
# Created by scaled
#

@name lib-event
@persist ThisProgramEvents:table

function number eventWaitString(EventName:string) {
    if (ThisProgramEvents:count() > 0 & ThisProgramEvents[ThisProgramEvents:count(), string] == EventName) {
        ThisProgramEvents:popString()
        return 1
    }
    else {
        return 0
    }
}

function number eventsExists() {
    return ThisProgramEvents:count() > 0
}

function number table:eventsExists() {
    return This["events", table]:count() > 0
}

function table:eventSend(Data:angle)       { This["events", table]:unshiftAngle(Data) }
function table:eventSend(Data:array)       { This["events", table]:unshiftArray(Data) }
function table:eventSend(Data:bone)        { This["events", table]:unshiftBone(Data) }
function table:eventSend(Data:complex)     { This["events", table]:unshiftComplex(Data) }
function table:eventSend(Data:entity)      { This["events", table]:unshiftEntity(Data) }
function table:eventSend(Data:matrix)      { This["events", table]:unshiftMatrix(Data) }
function table:eventSend(Data:matrix2)     { This["events", table]:unshiftMatrix2(Data) }
function table:eventSend(Data:matrix4)     { This["events", table]:unshiftMatrix4(Data) }
function table:eventSend(Data:number)      { This["events", table]:unshiftNumber(Data) }
function table:eventSend(Data:quaternion)  { This["events", table]:unshiftQuaternion(Data) }
function table:eventSend(Data:string)      { This["events", table]:unshiftString(Data) }
function table:eventSend(Data:table)       { This["events", table]:unshiftTable(Data) }
function table:eventSend(Data:vector)      { This["events", table]:unshiftVector(Data) }
function table:eventSend(Data:vector2)     { This["events", table]:unshiftVector2(Data) }
function table:eventSend(Data:vector4)     { This["events", table]:unshiftVector4(Data) }
function table:eventSend(Data:wirelink)    { This["events", table]:unshiftWirelink(Data) }
#ifdef ranger()
function table:eventSend(Data:ranger)      { This["events", table]:unshiftRanger(Data) }
#endif
#ifdef effect()
function table:eventSend(Data:effect)      { This["events", table]:unshiftEffect(Data) }
#endif

function angle      eventGetAngle()     { return ThisProgramEvents:popAngle() }
function array      eventGetArray()     { return ThisProgramEvents:popArray() }
function bone       eventGetBone()      { return ThisProgramEvents:popBone() }
function complex    eventGetComplex()   { return ThisProgramEvents:popComplex() }
function entity     eventGetEntity()    { return ThisProgramEvents:popEntity() }
function matrix     eventGetMatrix()    { return ThisProgramEvents:popMatrix() }
function matrix2    eventGetMatrix2()   { return ThisProgramEvents:popMatrix2() }
function matrix4    eventGetMatrix4()   { return ThisProgramEvents:popMatrix4() }
function number     eventGetNumber()    { return ThisProgramEvents:popNumber() }
function quaternion eventGetQuaternion(){ return ThisProgramEvents:popQuaternion() }
function string     eventGetString()    { return ThisProgramEvents:popString() }
function table      eventGetTable()     { return ThisProgramEvents:popTable() }
function vector     eventGetVector()    { return ThisProgramEvents:popVector() }
function vector2    eventGetVector2()   { return ThisProgramEvents:popVector2() }
function vector4    eventGetVector4()   { return ThisProgramEvents:popVector4() }
function wirelink   eventGetWirelink()  { return ThisProgramEvents:popWirelink() }
#ifdef ranger()
function ranger     eventGetRanger()    { return ThisProgramEvents:popRanger() }
#endif
#ifdef effect()
function effect     eventGetEffect()    { return ThisProgramEvents:popEffect() }
#endif
