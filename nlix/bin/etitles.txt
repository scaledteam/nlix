#
# Created by scaled
#

@name etitles

switch (P["state", number]) {
    case 0,
        if (egpReady()) {
            if (egpMax() > 20) {
                # Background
                egpBox(1, vec2(), egpResolution())
                egpColor(1, randvec(160, 190))
                
                P["Ws", table] = table()
                
                P["state", number] = 1
            }
            else {
                end()
            }
        }
        break
    
    case 1,
        local MaxTitles = 4
        local TitleId = 0
        
        if (!P:exists("kbd")) {
            local Kbd = exec("kbd")
            P["kbd", array] = Kbd["out", array] = array()
        }
        
        # Set first workspace
        local W = table()
        local EgpParentId = 2
        W["egpId", number] = EgpParentId + 1
        W["egpPos", vector2] = vec2(0, egpResolution()[2] * 0.95)
        W["egpCount", number] = 2
        
        local Program = table()
        W["P", table] = Program
        
        P["terminal", table] = Program
        W["in", array] = Program["in", array] = array(egpResolution() * vec2(1, 0.05), W["egpCount", number])
        W["out", array] = Program["out", array] = array()
        
        Program["kbd", array] = W["kbd", array] = array()
        
        egpPos(EgpParentId, W["egpPos", vector2])
        for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
            egpParent(I, EgpParentId)
        }
        
        P["Ws", table]:pushTable(W)
        # end
        
        P["state", number] = 2
        break
    
    case 2,
        if (P["Ws", table]:count() > 0) {
            local Counter = P["counter", number] + 1
            
            if (Counter > P["Ws", table]:count()) {
                Counter = 1
            }
            
            local W = P["Ws", table][Counter, table]
            
            if (W["P", table]:isValid()) {
                # Cursor
                if (egpCursor()[1] != -1) {
                    W["in", array][3, vector2] = egpCursor() - W["egpPos", vector2]
                }
                else {
                    W["in", array][3, vector2] = vec2(-1)
                }
                
                # Focus
                if (inrange(egpCursor(), W["egpPos", vector2], W["egpPos", vector2] + egpResolution() * vec2(0.5, 0.475))) {
                    P["focus", number] = Counter
                }
                
                # Keyboard
                if (Counter == P["focus", number]) {
                    local KbdReal = P["kbd", array]
                    local KbdW = W["kbd", array]
                    
                    KbdW:clear()
                    for (I = 1, KbdReal:count()) {
                        KbdW[I, number] = KbdReal[I, number]
                    }
                }
                else {
                    local KbdW = W["kbd", array]
                    if (KbdW:count() > 0) {
                        KbdW:clear()
                    }
                }
                
                # Image
                if (egpWait()) {
                    local In = W["out", array]
                    local EgpId = W["egpId", number]
                    
                    for (I = 1, Overload) {
                        if (In:count() > 0) {
                            local Command = In:shiftString()
                            local Id = In:shiftNumber() + EgpId
                            
                            switch (Command) {
                                case "box",         egpBox(Id, In:shiftVector2(), In:shiftVector2()) break
                                case "circle",      egpCircle(Id, In:shiftVector2(), In:shiftVector2()) break
                                case "line",        egpLine(Id, In:shiftVector2(), In:shiftVector2()) break
                                case "text",        egpText(Id, In:shiftString(), In:shiftVector2(), In:shiftVector2()) break
                                case "color",       egpColor(Id, In:shiftVector()) break
                                case "pos",         egpPos(Id, In:shiftVector2()) break
                                case "size",        egpSize(Id, In:shiftVector2()) break
                                case "sizeNumber",  egpSize(Id, In:shiftNumber()) break
                                case "setText",     egpText(Id, In:shiftString()) break
                                case "parent",      egpParent(Id, In:shiftNumber() + EgpId) break
                                case "remove",      egpRemove(Id) break
                                
                                case "command",
                                    local CommandExp = In:shiftString():explode(" ")
                                    
                                    switch (CommandExp[1, string]) {
                                        case "start",
                                            local Id = P["Ws", table]:count() - 1
                                            
                                            local W = table()
                                            local EgpParentId = 6 + int(Id * egpMax() / 4)
                                            W["egpId", number] = EgpParentId + 1
                                            W["egpPos", vector2] = vec2(Id % 2, int(Id / 2)) * egpResolution() * vec2(0.5, 0.475)
                                            W["egpCount", number] = int((egpMax() - 6) / 4)
                                            
                                            local Program = exec(CommandExp[2, string])
                                            W["P", table] = Program
                                            
                                            W["in", array] = Program["in", array] = array(egpResolution() * vec2(0.5, 0.475), W["egpCount", number])
                                            W["out", array] = Program["out", array] = array()
                                            
                                            Program["kbd", array] = W["kbd", array] = array()
                                            
                                            egpPos(EgpParentId, W["egpPos", vector2])
                                            for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
                                                egpParent(I, EgpParentId)
                                            }
                                            
                                            P["Ws", table]:pushTable(W)
                                            break
                                        
                                        case "close",
                                            local W = P["Ws", table]:removeTable(CommandExp[2, string]:toNumber())
                                            
                                            for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
                                                egpRemove(I)
                                            }
                                            
                                            W["P", table]:clear()
                                            
                                            W:clear()
                                            break
                                        
                                        case "exit",
                                            end()
                                            break
                                        
                                        default,
                                            print("Error: Unknown command \"" + CommandExp:concat(" ") + "\".")
                                    }
                                    break
                                
                                default,
                                    print("Error: Unknown command \"" + Command + "\".")
                            }
                        }
                        else {
                            break
                        }
                    }
                }
            }
            else {
                for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
                    egpRemove(I)
                }
                
                W:clear()
                
                P["Ws", table]:remove(Counter)
                Counter--
            }
            
            P["counter", number] = Counter
        }
        
        # Terminal
        if (P:exists("terminal")) {
            P = P["terminal", table]
            
            switch (P["state", number]) {
                case 0,
                    egpBox(1, vec2(), egpResolution())
                    egpColor(1, vec())
                    egpText(2, "", vec2(), egpResolution())
                    egpSize(2, egpResolution()[2])
                    
                    local Skbd = exec("skbd")
                    P["in", array] = Skbd["out", array] = array()
                    P["term", array] = Skbd["term", array] = array()
                    Skbd["in", array] = P["kbd", array]
                    
                    P["state", number] = 1
                    break
                
                case 1,
                    if (wait()) {
                        out("command")
                        P["out", array]:pushNumber(0)
                        out(in())
                    }
                    
                    if (P["term", array]:count() > 0) {
                        local In = P["term", array]:shiftString()
                        if (In == ERASE1) {
                            P["text", string] = P["text", string]:sub(1, -2)
                        }
                        elseif (In == "\n") {
                            P["text", string] = ""
                        }
                        else {
                            P["text", string] = P["text", string] + In
                        }
                        egpText(2, P["text", string])
                    }
                    break
            }
        }
        break
}

