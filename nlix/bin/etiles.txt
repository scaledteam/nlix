#
# Created by scaled
#

@name etiles

switch (P["state", number]) {
    case 0,
        if (P["parent", table]:type() == "sh") {
            P["parent", table]:clear()
            
            local Egp = exec("egp")
            makeProgramLast()
            P["parent", table] = Egp
            P["in", array] = Egp["out", array] = array()
            P["out", array] = Egp["in", array] = array()
        }
        
        P["state", number] = 1
        break
    
    case 1,
        if (egpReady()) {
            if (egpMax() > 20) {
                # Background
                egpBox(1, vec2(), egpResolution())
                egpColor(1, hsv2rgb(random(360), 1, 0.7))
                
                P["Ws", table] = table()
                
                P["state", number] = 2
            }
            else {
                end()
            }
        }
        break
    
    case 2,
        local MaxTitles = 4
        local TitleId = 0
        
        if (!P:exists("kbd")) {
            local Kbd = exec("kbd")
            makeProgramLast()
            
            P["kbd", array] = Kbd["out", array] = array()
        }
        
        # Set first workspace
        local W = table()
        local EgpParentId = 2
        W["egpId", number] = EgpParentId + 1
        W["egpPos", vector2] = vec2(0, egpResolution()[2] * 0.95)
        W["egpCount", number] = 2
        W["egpResolution", vector2] = egpResolution() * vec2(1, 0.05)
        
        local Program = table()
        W["P", table] = Program
        
        P["terminal", table] = Program
        Program["parent", table] = P
        W["in", array] = Program["in", array] = array(W["egpResolution", vector2], W["egpCount", number])
        W["out", array] = Program["out", array] = array()
        
        Program["kbd", array] = W["kbd", array] = array()
        
        egpPos(EgpParentId, W["egpPos", vector2])
        for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
            egpParent(I, EgpParentId)
        }
        
        P["Ws", table]:pushTable(W)
        # end
        
        P["state", number] = 3
        break
    
    case 3,
        if (P["Ws", table]:count() > 0) {
            local OverloadCounter = 0
            while (OverloadCounter < Overload) {
                local Counter = P["counter", number] + 1
                
                if (Counter > P["Ws", table]:count()) {
                    #Counter = 1
                    Counter = 0
                    P["counter", number] = Counter
                    break
                }
                
                P["counter", number] = Counter
                
                local W = P["Ws", table][Counter, table]
                
                if (W["P", table]:isValid()) {
                    # Focus
                    if (P["focus", number] != Counter & inrange(egpCursor() - W["egpPos", vector2], vec2(), W["egpResolution", vector2])) {
                        # Clear old data after focus changed
                        local OldW = P["Ws", table][P["focus", number], table]
                        OldW["kbd", array]:clear()
                        OldW["in", array][4, number] = 0
                        
                        # set new focus
                        P["focus", number] = Counter
                    }
                    
                    # Cursor
                    if (egpCursor()[1] != -1) {
                        W["in", array][3, vector2] = egpCursor() - W["egpPos", vector2]
                    }
                    else {
                        W["in", array][3, vector2] = vec2(-1)
                    }
                    
                    if (Counter == P["focus", number]) {
                        # Use key from egp
                        W["in", array][4, number] = egpUse()
                        
                        # Keyboard
                        local KbdReal = P["kbd", array]
                        local KbdW = W["kbd", array]
                        
                        KbdW:clear()
                        for (I = 1, KbdReal:count()) {
                            KbdW[I, number] = KbdReal[I, number]
                        }
                    }
                    
                    # Image
                    local In = W["out", array]
                    local EgpId = W["egpId", number]
                    
                    while (OverloadCounter < Overload) {
                        OverloadCounter++
                        if (In:count() > 0) {
                            local Command = In:shiftString()
                            local Id = In:shiftNumber() + EgpId
                            
                            switch (Command) {
                                case "box",         egpBox(Id, In:shiftVector2(), In:shiftVector2()) break
                                case "circle",      egpCircle(Id, In:shiftVector2(), In:shiftVector2()) break
                                case "line",        egpLine(Id, In:shiftVector2(), In:shiftVector2()) break
                                case "text",        egpText(Id, In:shiftString(), In:shiftVector2(), In:shiftVector2()) break
                                case "color",       egpColor(Id, In:shiftVector()) break
                                case "pos",         egpPos(Id, In:shiftVector2()) break
                                case "size",        egpSize(Id, In:shiftVector2()) break
                                case "sizeNumber",  egpSize(Id, In:shiftNumber()) break
                                case "align1",      egpAlign(Id, In:shiftNumber()) break
                                case "align2",      egpAlign(Id, In:shiftNumber(), In:shiftNumber()) break
                                case "setText",     egpText(Id, In:shiftString()) break
                                case "parent",      egpParent(Id, In:shiftNumber() + EgpId) break
                                case "remove",      egpRemove(Id) break
                                default,
                            }
                        }
                        else {
                            break
                        }
                    }
                    
                    # Terminal
                    if (W["P", table] == P["terminal", table]) {
                        P = P["terminal", table]
                        
                        switch (P["state", number]) {
                            case 0,
                                egpBox(1, vec2(), egpResolution())
                                egpColor(1, vec())
                                
                                P["text", string] = "etiles $ "
                                egpText(2, P["text", string], vec2(), egpResolution())
                                egpSize(2, egpResolution()[2])
                                
                                local Skbd = exec("skbd")
                                P["in", array] = Skbd["out", array] = array()
                                P["term", array] = Skbd["term", array] = array()
                                Skbd["in", array] = P["kbd", array]
                                
                                Skbd["parent", table] = P["parent", table]
                                
                                P["state", number] = 1
                                break
                            
                            case 1,
                                if (P["term", array]:count() > 0) {
                                    local In = P["term", array]:shiftString()
                                    if (In == ERASE1) {
                                        P["text", string] = P["text", string]:sub(1, -2)
                                    }
                                    elseif (In == ERASE | In == "\n") {
                                        P["text", string] = "etiles $ "
                                    }
                                    else {
                                        P["text", string] = P["text", string] + In
                                    }
                                    egpText(2, P["text", string])
                                }
                                
                                if (wait()) {
                                    local CommandExp = in():trim():replaceRE("  +", " "):explode(" ")
                                    
                                    P = P["parent", table]
                                    
                                    switch (CommandExp[1, string]) {case "close", case "c",
                                            local W = P["Ws", table]:removeTable(CommandExp[2, string]:toNumber())
                                            
                                            for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
                                                egpRemove(I)
                                            }
                                            
                                            W["P", table]:clear()
                                            
                                            W:clear()
                                            break
                                        
                                        case "sh",
                                            P:clear()
                                            P["terminal", table]:clear()
                                            exec("sh")
                                            break
                                        
                                        case "background",
                                            egpColor(1, hsv2rgb(random(360), 1, 0.7))
                                            break
                                        
                                        case "exit", case "e", case "quit", case "q",
                                            P:clear()
                                            P["terminal", table]:clear()
                                            break
                                        
                                        default,
                                            local Id = P["Ws", table]:count() - 1
                                            
                                            local W = table()
                                            local EgpParentId = 6 + int(Id * egpMax() / 4)
                                            W["egpId", number] = EgpParentId + 1
                                            W["egpPos", vector2] = vec2(Id % 2, int(Id / 2)) * egpResolution() * vec2(0.5, 0.475)
                                            W["egpCount", number] = int((egpMax() - 6) / 4)
                                            W["egpResolution", vector2] = egpResolution() * vec2(0.5, 0.475)
                                            
                                            local Program = exec(CommandExp:shiftString())
                                            #makeProgramLast()
                                            if (CommandExp:count() > 0) {
                                                Program["args", array] = CommandExp
                                            }
                                            
                                            W["P", table] = Program
                                            
                                            W["in", array] = Program["in", array] = array(W["egpResolution", vector2], W["egpCount", number])
                                            W["out", array] = Program["out", array] = array()
                                            
                                            Program["kbd", array] = W["kbd", array] = array()
                                            
                                            egpPos(EgpParentId, W["egpPos", vector2])
                                            for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
                                                egpParent(I, EgpParentId)
                                            }
                                            
                                            P["Ws", table]:pushTable(W)
                                    }
                                }
                                break
                        }
                    }
                }
                else {
                    for (I = W["egpId", number], W["egpId", number] + W["egpCount", number]) {
                        egpRemove(I)
                    }
                    
                    W:clear()
                    
                    P["Ws", table]:remove(Counter)
                    Counter--
                }
                OverloadCounter++
            }
        }
        break
}

