#
# Created by scaled
#

@name xeyes

P2F["xeyes", string] = "xeyes"

function xeyes() {
    switch (P["state", number]) {
        case 0,
            if (P["xframe", table]["count", number] < 7) {
                out("Error: Not enough egp elements.\n")
                end()
            }
            else {
                local Res = P["xframe", table]["size", vector2]
                # Background
                xcreate(table(
                    "type" = "box",
                    "size" = Res,
                    "color" = vec(127)
                ))
                
                # Left eye
                local Center = Res * vec2(0.25, 0.5)
                xcreate(table(
                    "type" = "circle",
                    "pos" = Center,
                    "size" = Res * vec2(0.25, 0.5),
                    "color" = vec()
                ))
                xcreate(table(
                    "type" = "circle",
                    "pos" = Center,
                    "size" = Res * vec2(0.225, 0.45)
                ))
                
                P["leftEye", table] = xcreate(table(
                    "type" = "circle",
                    "pos" = Center,
                    "size" = Res * vec2(0.05),
                    "color" = vec()
                ))
                
                # Right eye
                Center = Res * vec2(0.75, 0.5)
                xcreate(table(
                    "type" = "circle",
                    "pos" = Center,
                    "size" = Res * vec2(0.25, 0.5),
                    "color" = vec()
                ))
                xcreate(table(
                    "type" = "circle",
                    "pos" = Center,
                    "size" = Res * vec2(0.225, 0.45)
                ))
                
                P["rightEye", table] = xcreate(table(
                    "type" = "circle",
                    "pos" = Center,
                    "size" = Res * vec2(0.05),
                    "color" = vec()
                ))
                
                P["state", number] = 1
            }
            break
        
        case 1,
            local CursorPos = xcursor()
            if (P["cursorPosOld", vector2] != CursorPos) {
                local Res = P["xframe", table]["size", vector2]
                
                if (CursorPos == vec2(-1)) {
                    P["leftEye", table]["pos", vector2] = Res * vec2(0.25, 0.5)
                    P["rightEye", table]["pos", vector2] = Res * vec2(0.75, 0.5)
                    
                    xdraw(P["leftEye", table])
                    xdraw(P["rightEye", table])
                }
                else {
                    local RadiusX = Res[1] / 2
                    local RadiusY = Res[2]
                    local Aspect = RadiusY / RadiusX
                    
                    local Offset1 = Res * vec2(0.25, 0.5)
                    local Offset2 = Res * vec2(0.75, 0.5)
                    
                    local Direction1 = CursorPos - Offset1
                    local Direction2 = CursorPos - Offset2
                    
                    local Eye1Pos = Direction1 / sqrt(Direction1[1] ^ 2 + (Direction1[2] / Aspect) ^ 2) * RadiusX / 2
                    local Eye2Pos = Direction2 / sqrt(Direction2[1] ^ 2 + (Direction2[2] / Aspect) ^ 2) * RadiusX / 2
                    
                    if (Eye1Pos:length() > Direction1:length()) {
                        Eye1Pos = Direction1
                    }
                    if (Eye2Pos:length() > Direction2:length()) {
                        Eye2Pos = Direction2
                    }
                    
                    P["leftEye", table]["pos", vector2] = Eye1Pos + Offset1
                    P["rightEye", table]["pos", vector2] = Eye2Pos + Offset2
                    
                    xdraw(P["leftEye", table])
                    xdraw(P["rightEye", table])
                    
                    P["cursorPosOld", vector2] = CursorPos
                }
            }
            break
    }
}
