#
# Created by scaled and CornerPin
#

@name xobj

xmenuAdd("3d", "xobj")

KList["xobj", number] = 1

function xobj() {
    switch (P["state", number]) {
        case 0,
            P["limit", number] = 30
            
            local Program = exec("cat")
            if (args() < 1) {
                Program["args", array] = array("/e2shared/obj/cube.obj")
                #Program["args", array] = array("/e2shared/obj/testfileigor.obj")
                #Program["args", array] = array("/e2shared/obj/raritywet.obj")
            }
            else {
                Program["args", array] = array(arg(1))
            }
            
            Program["out", array] = P["in", array] = array()
            P["state", number] = 1
            break
        
        case 1,
            if (wait()) {
                P["file", array] = in():explode("\n")
                
                P["model", table] = table(
                    "v" = array(),  #Vertices
                    "vt" = array(), #Texture coordinates
                    "vn" = array(), #Vertex normals
                    "vp" = array(), #Parameter space vertices
                    "f" = table()   #Faces
                )
                P["state", number] = 2
            }
            break
        
        case 2,
            for (I = 1, Overload) {
                if (P["file", array]:count() > 0) {
                    local Stream = P["file", array]:shiftString():trimRight():explodeRE("%s+")
                    switch (Stream[1, string]) {
                        case "v",
                            local X = Stream[2, string]:toNumber()
                            local Y = Stream[3, string]:toNumber()
                            local Z = Stream[4, string]:toNumber()
                            local W = (Stream[5, string] ?: "1"):toNumber()
                            
                            P["model", table]["v", array]:pushVector(vec(X, Y, Z) * W)
                            break
                        
                        case "vt",
                            local U = Stream[2, string]:toNumber()
                            local V = Stream[3, string]:toNumber()
                            local W = (Stream[4, string] ?: "0"):toNumber()
                            
                            P["model", table]["vt", array]:pushVector(vec(U, V, W))
                            break
                        
                        case "vn",
                            local X = Stream[2, string]:toNumber()
                            local Y = Stream[3, string]:toNumber()
                            local Z = Stream[4, string]:toNumber()
                            
                            P["model", table]["vn", array]:pushVector(vec(X, Y, Z))
                            break
                        
                        case "vp",
                            local U = Stream[2, string]:toNumber()
                            local V = (Stream[3, string] ?: "0"):toNumber()
                            local W = (Stream[4, string] ?: "0"):toNumber()
                            
                            P["model", table]["vp", array]:pushVector(vec(U, V, W))
                            break
                        
                        case "f",
                            Stream:shift()
                            local ToPush = table("v" = array())
                            
                            foreach(I, Indices:string = Stream){
                                local Info = Indices:explode("/")
                                
                                #Vertex indices
                                ToPush["v", array]:pushNumber(Info[1, string]:toNumber())
                                
                                #Texture coordinate indices
                                if(Info[2, string]){
                                    if(!ToPush:exists("vt")){ToPush["vt", array] = array()}
                                    ToPush["vt", array]:pushNumber(Info[2, string]:toNumber())
                                }
                                
                                #Normal indices
                                if(Info[3, string]){
                                    if(!ToPush:exists("vn")){ToPush["vn", array] = array()}
                                    ToPush["vn", array]:pushNumber(Info[3, string]:toNumber())
                                }
                            }
                            
                            P["model", table]["f", table]:pushTable(ToPush)
                            break
                        
                        default,
                    }
                }
                else {
                    P["state", number] = 3
                    break
                }
            }
            break
        
        case 3,
            if (xcanCreate(P["limit", number])) {
                xcreate("box"):xsize(P["xframe", table]["size", vector2]):xcolor(vec())
                
                P["limit", number] = min(P["model", table]["f", table]:count(), P["limit", number] - 1)
                P["state", number] = 4
            }
            break
        
        case 4,
            local Scale = 0.4
            
            local Res = P["xframe", table]["size", vector2]
            local Matrix = matrix(ang(20))
            local Offset = Res / 2
            
            for (I = 1, Overload) {
                local Counter = P["counter", number] + 1
                
                if (Counter > P["limit", number]) {
                    P["state", number] = 5
                    return
                }
                
                xcreate("polyOutline"):xvertices(array(
                    clamp(Scale * vec2(Matrix * P["model", table]["v", array][P["model", table]["f", table][Counter, table]["v", array][1, number], vector]) + Offset, vec2(), Res),
                    clamp(Scale * vec2(Matrix * P["model", table]["v", array][P["model", table]["f", table][Counter, table]["v", array][2, number], vector]) + Offset, vec2(), Res),
                    clamp(Scale * vec2(Matrix * P["model", table]["v", array][P["model", table]["f", table][Counter, table]["v", array][3, number], vector]) + Offset, vec2(), Res),
                    clamp(Scale * vec2(Matrix * P["model", table]["v", array][P["model", table]["f", table][Counter, table]["v", array][4, number], vector]) + Offset, vec2(), Res)
                ))
                
                P["counter", number] = Counter
            }
            break
        
        case 5,
            break
    }
}
